package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new subscriptions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscriptions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SubscriptionsGet Gets details about a specified subscription.
*/
func (a *Client) SubscriptionsGet(params *SubscriptionsGetParams, authInfo runtime.ClientAuthInfoWriter) (*SubscriptionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Subscriptions_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriptionsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubscriptionsGetOK), nil

}

/*
SubscriptionsList Gets all subscriptions for a tenant.
*/
func (a *Client) SubscriptionsList(params *SubscriptionsListParams, authInfo runtime.ClientAuthInfoWriter) (*SubscriptionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Subscriptions_List",
		Method:             "GET",
		PathPattern:        "/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriptionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubscriptionsListOK), nil

}

/*
SubscriptionsListLocations gets all available geo locations

This operation provides all the locations that are available for resource providers; however, each resource provider may support a subset of this list.
*/
func (a *Client) SubscriptionsListLocations(params *SubscriptionsListLocationsParams, authInfo runtime.ClientAuthInfoWriter) (*SubscriptionsListLocationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionsListLocationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Subscriptions_ListLocations",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/locations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriptionsListLocationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubscriptionsListLocationsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
