package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Subscription Subscription information.
// swagger:model Subscription
type Subscription struct {

	// The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management. For example, 'Legacy, RoleBased'.
	AuthorizationSource string `json:"authorizationSource,omitempty"`

	// The subscription display name.
	// Read Only: true
	DisplayName string `json:"displayName,omitempty"`

	// The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.
	// Read Only: true
	State string `json:"state,omitempty"`

	// The subscription ID.
	// Read Only: true
	SubscriptionID string `json:"subscriptionId,omitempty"`

	// The subscription policies.
	SubscriptionPolicies *SubscriptionPolicies `json:"subscriptionPolicies,omitempty"`

	// The tenant ID.
	// Read Only: true
	TenantID string `json:"tenantId,omitempty"`
}

// Validate validates this subscription
func (m *Subscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubscriptionPolicies(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var subscriptionTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Enabled","Warned","PastDue","Disabled","Deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionTypeStatePropEnum = append(subscriptionTypeStatePropEnum, v)
	}
}

const (
	// SubscriptionStateEnabled captures enum value "Enabled"
	SubscriptionStateEnabled string = "Enabled"
	// SubscriptionStateWarned captures enum value "Warned"
	SubscriptionStateWarned string = "Warned"
	// SubscriptionStatePastDue captures enum value "PastDue"
	SubscriptionStatePastDue string = "PastDue"
	// SubscriptionStateDisabled captures enum value "Disabled"
	SubscriptionStateDisabled string = "Disabled"
	// SubscriptionStateDeleted captures enum value "Deleted"
	SubscriptionStateDeleted string = "Deleted"
)

// prop value enum
func (m *Subscription) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, subscriptionTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Subscription) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateSubscriptionPolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionPolicies) { // not required
		return nil
	}

	if m.SubscriptionPolicies != nil {

		if err := m.SubscriptionPolicies.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
