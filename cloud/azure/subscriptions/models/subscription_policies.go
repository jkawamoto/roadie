package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SubscriptionPolicies Subscription policies.
// swagger:model SubscriptionPolicies
type SubscriptionPolicies struct {

	// The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a subscription with a location placement Id of Public_2014-09-01 has access to Azure public regions.
	// Read Only: true
	LocationPlacementID string `json:"locationPlacementId,omitempty"`

	// The subscription quota ID.
	// Read Only: true
	QuotaID string `json:"quotaId,omitempty"`

	// The subscription spending limit.
	// Read Only: true
	SpendingLimit string `json:"spendingLimit,omitempty"`
}

// Validate validates this subscription policies
func (m *SubscriptionPolicies) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpendingLimit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var subscriptionPoliciesTypeSpendingLimitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["On","Off","CurrentPeriodOff"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionPoliciesTypeSpendingLimitPropEnum = append(subscriptionPoliciesTypeSpendingLimitPropEnum, v)
	}
}

const (
	// SubscriptionPoliciesSpendingLimitOn captures enum value "On"
	SubscriptionPoliciesSpendingLimitOn string = "On"
	// SubscriptionPoliciesSpendingLimitOff captures enum value "Off"
	SubscriptionPoliciesSpendingLimitOff string = "Off"
	// SubscriptionPoliciesSpendingLimitCurrentPeriodOff captures enum value "CurrentPeriodOff"
	SubscriptionPoliciesSpendingLimitCurrentPeriodOff string = "CurrentPeriodOff"
)

// prop value enum
func (m *SubscriptionPolicies) validateSpendingLimitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, subscriptionPoliciesTypeSpendingLimitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SubscriptionPolicies) validateSpendingLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.SpendingLimit) { // not required
		return nil
	}

	// value enum
	if err := m.validateSpendingLimitEnum("spendingLimit", "body", m.SpendingLimit); err != nil {
		return err
	}

	return nil
}
