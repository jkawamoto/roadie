package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new files API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for files API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
FileDeleteFromComputeNode deletes the specified task file from the compute node
*/
func (a *Client) FileDeleteFromComputeNode(params *FileDeleteFromComputeNodeParams) (*FileDeleteFromComputeNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFileDeleteFromComputeNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "File_DeleteFromComputeNode",
		Method:             "DELETE",
		PathPattern:        "/pools/{poolId}/nodes/{nodeId}/files/{fileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; odata=minimalmetadata"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FileDeleteFromComputeNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FileDeleteFromComputeNodeOK), nil

}

/*
FileDeleteFromTask deletes the specified task file from the compute node where the task ran
*/
func (a *Client) FileDeleteFromTask(params *FileDeleteFromTaskParams) (*FileDeleteFromTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFileDeleteFromTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "File_DeleteFromTask",
		Method:             "DELETE",
		PathPattern:        "/jobs/{jobId}/tasks/{taskId}/files/{fileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; odata=minimalmetadata"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FileDeleteFromTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FileDeleteFromTaskOK), nil

}

/*
FileGetFromComputeNode Returns the content of the specified task file.
*/
func (a *Client) FileGetFromComputeNode(params *FileGetFromComputeNodeParams) (*FileGetFromComputeNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFileGetFromComputeNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "File_GetFromComputeNode",
		Method:             "GET",
		PathPattern:        "/pools/{poolId}/nodes/{nodeId}/files/{fileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; odata=minimalmetadata"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FileGetFromComputeNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FileGetFromComputeNodeOK), nil

}

/*
FileGetFromTask Returns the content of the specified task file.
*/
func (a *Client) FileGetFromTask(params *FileGetFromTaskParams) (*FileGetFromTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFileGetFromTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "File_GetFromTask",
		Method:             "GET",
		PathPattern:        "/jobs/{jobId}/tasks/{taskId}/files/{fileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; odata=minimalmetadata"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FileGetFromTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FileGetFromTaskOK), nil

}

/*
FileGetNodeFilePropertiesFromComputeNode Gets the properties of the specified compute node file.
*/
func (a *Client) FileGetNodeFilePropertiesFromComputeNode(params *FileGetNodeFilePropertiesFromComputeNodeParams) (*FileGetNodeFilePropertiesFromComputeNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFileGetNodeFilePropertiesFromComputeNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "File_GetNodeFilePropertiesFromComputeNode",
		Method:             "HEAD",
		PathPattern:        "/pools/{poolId}/nodes/{nodeId}/files/{fileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; odata=minimalmetadata"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FileGetNodeFilePropertiesFromComputeNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FileGetNodeFilePropertiesFromComputeNodeOK), nil

}

/*
FileGetNodeFilePropertiesFromTask Gets the properties of the specified task file.
*/
func (a *Client) FileGetNodeFilePropertiesFromTask(params *FileGetNodeFilePropertiesFromTaskParams) (*FileGetNodeFilePropertiesFromTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFileGetNodeFilePropertiesFromTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "File_GetNodeFilePropertiesFromTask",
		Method:             "HEAD",
		PathPattern:        "/jobs/{jobId}/tasks/{taskId}/files/{fileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; odata=minimalmetadata"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FileGetNodeFilePropertiesFromTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FileGetNodeFilePropertiesFromTaskOK), nil

}

/*
FileListFromComputeNode lists all of the files in task directories on the specified compute node
*/
func (a *Client) FileListFromComputeNode(params *FileListFromComputeNodeParams) (*FileListFromComputeNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFileListFromComputeNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "File_ListFromComputeNode",
		Method:             "GET",
		PathPattern:        "/pools/{poolId}/nodes/{nodeId}/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; odata=minimalmetadata"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FileListFromComputeNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FileListFromComputeNodeOK), nil

}

/*
FileListFromTask lists the files in a task s directory on its compute node
*/
func (a *Client) FileListFromTask(params *FileListFromTaskParams) (*FileListFromTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFileListFromTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "File_ListFromTask",
		Method:             "GET",
		PathPattern:        "/jobs/{jobId}/tasks/{taskId}/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; odata=minimalmetadata"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FileListFromTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FileListFromTaskOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
