package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFileDeleteFromTaskParams creates a new FileDeleteFromTaskParams object
// with the default values initialized.
func NewFileDeleteFromTaskParams() *FileDeleteFromTaskParams {
	var (
		returnClientRequestIDDefault = bool(false)
		timeoutDefault               = int32(30)
	)
	return &FileDeleteFromTaskParams{
		ReturnClientRequestID: &returnClientRequestIDDefault,
		Timeout:               &timeoutDefault,

		requestTimeout: cr.DefaultTimeout,
	}
}

// NewFileDeleteFromTaskParamsWithTimeout creates a new FileDeleteFromTaskParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFileDeleteFromTaskParamsWithTimeout(timeout time.Duration) *FileDeleteFromTaskParams {
	var (
		returnClientRequestIDDefault = bool(false)
		timeoutDefault               = int32(30)
	)
	return &FileDeleteFromTaskParams{
		ReturnClientRequestID: &returnClientRequestIDDefault,
		Timeout:               &timeoutDefault,

		requestTimeout: timeout,
	}
}

// NewFileDeleteFromTaskParamsWithContext creates a new FileDeleteFromTaskParams object
// with the default values initialized, and the ability to set a context for a request
func NewFileDeleteFromTaskParamsWithContext(ctx context.Context) *FileDeleteFromTaskParams {
	var (
		returnClientRequestIdDefault = bool(false)
		timeoutDefault               = int32(30)
	)
	return &FileDeleteFromTaskParams{
		ReturnClientRequestID: &returnClientRequestIdDefault,
		Timeout:               &timeoutDefault,

		Context: ctx,
	}
}

/*FileDeleteFromTaskParams contains all the parameters to send to the API endpoint
for the file delete from task operation typically these are written to a http.Request
*/
type FileDeleteFromTaskParams struct {

	/*APIVersion
	  Client API Version.

	*/
	APIVersion string
	/*ClientRequestID
	  The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.

	*/
	ClientRequestID *string
	/*FileName
	  The path to the task file that you want to delete.

	*/
	FileName string
	/*JobID
	  The ID of the job that contains the task.

	*/
	JobID string
	/*OcpDate
	  The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.

	*/
	OcpDate *string
	/*Recursive
	  Whether to delete children of a directory. If the fileName parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.

	*/
	Recursive *bool
	/*ReturnClientRequestID
	  Whether the server should return the client-request-id in the response.

	*/
	ReturnClientRequestID *bool
	/*TaskID
	  The ID of the task whose file you want to delete.

	*/
	TaskID string
	/*Timeout
	  The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.

	*/
	Timeout *int32

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithRequestTimeout adds the timeout to the file delete from task params
func (o *FileDeleteFromTaskParams) WithRequestTimeout(timeout time.Duration) *FileDeleteFromTaskParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the file delete from task params
func (o *FileDeleteFromTaskParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the file delete from task params
func (o *FileDeleteFromTaskParams) WithContext(ctx context.Context) *FileDeleteFromTaskParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the file delete from task params
func (o *FileDeleteFromTaskParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithAPIVersion adds the aPIVersion to the file delete from task params
func (o *FileDeleteFromTaskParams) WithAPIVersion(aPIVersion string) *FileDeleteFromTaskParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the file delete from task params
func (o *FileDeleteFromTaskParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithClientRequestID adds the clientRequestID to the file delete from task params
func (o *FileDeleteFromTaskParams) WithClientRequestID(clientRequestID *string) *FileDeleteFromTaskParams {
	o.SetClientRequestID(clientRequestID)
	return o
}

// SetClientRequestID adds the clientRequestId to the file delete from task params
func (o *FileDeleteFromTaskParams) SetClientRequestID(clientRequestID *string) {
	o.ClientRequestID = clientRequestID
}

// WithFileName adds the fileName to the file delete from task params
func (o *FileDeleteFromTaskParams) WithFileName(fileName string) *FileDeleteFromTaskParams {
	o.SetFileName(fileName)
	return o
}

// SetFileName adds the fileName to the file delete from task params
func (o *FileDeleteFromTaskParams) SetFileName(fileName string) {
	o.FileName = fileName
}

// WithJobID adds the jobID to the file delete from task params
func (o *FileDeleteFromTaskParams) WithJobID(jobID string) *FileDeleteFromTaskParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the file delete from task params
func (o *FileDeleteFromTaskParams) SetJobID(jobID string) {
	o.JobID = jobID
}

// WithOcpDate adds the ocpDate to the file delete from task params
func (o *FileDeleteFromTaskParams) WithOcpDate(ocpDate *string) *FileDeleteFromTaskParams {
	o.SetOcpDate(ocpDate)
	return o
}

// SetOcpDate adds the ocpDate to the file delete from task params
func (o *FileDeleteFromTaskParams) SetOcpDate(ocpDate *string) {
	o.OcpDate = ocpDate
}

// WithRecursive adds the recursive to the file delete from task params
func (o *FileDeleteFromTaskParams) WithRecursive(recursive *bool) *FileDeleteFromTaskParams {
	o.SetRecursive(recursive)
	return o
}

// SetRecursive adds the recursive to the file delete from task params
func (o *FileDeleteFromTaskParams) SetRecursive(recursive *bool) {
	o.Recursive = recursive
}

// WithReturnClientRequestID adds the returnClientRequestID to the file delete from task params
func (o *FileDeleteFromTaskParams) WithReturnClientRequestID(returnClientRequestID *bool) *FileDeleteFromTaskParams {
	o.SetReturnClientRequestID(returnClientRequestID)
	return o
}

// SetReturnClientRequestID adds the returnClientRequestId to the file delete from task params
func (o *FileDeleteFromTaskParams) SetReturnClientRequestID(returnClientRequestID *bool) {
	o.ReturnClientRequestID = returnClientRequestID
}

// WithTaskID adds the taskID to the file delete from task params
func (o *FileDeleteFromTaskParams) WithTaskID(taskID string) *FileDeleteFromTaskParams {
	o.SetTaskID(taskID)
	return o
}

// SetTaskID adds the taskId to the file delete from task params
func (o *FileDeleteFromTaskParams) SetTaskID(taskID string) {
	o.TaskID = taskID
}

// WithTimeout adds the timeout to the file delete from task params
func (o *FileDeleteFromTaskParams) WithTimeout(timeout *int32) *FileDeleteFromTaskParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the file delete from task params
func (o *FileDeleteFromTaskParams) SetTimeout(timeout *int32) {
	o.Timeout = timeout
}

// WriteToRequest writes these params to a swagger request
func (o *FileDeleteFromTaskParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.requestTimeout)
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.ClientRequestID != nil {

		// header param client-request-id
		if err := r.SetHeaderParam("client-request-id", *o.ClientRequestID); err != nil {
			return err
		}

	}

	// path param fileName
	if err := r.SetPathParam("fileName", o.FileName); err != nil {
		return err
	}

	// path param jobId
	if err := r.SetPathParam("jobId", o.JobID); err != nil {
		return err
	}

	if o.OcpDate != nil {

		// header param ocp-date
		if err := r.SetHeaderParam("ocp-date", *o.OcpDate); err != nil {
			return err
		}

	}

	if o.Recursive != nil {

		// query param recursive
		var qrRecursive bool
		if o.Recursive != nil {
			qrRecursive = *o.Recursive
		}
		qRecursive := swag.FormatBool(qrRecursive)
		if qRecursive != "" {
			if err := r.SetQueryParam("recursive", qRecursive); err != nil {
				return err
			}
		}

	}

	if o.ReturnClientRequestID != nil {

		// header param return-client-request-id
		if err := r.SetHeaderParam("return-client-request-id", swag.FormatBool(*o.ReturnClientRequestID)); err != nil {
			return err
		}

	}

	// path param taskId
	if err := r.SetPathParam("taskId", o.TaskID); err != nil {
		return err
	}

	if o.Timeout != nil {

		// query param timeout
		var qrTimeout int32
		if o.Timeout != nil {
			qrTimeout = *o.Timeout
		}
		qTimeout := swag.FormatInt32(qrTimeout)
		if qTimeout != "" {
			if err := r.SetQueryParam("timeout", qTimeout); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
