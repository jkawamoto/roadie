package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// DeleteCertificateError An error encountered by the Batch service when deleting a certificate.
// swagger:model DeleteCertificateError
type DeleteCertificateError struct {

	// An identifier for the certificate deletion error. Codes are invariant and are intended to be consumed programmatically.
	Code string `json:"code,omitempty"`

	// A message describing the certificate deletion error, intended to be suitable for display in a user interface.
	Message string `json:"message,omitempty"`

	// A list of additional error details related to the certificate deletion error.
	//
	// This list includes details such as the active pools and nodes referencing this certificate. However, if a large number of resources reference the certificate, the list contains only about the first hundred.
	Values []*NameValuePair `json:"values"`
}

// Validate validates this delete certificate error
func (m *DeleteCertificateError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValues(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeleteCertificateError) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {

		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {

			if err := m.Values[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
