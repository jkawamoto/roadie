package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// JobDisableParameter Options when disabling a job.
// swagger:model JobDisableParameter
type JobDisableParameter struct {

	// What to do with active tasks associated with the job.
	//
	// Possible values are: requeue – Terminate running tasks and requeue them. The tasks will run again when the job is enabled. terminate – Terminate running tasks. The tasks will not run again. wait – Allow currently running tasks to complete.
	// Required: true
	DisableTasks *string `json:"disableTasks"`
}

// Validate validates this job disable parameter
func (m *JobDisableParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisableTasks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var jobDisableParameterTypeDisableTasksPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["requeue","terminate","wait"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobDisableParameterTypeDisableTasksPropEnum = append(jobDisableParameterTypeDisableTasksPropEnum, v)
	}
}

const (
	// JobDisableParameterDisableTasksRequeue captures enum value "requeue"
	JobDisableParameterDisableTasksRequeue string = "requeue"
	// JobDisableParameterDisableTasksTerminate captures enum value "terminate"
	JobDisableParameterDisableTasksTerminate string = "terminate"
	// JobDisableParameterDisableTasksWait captures enum value "wait"
	JobDisableParameterDisableTasksWait string = "wait"
)

// prop value enum
func (m *JobDisableParameter) validateDisableTasksEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jobDisableParameterTypeDisableTasksPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JobDisableParameter) validateDisableTasks(formats strfmt.Registry) error {

	if err := validate.Required("disableTasks", "body", m.DisableTasks); err != nil {
		return err
	}

	// value enum
	if err := m.validateDisableTasksEnum("disableTasks", "body", *m.DisableTasks); err != nil {
		return err
	}

	return nil
}
