package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// VirtualMachineConfiguration The configuration for compute nodes in a pool based on the Azure Virtual Machines infrastructure.
// swagger:model VirtualMachineConfiguration
type VirtualMachineConfiguration struct {

	// A reference to the Azure Virtual Machines Marketplace image to use.
	// Required: true
	ImageReference *ImageReference `json:"imageReference"`

	// The SKU of the Batch node agent to be provisioned on compute nodes in the pool.
	//
	// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
	// Required: true
	NodeAgentSKUID *string `json:"nodeAgentSKUId"`

	// Windows operating system settings on the virtual machine.
	//
	// This property must not be specified if the imageReference property specifies a Linux OS image.
	WindowsConfiguration *WindowsConfiguration `json:"windowsConfiguration,omitempty"`
}

// Validate validates this virtual machine configuration
func (m *VirtualMachineConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNodeAgentSKUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWindowsConfiguration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineConfiguration) validateImageReference(formats strfmt.Registry) error {

	if err := validate.Required("imageReference", "body", m.ImageReference); err != nil {
		return err
	}

	if m.ImageReference != nil {

		if err := m.ImageReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VirtualMachineConfiguration) validateNodeAgentSKUID(formats strfmt.Registry) error {

	if err := validate.Required("nodeAgentSKUId", "body", m.NodeAgentSKUID); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineConfiguration) validateWindowsConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.WindowsConfiguration) { // not required
		return nil
	}

	if m.WindowsConfiguration != nil {

		if err := m.WindowsConfiguration.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
