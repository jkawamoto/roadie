package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// MultiInstanceSettings Settings which specify how to run a multi-instance task.
//
// Multi-instance tasks are commonly used to support MPI tasks.
// swagger:model MultiInstanceSettings
type MultiInstanceSettings struct {

	// A list of files that the Batch service will download before running the coordination command line.
	//
	// The difference between common resource files and task resource files is that common resource files are downloaded for all subtasks including the primary, whereas task resource files are downloaded only for the primary.
	CommonResourceFiles []*ResourceFile `json:"commonResourceFiles"`

	// The command line to run on all the compute nodes to enable them to coordinate when the primary runs the main task command.
	//
	// A typical coordination command line launches a background service and verifies that the service is ready to process inter-node messages.
	CoordinationCommandLine string `json:"coordinationCommandLine,omitempty"`

	// The number of compute nodes required by the task.
	// Required: true
	NumberOfInstances *int32 `json:"numberOfInstances"`
}

// Validate validates this multi instance settings
func (m *MultiInstanceSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommonResourceFiles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNumberOfInstances(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MultiInstanceSettings) validateCommonResourceFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.CommonResourceFiles) { // not required
		return nil
	}

	for i := 0; i < len(m.CommonResourceFiles); i++ {

		if swag.IsZero(m.CommonResourceFiles[i]) { // not required
			continue
		}

		if m.CommonResourceFiles[i] != nil {

			if err := m.CommonResourceFiles[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *MultiInstanceSettings) validateNumberOfInstances(formats strfmt.Registry) error {

	if err := validate.Required("numberOfInstances", "body", m.NumberOfInstances); err != nil {
		return err
	}

	return nil
}
