package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// NodeReimageParameter Options for reimaging a compute node.
// swagger:model NodeReimageParameter
type NodeReimageParameter struct {

	// When to reimage the compute node and what to do with currently running tasks.
	//
	// The default value is requeue.
	NodeReimageOption string `json:"nodeReimageOption,omitempty"`
}

// Validate validates this node reimage parameter
func (m *NodeReimageParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeReimageOption(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nodeReimageParameterTypeNodeReimageOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["requeue","terminate","taskcompletion","retaineddata"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeReimageParameterTypeNodeReimageOptionPropEnum = append(nodeReimageParameterTypeNodeReimageOptionPropEnum, v)
	}
}

const (
	// NodeReimageParameterNodeReimageOptionRequeue captures enum value "requeue"
	NodeReimageParameterNodeReimageOptionRequeue string = "requeue"
	// NodeReimageParameterNodeReimageOptionTerminate captures enum value "terminate"
	NodeReimageParameterNodeReimageOptionTerminate string = "terminate"
	// NodeReimageParameterNodeReimageOptionTaskcompletion captures enum value "taskcompletion"
	NodeReimageParameterNodeReimageOptionTaskcompletion string = "taskcompletion"
	// NodeReimageParameterNodeReimageOptionRetaineddata captures enum value "retaineddata"
	NodeReimageParameterNodeReimageOptionRetaineddata string = "retaineddata"
)

// prop value enum
func (m *NodeReimageParameter) validateNodeReimageOptionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nodeReimageParameterTypeNodeReimageOptionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NodeReimageParameter) validateNodeReimageOption(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeReimageOption) { // not required
		return nil
	}

	// value enum
	if err := m.validateNodeReimageOptionEnum("nodeReimageOption", "body", m.NodeReimageOption); err != nil {
		return err
	}

	return nil
}
