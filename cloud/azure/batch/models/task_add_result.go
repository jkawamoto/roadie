package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TaskAddResult Result for a single task added as part of an add task collection operation.
// swagger:model TaskAddResult
type TaskAddResult struct {

	// The ETag of the task, if the task was successfully added.
	ETag string `json:"eTag,omitempty"`

	// The error encountered while attempting to add the task.
	Error *BatchError `json:"error,omitempty"`

	// The last modified time of the task.
	LastModified strfmt.DateTime `json:"lastModified,omitempty"`

	// The URL of the task, if the task was successfully added.
	Location string `json:"location,omitempty"`

	// The status of the add task request.
	// Required: true
	Status *string `json:"status"`

	// The ID of the task for which this is the result.
	// Required: true
	TaskID *string `json:"taskId"`
}

// Validate validates this task add result
func (m *TaskAddResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskAddResult) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {

		if err := m.Error.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var taskAddResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","clienterror","servererror","unmapped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskAddResultTypeStatusPropEnum = append(taskAddResultTypeStatusPropEnum, v)
	}
}

const (
	// TaskAddResultStatusSuccess captures enum value "success"
	TaskAddResultStatusSuccess string = "success"
	// TaskAddResultStatusClienterror captures enum value "clienterror"
	TaskAddResultStatusClienterror string = "clienterror"
	// TaskAddResultStatusServererror captures enum value "servererror"
	TaskAddResultStatusServererror string = "servererror"
	// TaskAddResultStatusUnmapped captures enum value "unmapped"
	TaskAddResultStatusUnmapped string = "unmapped"
)

// prop value enum
func (m *TaskAddResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskAddResultTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskAddResult) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *TaskAddResult) validateTaskID(formats strfmt.Registry) error {

	if err := validate.Required("taskId", "body", m.TaskID); err != nil {
		return err
	}

	return nil
}
