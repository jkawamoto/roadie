package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Certificate A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine.
// swagger:model Certificate
type Certificate struct {

	// The error that occurred on the last attempt to delete this certificate.
	//
	// This property is set only if the certificate is in the DeleteFailed state.
	DeleteCertificateError *DeleteCertificateError `json:"deleteCertificateError,omitempty"`

	// The previous state of the certificate.
	//
	// This property is not set if the certificate is in its initial Active state.
	PreviousState string `json:"previousState,omitempty"`

	// The time at which the certificate entered its previous state.
	//
	// This property is not set if the certificate is in its initial Active state.
	PreviousStateTransitionTime strfmt.DateTime `json:"previousStateTransitionTime,omitempty"`

	// The public part of the certificate as a base-64 encoded .cer file.
	PublicData string `json:"publicData,omitempty"`

	// The current state of the certificate.
	State string `json:"state,omitempty"`

	// The time at which the certificate entered its current state.
	StateTransitionTime strfmt.DateTime `json:"stateTransitionTime,omitempty"`

	// The X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits.
	Thumbprint string `json:"thumbprint,omitempty"`

	// The algorithm used to derive the thumbprint.
	ThumbprintAlgorithm string `json:"thumbprintAlgorithm,omitempty"`

	// The URL of the certificate.
	URL string `json:"url,omitempty"`
}

// Validate validates this certificate
func (m *Certificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeleteCertificateError(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePreviousState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Certificate) validateDeleteCertificateError(formats strfmt.Registry) error {

	if swag.IsZero(m.DeleteCertificateError) { // not required
		return nil
	}

	if m.DeleteCertificateError != nil {

		if err := m.DeleteCertificateError.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var certificateTypePreviousStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","deleting","deletefailed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		certificateTypePreviousStatePropEnum = append(certificateTypePreviousStatePropEnum, v)
	}
}

const (
	// CertificatePreviousStateActive captures enum value "active"
	CertificatePreviousStateActive string = "active"
	// CertificatePreviousStateDeleting captures enum value "deleting"
	CertificatePreviousStateDeleting string = "deleting"
	// CertificatePreviousStateDeletefailed captures enum value "deletefailed"
	CertificatePreviousStateDeletefailed string = "deletefailed"
)

// prop value enum
func (m *Certificate) validatePreviousStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, certificateTypePreviousStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Certificate) validatePreviousState(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousState) { // not required
		return nil
	}

	// value enum
	if err := m.validatePreviousStateEnum("previousState", "body", m.PreviousState); err != nil {
		return err
	}

	return nil
}

var certificateTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","deleting","deletefailed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		certificateTypeStatePropEnum = append(certificateTypeStatePropEnum, v)
	}
}

const (
	// CertificateStateActive captures enum value "active"
	CertificateStateActive string = "active"
	// CertificateStateDeleting captures enum value "deleting"
	CertificateStateDeleting string = "deleting"
	// CertificateStateDeletefailed captures enum value "deletefailed"
	CertificateStateDeletefailed string = "deletefailed"
)

// prop value enum
func (m *Certificate) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, certificateTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Certificate) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}
