package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TaskExecutionInformation Information about the execution of a task.
// swagger:model TaskExecutionInformation
type TaskExecutionInformation struct {

	// The time at which the task completed.
	//
	// This property is set only if the task is in the Completed state.
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// The exit code of the program specified on the task command line.
	//
	// This property is set only if the task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
	ExitCode int32 `json:"exitCode,omitempty"`

	// The most recent time at which the task has been requeued by the Batch service as the result of a user request.
	//
	// This property is set only if the requeueCount is nonzero.
	LastRequeueTime strfmt.DateTime `json:"lastRequeueTime,omitempty"`

	// The most recent time at which a retry of the task started running.
	//
	// This element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.
	LastRetryTime strfmt.DateTime `json:"lastRetryTime,omitempty"`

	// The number of times the task has been requeued by the Batch service as the result of a user request.
	//
	// When the user removes nodes from a pool (by resizing/shrinking the pool) or when the job is being disabled, the user can specify that running tasks on the nodes be requeued for execution. This count tracks how many times the task has been requeued for these reasons.
	// Required: true
	RequeueCount *int32 `json:"requeueCount"`

	// The number of times the task has been retried by the Batch service.
	//
	// The task is retried if it exits with a nonzero exit code, up to the specified maxTaskRetryCount.
	// Required: true
	RetryCount *int32 `json:"retryCount"`

	// Details of any error encountered scheduling the task.
	//
	// This property is set only if the task is in the completed state.
	SchedulingError *TaskSchedulingError `json:"schedulingError,omitempty"`

	// The time at which the task started running.
	//
	// 'Running' corresponds to the running state, so if the task specifies resource files or application packages, then the start time reflects the time at which the task started downloading or deploying these. If the task has been restarted or retried, this is the most recent time at which the task started running. This property is present only for tasks that are in the running or completed state.
	StartTime strfmt.DateTime `json:"startTime,omitempty"`
}

// Validate validates this task execution information
func (m *TaskExecutionInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRequeueCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRetryCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSchedulingError(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskExecutionInformation) validateRequeueCount(formats strfmt.Registry) error {

	if err := validate.Required("requeueCount", "body", m.RequeueCount); err != nil {
		return err
	}

	return nil
}

func (m *TaskExecutionInformation) validateRetryCount(formats strfmt.Registry) error {

	if err := validate.Required("retryCount", "body", m.RetryCount); err != nil {
		return err
	}

	return nil
}

func (m *TaskExecutionInformation) validateSchedulingError(formats strfmt.Registry) error {

	if swag.IsZero(m.SchedulingError) { // not required
		return nil
	}

	if m.SchedulingError != nil {

		if err := m.SchedulingError.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
