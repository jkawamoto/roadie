package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PoolResizeParameter Options for changing the size of a pool.
// swagger:model PoolResizeParameter
type PoolResizeParameter struct {

	// When nodes may be removed from the pool, if the pool size is decreasing.
	//
	// The default value is requeue.
	NodeDeallocationOption string `json:"nodeDeallocationOption,omitempty"`

	// The timeout for allocation of compute nodes to the pool or removal of compute nodes from the pool.
	//
	// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
	ResizeTimeout strfmt.Duration `json:"resizeTimeout,omitempty"`

	// The desired number of compute nodes in the pool.
	// Required: true
	TargetDedicated *int32 `json:"targetDedicated"`
}

// Validate validates this pool resize parameter
func (m *PoolResizeParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeDeallocationOption(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTargetDedicated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var poolResizeParameterTypeNodeDeallocationOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["requeue","terminate","taskcompletion","retaineddata"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		poolResizeParameterTypeNodeDeallocationOptionPropEnum = append(poolResizeParameterTypeNodeDeallocationOptionPropEnum, v)
	}
}

const (
	// PoolResizeParameterNodeDeallocationOptionRequeue captures enum value "requeue"
	PoolResizeParameterNodeDeallocationOptionRequeue string = "requeue"
	// PoolResizeParameterNodeDeallocationOptionTerminate captures enum value "terminate"
	PoolResizeParameterNodeDeallocationOptionTerminate string = "terminate"
	// PoolResizeParameterNodeDeallocationOptionTaskcompletion captures enum value "taskcompletion"
	PoolResizeParameterNodeDeallocationOptionTaskcompletion string = "taskcompletion"
	// PoolResizeParameterNodeDeallocationOptionRetaineddata captures enum value "retaineddata"
	PoolResizeParameterNodeDeallocationOptionRetaineddata string = "retaineddata"
)

// prop value enum
func (m *PoolResizeParameter) validateNodeDeallocationOptionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, poolResizeParameterTypeNodeDeallocationOptionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PoolResizeParameter) validateNodeDeallocationOption(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeDeallocationOption) { // not required
		return nil
	}

	// value enum
	if err := m.validateNodeDeallocationOptionEnum("nodeDeallocationOption", "body", m.NodeDeallocationOption); err != nil {
		return err
	}

	return nil
}

func (m *PoolResizeParameter) validateTargetDedicated(formats strfmt.Registry) error {

	if err := validate.Required("targetDedicated", "body", m.TargetDedicated); err != nil {
		return err
	}

	return nil
}
