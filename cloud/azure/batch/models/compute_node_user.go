package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ComputeNodeUser An user account on a compute node.
// swagger:model ComputeNodeUser
type ComputeNodeUser struct {

	// The time at which the account should expire.
	//
	// If omitted, the default is 1 day from the current time. For Linux compute nodes, the expiryTime has a precision up to a day.
	ExpiryTime strfmt.DateTime `json:"expiryTime,omitempty"`

	// Whether the account should be an administrator on the compute node.
	//
	// The default value is false.
	IsAdmin bool `json:"isAdmin,omitempty"`

	// The user name of the account.
	// Required: true
	Name *string `json:"name"`

	// The password of the account.
	//
	// The password is required for Windows nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows image reference). For Linux compute nodes, the password can optionally be specified along with the sshPublicKey property.
	Password string `json:"password,omitempty"`

	// The SSH public key that can be used for remote login to the compute node.
	//
	// The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux nodes. If this is specified for a Windows node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
	SSHPublicKey string `json:"sshPublicKey,omitempty"`
}

// Validate validates this compute node user
func (m *ComputeNodeUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputeNodeUser) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}
