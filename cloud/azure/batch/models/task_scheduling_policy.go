package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TaskSchedulingPolicy Specifies how tasks should be distributed across compute nodes.
// swagger:model TaskSchedulingPolicy
type TaskSchedulingPolicy struct {

	// How tasks should be distributed across compute nodes
	// Required: true
	NodeFillType *string `json:"nodeFillType"`
}

// Validate validates this task scheduling policy
func (m *TaskSchedulingPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeFillType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskSchedulingPolicyTypeNodeFillTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["spread","pack","unmapped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskSchedulingPolicyTypeNodeFillTypePropEnum = append(taskSchedulingPolicyTypeNodeFillTypePropEnum, v)
	}
}

const (
	// TaskSchedulingPolicyNodeFillTypeSpread captures enum value "spread"
	TaskSchedulingPolicyNodeFillTypeSpread string = "spread"
	// TaskSchedulingPolicyNodeFillTypePack captures enum value "pack"
	TaskSchedulingPolicyNodeFillTypePack string = "pack"
	// TaskSchedulingPolicyNodeFillTypeUnmapped captures enum value "unmapped"
	TaskSchedulingPolicyNodeFillTypeUnmapped string = "unmapped"
)

// prop value enum
func (m *TaskSchedulingPolicy) validateNodeFillTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskSchedulingPolicyTypeNodeFillTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskSchedulingPolicy) validateNodeFillType(formats strfmt.Registry) error {

	if err := validate.Required("nodeFillType", "body", m.NodeFillType); err != nil {
		return err
	}

	// value enum
	if err := m.validateNodeFillTypeEnum("nodeFillType", "body", *m.NodeFillType); err != nil {
		return err
	}

	return nil
}
