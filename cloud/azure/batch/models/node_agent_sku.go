package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// NodeAgentSku A node agent SKU supported by the Batch service.
//
// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems.
// swagger:model NodeAgentSku
type NodeAgentSku struct {

	// The ID of the node agent SKU.
	ID string `json:"id,omitempty"`

	// The type of operating system (e.g. Windows or Linux) compatible with the node agent SKU.
	OsType string `json:"osType,omitempty"`

	// The list of images verified to be compatible with this node agent SKU.
	//
	// This collection is not exhaustive (the node agent may be compatible with other images).
	VerifiedImageReferences []*ImageReference `json:"verifiedImageReferences"`
}

// Validate validates this node agent sku
func (m *NodeAgentSku) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOsType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVerifiedImageReferences(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nodeAgentSkuTypeOsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["linux","windows","unmapped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeAgentSkuTypeOsTypePropEnum = append(nodeAgentSkuTypeOsTypePropEnum, v)
	}
}

const (
	// NodeAgentSkuOsTypeLinux captures enum value "linux"
	NodeAgentSkuOsTypeLinux string = "linux"
	// NodeAgentSkuOsTypeWindows captures enum value "windows"
	NodeAgentSkuOsTypeWindows string = "windows"
	// NodeAgentSkuOsTypeUnmapped captures enum value "unmapped"
	NodeAgentSkuOsTypeUnmapped string = "unmapped"
)

// prop value enum
func (m *NodeAgentSku) validateOsTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nodeAgentSkuTypeOsTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NodeAgentSku) validateOsType(formats strfmt.Registry) error {

	if swag.IsZero(m.OsType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsTypeEnum("osType", "body", m.OsType); err != nil {
		return err
	}

	return nil
}

func (m *NodeAgentSku) validateVerifiedImageReferences(formats strfmt.Registry) error {

	if swag.IsZero(m.VerifiedImageReferences) { // not required
		return nil
	}

	for i := 0; i < len(m.VerifiedImageReferences); i++ {

		if swag.IsZero(m.VerifiedImageReferences[i]) { // not required
			continue
		}

		if m.VerifiedImageReferences[i] != nil {

			if err := m.VerifiedImageReferences[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
