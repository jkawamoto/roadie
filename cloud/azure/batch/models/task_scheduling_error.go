package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TaskSchedulingError Information about an error when scheduling a task.
// swagger:model TaskSchedulingError
type TaskSchedulingError struct {

	// The category of the task scheduling error.
	// Required: true
	Category *string `json:"category"`

	// An identifier for the task scheduling error. Codes are invariant and are intended to be consumed programmatically.
	Code string `json:"code,omitempty"`

	// The list of additional error details related to the scheduling error.
	Details []*NameValuePair `json:"details"`

	// A message describing the task scheduling error, intended to be suitable for display in a user interface.
	Message string `json:"message,omitempty"`
}

// Validate validates this task scheduling error
func (m *TaskSchedulingError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskSchedulingErrorTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["usererror","servererror","unmapped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskSchedulingErrorTypeCategoryPropEnum = append(taskSchedulingErrorTypeCategoryPropEnum, v)
	}
}

const (
	// TaskSchedulingErrorCategoryUsererror captures enum value "usererror"
	TaskSchedulingErrorCategoryUsererror string = "usererror"
	// TaskSchedulingErrorCategoryServererror captures enum value "servererror"
	TaskSchedulingErrorCategoryServererror string = "servererror"
	// TaskSchedulingErrorCategoryUnmapped captures enum value "unmapped"
	TaskSchedulingErrorCategoryUnmapped string = "unmapped"
)

// prop value enum
func (m *TaskSchedulingError) validateCategoryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskSchedulingErrorTypeCategoryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskSchedulingError) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", *m.Category); err != nil {
		return err
	}

	return nil
}

func (m *TaskSchedulingError) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	for i := 0; i < len(m.Details); i++ {

		if swag.IsZero(m.Details[i]) { // not required
			continue
		}

		if m.Details[i] != nil {

			if err := m.Details[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
