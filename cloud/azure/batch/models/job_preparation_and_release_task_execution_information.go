package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// JobPreparationAndReleaseTaskExecutionInformation The status of the Job Preparation and Job Release tasks on a compute node.
// swagger:model JobPreparationAndReleaseTaskExecutionInformation
type JobPreparationAndReleaseTaskExecutionInformation struct {

	// Information about the execution status of the Job Preparation task on this compute node.
	JobPreparationTaskExecutionInfo *JobPreparationTaskExecutionInformation `json:"jobPreparationTaskExecutionInfo,omitempty"`

	// Information about the execution status of the Job Release task on this compute node.
	//
	// This property is set only if the Job Release task has run on the node.
	JobReleaseTaskExecutionInfo *JobReleaseTaskExecutionInformation `json:"jobReleaseTaskExecutionInfo,omitempty"`

	// The ID of the compute node to which this entry refers.
	NodeID string `json:"nodeId,omitempty"`

	// The URL of the compute node to which this entry refers.
	NodeURL string `json:"nodeUrl,omitempty"`

	// The ID of the pool containing the compute node to which this entry refers.
	PoolID string `json:"poolId,omitempty"`
}

// Validate validates this job preparation and release task execution information
func (m *JobPreparationAndReleaseTaskExecutionInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobPreparationTaskExecutionInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateJobReleaseTaskExecutionInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobPreparationAndReleaseTaskExecutionInformation) validateJobPreparationTaskExecutionInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.JobPreparationTaskExecutionInfo) { // not required
		return nil
	}

	if m.JobPreparationTaskExecutionInfo != nil {

		if err := m.JobPreparationTaskExecutionInfo.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *JobPreparationAndReleaseTaskExecutionInformation) validateJobReleaseTaskExecutionInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.JobReleaseTaskExecutionInfo) { // not required
		return nil
	}

	if m.JobReleaseTaskExecutionInfo != nil {

		if err := m.JobReleaseTaskExecutionInfo.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
