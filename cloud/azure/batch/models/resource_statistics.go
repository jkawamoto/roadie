package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ResourceStatistics Statistics related to resource consumption by compute nodes in a pool.
// swagger:model ResourceStatistics
type ResourceStatistics struct {

	// The average CPU usage across all nodes in the pool (percentage per node).
	// Required: true
	AvgCPUPercentage *float64 `json:"avgCPUPercentage"`

	// The average used disk space in GiB across all nodes in the pool.
	// Required: true
	AvgDiskGiB *float64 `json:"avgDiskGiB"`

	// The average memory usage in GiB across all nodes in the pool.
	// Required: true
	AvgMemoryGiB *float64 `json:"avgMemoryGiB"`

	// The total amount of data in GiB of disk reads across all nodes in the pool.
	// Required: true
	DiskReadGiB *float64 `json:"diskReadGiB"`

	// The total number of disk read operations across all nodes in the pool.
	// Required: true
	DiskReadIOps *int64 `json:"diskReadIOps"`

	// The total amount of data in GiB of disk writes across all nodes in the pool.
	// Required: true
	DiskWriteGiB *float64 `json:"diskWriteGiB"`

	// The total number of disk write operations across all nodes in the pool.
	// Required: true
	DiskWriteIOps *int64 `json:"diskWriteIOps"`

	// The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
	// Required: true
	LastUpdateTime *strfmt.DateTime `json:"lastUpdateTime"`

	// The total amount of data in GiB of network reads across all nodes in the pool.
	// Required: true
	NetworkReadGiB *float64 `json:"networkReadGiB"`

	// The total amount of data in GiB of network writes across all nodes in the pool.
	// Required: true
	NetworkWriteGiB *float64 `json:"networkWriteGiB"`

	// The peak used disk space in GiB across all nodes in the pool.
	// Required: true
	PeakDiskGiB *float64 `json:"peakDiskGiB"`

	// The peak memory usage in GiB across all nodes in the pool.
	// Required: true
	PeakMemoryGiB *float64 `json:"peakMemoryGiB"`

	// The start time of the time range covered by the statistics.
	// Required: true
	StartTime *strfmt.DateTime `json:"startTime"`
}

// Validate validates this resource statistics
func (m *ResourceStatistics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvgCPUPercentage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAvgDiskGiB(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAvgMemoryGiB(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDiskReadGiB(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDiskReadIOps(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDiskWriteGiB(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDiskWriteIOps(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastUpdateTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkReadGiB(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkWriteGiB(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeakDiskGiB(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeakMemoryGiB(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceStatistics) validateAvgCPUPercentage(formats strfmt.Registry) error {

	if err := validate.Required("avgCPUPercentage", "body", m.AvgCPUPercentage); err != nil {
		return err
	}

	return nil
}

func (m *ResourceStatistics) validateAvgDiskGiB(formats strfmt.Registry) error {

	if err := validate.Required("avgDiskGiB", "body", m.AvgDiskGiB); err != nil {
		return err
	}

	return nil
}

func (m *ResourceStatistics) validateAvgMemoryGiB(formats strfmt.Registry) error {

	if err := validate.Required("avgMemoryGiB", "body", m.AvgMemoryGiB); err != nil {
		return err
	}

	return nil
}

func (m *ResourceStatistics) validateDiskReadGiB(formats strfmt.Registry) error {

	if err := validate.Required("diskReadGiB", "body", m.DiskReadGiB); err != nil {
		return err
	}

	return nil
}

func (m *ResourceStatistics) validateDiskReadIOps(formats strfmt.Registry) error {

	if err := validate.Required("diskReadIOps", "body", m.DiskReadIOps); err != nil {
		return err
	}

	return nil
}

func (m *ResourceStatistics) validateDiskWriteGiB(formats strfmt.Registry) error {

	if err := validate.Required("diskWriteGiB", "body", m.DiskWriteGiB); err != nil {
		return err
	}

	return nil
}

func (m *ResourceStatistics) validateDiskWriteIOps(formats strfmt.Registry) error {

	if err := validate.Required("diskWriteIOps", "body", m.DiskWriteIOps); err != nil {
		return err
	}

	return nil
}

func (m *ResourceStatistics) validateLastUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("lastUpdateTime", "body", m.LastUpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *ResourceStatistics) validateNetworkReadGiB(formats strfmt.Registry) error {

	if err := validate.Required("networkReadGiB", "body", m.NetworkReadGiB); err != nil {
		return err
	}

	return nil
}

func (m *ResourceStatistics) validateNetworkWriteGiB(formats strfmt.Registry) error {

	if err := validate.Required("networkWriteGiB", "body", m.NetworkWriteGiB); err != nil {
		return err
	}

	return nil
}

func (m *ResourceStatistics) validatePeakDiskGiB(formats strfmt.Registry) error {

	if err := validate.Required("peakDiskGiB", "body", m.PeakDiskGiB); err != nil {
		return err
	}

	return nil
}

func (m *ResourceStatistics) validatePeakMemoryGiB(formats strfmt.Registry) error {

	if err := validate.Required("peakMemoryGiB", "body", m.PeakMemoryGiB); err != nil {
		return err
	}

	return nil
}

func (m *ResourceStatistics) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}
