package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// AutoPoolSpecification Specifies characteristics for a temporary 'auto pool'. The Batch service will create this auto pool when the job is submitted.
// swagger:model AutoPoolSpecification
type AutoPoolSpecification struct {

	// A prefix to be added to the unique identifier when a pool is automatically created.
	//
	// The Batch service assigns each auto pool a unique identifier on creation. To distinguish between pools created for different purposes, you can specify this element to add a prefix to the id that is assigned. The prefix can be up to 20 characters long.
	AutoPoolIDPrefix string `json:"autoPoolIdPrefix,omitempty"`

	// Whether to keep an auto pool alive after its lifetime expires.
	//
	// If false, the Batch service deletes the pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the job or job schedule completes. If true, the Batch service does not delete the pool automatically. It is up to the user to delete auto pools created with this option.
	KeepAlive bool `json:"keepAlive,omitempty"`

	// The pool specification for the auto pool.
	Pool *PoolSpecification `json:"pool,omitempty"`

	// The minimum lifetime of created auto pools, and how multiple jobs on a schedule are assigned to pools.
	//
	// When the pool lifetime scope is jobschedule level, the Batch service keeps track of the last autopool created for the jobschedule, and deletes that pool when the jobschedule completes. Batch will also delete this pool if the user updates the auto pool specification in a way that changes this lifetime.
	// Required: true
	PoolLifetimeOption *string `json:"poolLifetimeOption"`
}

// Validate validates this auto pool specification
func (m *AutoPoolSpecification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePool(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePoolLifetimeOption(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoPoolSpecification) validatePool(formats strfmt.Registry) error {

	if swag.IsZero(m.Pool) { // not required
		return nil
	}

	if m.Pool != nil {

		if err := m.Pool.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var autoPoolSpecificationTypePoolLifetimeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["jobschedule","job","unmapped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		autoPoolSpecificationTypePoolLifetimeOptionPropEnum = append(autoPoolSpecificationTypePoolLifetimeOptionPropEnum, v)
	}
}

const (
	// AutoPoolSpecificationPoolLifetimeOptionJobschedule captures enum value "jobschedule"
	AutoPoolSpecificationPoolLifetimeOptionJobschedule string = "jobschedule"
	// AutoPoolSpecificationPoolLifetimeOptionJob captures enum value "job"
	AutoPoolSpecificationPoolLifetimeOptionJob string = "job"
	// AutoPoolSpecificationPoolLifetimeOptionUnmapped captures enum value "unmapped"
	AutoPoolSpecificationPoolLifetimeOptionUnmapped string = "unmapped"
)

// prop value enum
func (m *AutoPoolSpecification) validatePoolLifetimeOptionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, autoPoolSpecificationTypePoolLifetimeOptionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AutoPoolSpecification) validatePoolLifetimeOption(formats strfmt.Registry) error {

	if err := validate.Required("poolLifetimeOption", "body", m.PoolLifetimeOption); err != nil {
		return err
	}

	// value enum
	if err := m.validatePoolLifetimeOptionEnum("poolLifetimeOption", "body", *m.PoolLifetimeOption); err != nil {
		return err
	}

	return nil
}
