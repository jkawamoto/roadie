package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// PoolInformation Specifies how a job should be assigned to a pool.
// swagger:model PoolInformation
type PoolInformation struct {

	// Characteristics for a temporary 'auto pool'. The Batch service will create this auto pool when the job is submitted.
	//
	// If auto pool creation fails, the Batch service moves the job to a completed state, and the pool creation error is set in the job's scheduling error property. The Batch service manages the lifetime (both creation and, unless keepAlive is specified, deletion) of the auto pool. Any user actions that affect the lifetime of the auto pool while the job is active will result in unexpected behavior. You must specify either the pool ID or the auto pool specification, but not both.
	AutoPoolSpecification *AutoPoolSpecification `json:"autoPoolSpecification,omitempty"`

	// The ID of an existing pool. All the tasks of the job will run on the specified pool.
	//
	// You must ensure that the pool referenced by this property exists. If the pool does not exist at the time the Batch service tries to schedule a job, no tasks for the job will run until you create a pool with that id. Note that the Batch service will not reject the job request; it will simply not run tasks until the pool exists. You must specify either the pool ID or the auto pool specification, but not both.
	PoolID string `json:"poolId,omitempty"`
}

// Validate validates this pool information
func (m *PoolInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoPoolSpecification(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PoolInformation) validateAutoPoolSpecification(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoPoolSpecification) { // not required
		return nil
	}

	if m.AutoPoolSpecification != nil {

		if err := m.AutoPoolSpecification.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
