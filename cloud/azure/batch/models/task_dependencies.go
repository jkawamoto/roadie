package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// TaskDependencies Specifies any dependencies of a task. Any task that is explicitly specified or within a dependency range must complete before the dependant task will be scheduled.
// swagger:model TaskDependencies
type TaskDependencies struct {

	// The list of task ID ranges that this task depends on. All tasks in all ranges must complete successfully before the dependent task can be scheduled.
	TaskIDRanges []*TaskIDRange `json:"taskIdRanges"`

	// The list of task IDs that this task depends on. All tasks in this list must complete successfully before the dependent task can be scheduled.
	TaskIds []string `json:"taskIds"`
}

// Validate validates this task dependencies
func (m *TaskDependencies) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTaskIDRanges(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskDependencies) validateTaskIDRanges(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskIDRanges) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskIDRanges); i++ {

		if swag.IsZero(m.TaskIDRanges[i]) { // not required
			continue
		}

		if m.TaskIDRanges[i] != nil {

			if err := m.TaskIDRanges[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *TaskDependencies) validateTaskIds(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskIds) { // not required
		return nil
	}

	return nil
}
