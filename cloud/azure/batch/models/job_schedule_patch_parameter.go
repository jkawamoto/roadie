package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// JobSchedulePatchParameter The set of changes to be made to a job schedule.
// swagger:model JobSchedulePatchParameter
type JobSchedulePatchParameter struct {

	// The details of the jobs to be created on this schedule.
	//
	// Updates affect only jobs that are started after the update has taken place. Any currently active job continues with the older specification.
	JobSpecification *JobSpecification `json:"jobSpecification,omitempty"`

	// A list of name-value pairs associated with the job schedule as metadata.
	//
	// If you do not specify this element, existing metadata is left unchanged.
	Metadata []*MetadataItem `json:"metadata"`

	// The schedule according to which jobs will be created.
	//
	// If you do not specify this element, the existing schedule is left unchanged.
	Schedule *Schedule `json:"schedule,omitempty"`
}

// Validate validates this job schedule patch parameter
func (m *JobSchedulePatchParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobSpecification(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobSchedulePatchParameter) validateJobSpecification(formats strfmt.Registry) error {

	if swag.IsZero(m.JobSpecification) { // not required
		return nil
	}

	if m.JobSpecification != nil {

		if err := m.JobSpecification.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *JobSchedulePatchParameter) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	for i := 0; i < len(m.Metadata); i++ {

		if swag.IsZero(m.Metadata[i]) { // not required
			continue
		}

		if m.Metadata[i] != nil {

			if err := m.Metadata[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *JobSchedulePatchParameter) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {

		if err := m.Schedule.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
