package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// NodeRemoveParameter Options for removing compute nodes from a pool.
// swagger:model NodeRemoveParameter
type NodeRemoveParameter struct {

	// When to remove compute nodes and what to do with currently running tasks.
	//
	// The default value is requeue.
	NodeDeallocationOption string `json:"nodeDeallocationOption,omitempty"`

	// A list containing the ids of the compute nodes to be removed from the specified pool.
	// Required: true
	// Max Items: 100
	NodeList []string `json:"nodeList"`

	// The timeout for removal of compute nodes to the pool.
	//
	// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
	ResizeTimeout strfmt.Duration `json:"resizeTimeout,omitempty"`
}

// Validate validates this node remove parameter
func (m *NodeRemoveParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeDeallocationOption(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNodeList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nodeRemoveParameterTypeNodeDeallocationOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["requeue","terminate","taskcompletion","retaineddata"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeRemoveParameterTypeNodeDeallocationOptionPropEnum = append(nodeRemoveParameterTypeNodeDeallocationOptionPropEnum, v)
	}
}

const (
	// NodeRemoveParameterNodeDeallocationOptionRequeue captures enum value "requeue"
	NodeRemoveParameterNodeDeallocationOptionRequeue string = "requeue"
	// NodeRemoveParameterNodeDeallocationOptionTerminate captures enum value "terminate"
	NodeRemoveParameterNodeDeallocationOptionTerminate string = "terminate"
	// NodeRemoveParameterNodeDeallocationOptionTaskcompletion captures enum value "taskcompletion"
	NodeRemoveParameterNodeDeallocationOptionTaskcompletion string = "taskcompletion"
	// NodeRemoveParameterNodeDeallocationOptionRetaineddata captures enum value "retaineddata"
	NodeRemoveParameterNodeDeallocationOptionRetaineddata string = "retaineddata"
)

// prop value enum
func (m *NodeRemoveParameter) validateNodeDeallocationOptionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nodeRemoveParameterTypeNodeDeallocationOptionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NodeRemoveParameter) validateNodeDeallocationOption(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeDeallocationOption) { // not required
		return nil
	}

	// value enum
	if err := m.validateNodeDeallocationOptionEnum("nodeDeallocationOption", "body", m.NodeDeallocationOption); err != nil {
		return err
	}

	return nil
}

func (m *NodeRemoveParameter) validateNodeList(formats strfmt.Registry) error {

	if err := validate.Required("nodeList", "body", m.NodeList); err != nil {
		return err
	}

	iNodeListSize := int64(len(m.NodeList))

	if err := validate.MaxItems("nodeList", "body", iNodeListSize, 100); err != nil {
		return err
	}

	return nil
}
