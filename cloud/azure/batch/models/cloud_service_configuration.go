package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// CloudServiceConfiguration The configuration for nodes in a pool based on the Azure Cloud Services platform.
// swagger:model CloudServiceConfiguration
type CloudServiceConfiguration struct {

	// The Azure Guest OS Version currently installed on the virtual machines in the pool.
	//
	// This may differ from targetOSVersion if the pool state is Upgrading. In this case some virtual machines may be on the targetOSVersion and some may be on the currentOSVersion during the upgrade process. Once all virtual machines have upgraded, currentOSVersion is updated to be the same as targetOSVersion.
	CurrentOSVersion string `json:"currentOSVersion,omitempty"`

	// The Azure Guest OS family to be installed on the virtual machines in the pool.
	//
	// Possible values are: 2 – OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 – OS Family 3, equivalent to Windows Server 2012. 4 – OS Family 4, equivalent to Windows Server 2012 R2. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
	// Required: true
	OsFamily *string `json:"osFamily"`

	// The Azure Guest OS version to be installed on the virtual machines in the pool.
	//
	// The default value is * which specifies the latest operating system version for the specified OS family.
	TargetOSVersion string `json:"targetOSVersion,omitempty"`
}

// Validate validates this cloud service configuration
func (m *CloudServiceConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOsFamily(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudServiceConfiguration) validateOsFamily(formats strfmt.Registry) error {

	if err := validate.Required("osFamily", "body", m.OsFamily); err != nil {
		return err
	}

	return nil
}
