package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// StartTask A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.
// swagger:model StartTask
type StartTask struct {

	// The command line of the start task.
	//
	// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
	// Required: true
	CommandLine *string `json:"commandLine"`

	// A list of environment variable settings for the start task.
	EnvironmentSettings []*EnvironmentSetting `json:"environmentSettings"`

	// The maximum number of times the task may be retried.
	//
	// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
	MaxTaskRetryCount int32 `json:"maxTaskRetryCount,omitempty"`

	// A list of files that the Batch service will download to the compute node before running the command line.
	ResourceFiles []*ResourceFile `json:"resourceFiles"`

	// Whether to run the start task in elevated mode. The default value is false.
	RunElevated bool `json:"runElevated,omitempty"`

	// Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node.
	//
	// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.
	WaitForSuccess bool `json:"waitForSuccess,omitempty"`
}

// Validate validates this start task
func (m *StartTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommandLine(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnvironmentSettings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourceFiles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StartTask) validateCommandLine(formats strfmt.Registry) error {

	if err := validate.Required("commandLine", "body", m.CommandLine); err != nil {
		return err
	}

	return nil
}

func (m *StartTask) validateEnvironmentSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentSettings) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvironmentSettings); i++ {

		if swag.IsZero(m.EnvironmentSettings[i]) { // not required
			continue
		}

		if m.EnvironmentSettings[i] != nil {

			if err := m.EnvironmentSettings[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *StartTask) validateResourceFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceFiles) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceFiles); i++ {

		if swag.IsZero(m.ResourceFiles[i]) { // not required
			continue
		}

		if m.ResourceFiles[i] != nil {

			if err := m.ResourceFiles[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
