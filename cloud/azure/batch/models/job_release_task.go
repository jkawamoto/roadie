package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// JobReleaseTask A Job Release task to run on job completion on any compute node where the job has run.
// swagger:model JobReleaseTask
type JobReleaseTask struct {

	// The command line of the Job Release task.
	//
	// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
	// Required: true
	CommandLine *string `json:"commandLine"`

	// A list of environment variable settings for the Job Release task.
	EnvironmentSettings []*EnvironmentSetting `json:"environmentSettings"`

	// A string that uniquely identifies the Job Release task within the job.
	//
	// The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other task in the job can have the same id as the Job Release task. If you try to submit a task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
	ID string `json:"id,omitempty"`

	// The maximum elapsed time that the Job Release task may run on a given compute node, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes. You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
	MaxWallClockTime strfmt.Duration `json:"maxWallClockTime,omitempty"`

	// A list of files that the Batch service will download to the compute node before running the command line.
	//
	// Files listed under this element are located in the task's working directory.
	ResourceFiles []*ResourceFile `json:"resourceFiles"`

	// The minimum time to retain the task directory for the Job Release task on the compute node. After this time, the Batch service may delete the task directory and all its contents.
	//
	// The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged.
	RetentionTime strfmt.Duration `json:"retentionTime,omitempty"`

	// Whether to run the Job Release task in elevated mode.
	//
	// The default value is false.
	RunElevated bool `json:"runElevated,omitempty"`
}

// Validate validates this job release task
func (m *JobReleaseTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommandLine(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnvironmentSettings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourceFiles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobReleaseTask) validateCommandLine(formats strfmt.Registry) error {

	if err := validate.Required("commandLine", "body", m.CommandLine); err != nil {
		return err
	}

	return nil
}

func (m *JobReleaseTask) validateEnvironmentSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentSettings) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvironmentSettings); i++ {

		if swag.IsZero(m.EnvironmentSettings[i]) { // not required
			continue
		}

		if m.EnvironmentSettings[i] != nil {

			if err := m.EnvironmentSettings[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *JobReleaseTask) validateResourceFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceFiles) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceFiles); i++ {

		if swag.IsZero(m.ResourceFiles[i]) { // not required
			continue
		}

		if m.ResourceFiles[i] != nil {

			if err := m.ResourceFiles[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
