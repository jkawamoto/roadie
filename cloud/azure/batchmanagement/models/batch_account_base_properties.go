package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// BatchAccountBaseProperties The properties of a Batch account.
// swagger:model BatchAccountBaseProperties
type BatchAccountBaseProperties struct {

	// The properties related to auto storage account.
	AutoStorage *AutoStorageBaseProperties `json:"autoStorage,omitempty"`

	// A reference to the Azure key vault associated with the Batch account.
	KeyVaultReference *KeyVaultReference `json:"keyVaultReference,omitempty"`

	// The allocation mode to use for creating pools in the Batch account.
	//
	// The pool allocation mode also affects how clients may authenticate to the Batch Service API. If the mode is BatchService, clients may authenticate using access keys or Azure Active Directory. If the mode is UserSubscription, clients must use Azure Active Directory. The default is BatchService.
	PoolAllocationMode PoolAllocationMode `json:"poolAllocationMode,omitempty"`
}

// Validate validates this batch account base properties
func (m *BatchAccountBaseProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoStorage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKeyVaultReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePoolAllocationMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchAccountBaseProperties) validateAutoStorage(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoStorage) { // not required
		return nil
	}

	if m.AutoStorage != nil {

		if err := m.AutoStorage.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *BatchAccountBaseProperties) validateKeyVaultReference(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyVaultReference) { // not required
		return nil
	}

	if m.KeyVaultReference != nil {

		if err := m.KeyVaultReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *BatchAccountBaseProperties) validatePoolAllocationMode(formats strfmt.Registry) error {

	if swag.IsZero(m.PoolAllocationMode) { // not required
		return nil
	}

	if err := m.PoolAllocationMode.Validate(formats); err != nil {
		return err
	}

	return nil
}
