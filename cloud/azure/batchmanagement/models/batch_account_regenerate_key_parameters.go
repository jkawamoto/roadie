package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// BatchAccountRegenerateKeyParameters Parameters supplied to the RegenerateKey operation.
// swagger:model BatchAccountRegenerateKeyParameters
type BatchAccountRegenerateKeyParameters struct {

	// The type of account key to regenerate.
	// Required: true
	KeyName *string `json:"keyName"`
}

// Validate validates this batch account regenerate key parameters
func (m *BatchAccountRegenerateKeyParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeyName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var batchAccountRegenerateKeyParametersTypeKeyNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Primary","Secondary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		batchAccountRegenerateKeyParametersTypeKeyNamePropEnum = append(batchAccountRegenerateKeyParametersTypeKeyNamePropEnum, v)
	}
}

const (
	// BatchAccountRegenerateKeyParametersKeyNamePrimary captures enum value "Primary"
	BatchAccountRegenerateKeyParametersKeyNamePrimary string = "Primary"
	// BatchAccountRegenerateKeyParametersKeyNameSecondary captures enum value "Secondary"
	BatchAccountRegenerateKeyParametersKeyNameSecondary string = "Secondary"
)

// prop value enum
func (m *BatchAccountRegenerateKeyParameters) validateKeyNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, batchAccountRegenerateKeyParametersTypeKeyNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BatchAccountRegenerateKeyParameters) validateKeyName(formats strfmt.Registry) error {

	if err := validate.Required("keyName", "body", m.KeyName); err != nil {
		return err
	}

	// value enum
	if err := m.validateKeyNameEnum("keyName", "body", *m.KeyName); err != nil {
		return err
	}

	return nil
}
