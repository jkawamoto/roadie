package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ApplicationPackage An application package which represents a particular version of an application.
// swagger:model ApplicationPackage
type ApplicationPackage struct {

	// The format of the application package, if the package is active.
	// Read Only: true
	Format string `json:"format,omitempty"`

	// The ID of the application.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The time at which the package was last activated, if the package is active.
	// Read Only: true
	LastActivationTime strfmt.DateTime `json:"lastActivationTime,omitempty"`

	// The current state of the application package.
	// Read Only: true
	State string `json:"state,omitempty"`

	// The storage URL at which the application package is stored.
	// Read Only: true
	StorageURL string `json:"storageUrl,omitempty"`

	// The UTC time at which the storage URL will expire.
	// Read Only: true
	StorageURLExpiry strfmt.DateTime `json:"storageUrlExpiry,omitempty"`

	// The version of the application package.
	// Read Only: true
	Version string `json:"version,omitempty"`
}

// Validate validates this application package
func (m *ApplicationPackage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var applicationPackageTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","active","unmapped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationPackageTypeStatePropEnum = append(applicationPackageTypeStatePropEnum, v)
	}
}

const (
	// ApplicationPackageStatePending captures enum value "pending"
	ApplicationPackageStatePending string = "pending"
	// ApplicationPackageStateActive captures enum value "active"
	ApplicationPackageStateActive string = "active"
	// ApplicationPackageStateUnmapped captures enum value "unmapped"
	ApplicationPackageStateUnmapped string = "unmapped"
)

// prop value enum
func (m *ApplicationPackage) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, applicationPackageTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationPackage) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}
