package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// Application Contains information about an application in a Batch account.
// swagger:model Application
type Application struct {

	// A value indicating whether packages within the application may be overwritten using the same version string.
	AllowUpdates bool `json:"allowUpdates,omitempty"`

	// The package to use if a client requests the application but does not specify a version.
	DefaultVersion string `json:"defaultVersion,omitempty"`

	// The display name for the application.
	DisplayName string `json:"displayName,omitempty"`

	// A string that uniquely identifies the application within the account.
	ID string `json:"id,omitempty"`

	// The list of packages under this application.
	Packages []*ApplicationPackage `json:"packages"`
}

// Validate validates this application
func (m *Application) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Application) validatePackages(formats strfmt.Registry) error {

	if swag.IsZero(m.Packages) { // not required
		return nil
	}

	for i := 0; i < len(m.Packages); i++ {

		if swag.IsZero(m.Packages[i]) { // not required
			continue
		}

		if m.Packages[i] != nil {

			if err := m.Packages[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
