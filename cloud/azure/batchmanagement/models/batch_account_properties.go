package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// BatchAccountProperties Account specific properties.
// swagger:model BatchAccountProperties
type BatchAccountProperties struct {

	// The endpoint used by this account to interact with the Batch services.
	// Read Only: true
	AccountEndpoint string `json:"accountEndpoint,omitempty"`

	// The active job and job schedule quota for this Batch account.
	// Read Only: true
	ActiveJobAndJobScheduleQuota int32 `json:"activeJobAndJobScheduleQuota,omitempty"`

	// The properties and status of any auto storage account associated with the Batch account.
	// Read Only: true
	AutoStorage *AutoStorageProperties `json:"autoStorage,omitempty"`

	// The core quota for this Batch account.
	// Read Only: true
	CoreQuota int32 `json:"coreQuota,omitempty"`

	// A reference to the Azure key vault associated with the Batch account.
	// Read Only: true
	KeyVaultReference *KeyVaultReference `json:"keyVaultReference,omitempty"`

	// The allocation mode to use for creating pools in the Batch account.
	// Read Only: true
	PoolAllocationMode PoolAllocationMode `json:"poolAllocationMode,omitempty"`

	// The pool quota for this Batch account.
	// Read Only: true
	PoolQuota int32 `json:"poolQuota,omitempty"`

	// The provisioned state of the resource
	// Read Only: true
	ProvisioningState string `json:"provisioningState,omitempty"`
}

// Validate validates this batch account properties
func (m *BatchAccountProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoStorage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKeyVaultReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePoolAllocationMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProvisioningState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchAccountProperties) validateAutoStorage(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoStorage) { // not required
		return nil
	}

	if m.AutoStorage != nil {

		if err := m.AutoStorage.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *BatchAccountProperties) validateKeyVaultReference(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyVaultReference) { // not required
		return nil
	}

	if m.KeyVaultReference != nil {

		if err := m.KeyVaultReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *BatchAccountProperties) validatePoolAllocationMode(formats strfmt.Registry) error {

	if swag.IsZero(m.PoolAllocationMode) { // not required
		return nil
	}

	if err := m.PoolAllocationMode.Validate(formats); err != nil {
		return err
	}

	return nil
}

var batchAccountPropertiesTypeProvisioningStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Invalid","Creating","Deleting","Succeeded","Failed","Cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		batchAccountPropertiesTypeProvisioningStatePropEnum = append(batchAccountPropertiesTypeProvisioningStatePropEnum, v)
	}
}

const (
	// BatchAccountPropertiesProvisioningStateInvalid captures enum value "Invalid"
	BatchAccountPropertiesProvisioningStateInvalid string = "Invalid"
	// BatchAccountPropertiesProvisioningStateCreating captures enum value "Creating"
	BatchAccountPropertiesProvisioningStateCreating string = "Creating"
	// BatchAccountPropertiesProvisioningStateDeleting captures enum value "Deleting"
	BatchAccountPropertiesProvisioningStateDeleting string = "Deleting"
	// BatchAccountPropertiesProvisioningStateSucceeded captures enum value "Succeeded"
	BatchAccountPropertiesProvisioningStateSucceeded string = "Succeeded"
	// BatchAccountPropertiesProvisioningStateFailed captures enum value "Failed"
	BatchAccountPropertiesProvisioningStateFailed string = "Failed"
	// BatchAccountPropertiesProvisioningStateCancelled captures enum value "Cancelled"
	BatchAccountPropertiesProvisioningStateCancelled string = "Cancelled"
)

// prop value enum
func (m *BatchAccountProperties) validateProvisioningStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, batchAccountPropertiesTypeProvisioningStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BatchAccountProperties) validateProvisioningState(formats strfmt.Registry) error {

	if swag.IsZero(m.ProvisioningState) { // not required
		return nil
	}

	// value enum
	if err := m.validateProvisioningStateEnum("provisioningState", "body", m.ProvisioningState); err != nil {
		return err
	}

	return nil
}
