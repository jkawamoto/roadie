package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewApplicationListParams creates a new ApplicationListParams object
// with the default values initialized.
func NewApplicationListParams() *ApplicationListParams {
	var ()
	return &ApplicationListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewApplicationListParamsWithTimeout creates a new ApplicationListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewApplicationListParamsWithTimeout(timeout time.Duration) *ApplicationListParams {
	var ()
	return &ApplicationListParams{

		timeout: timeout,
	}
}

// NewApplicationListParamsWithContext creates a new ApplicationListParams object
// with the default values initialized, and the ability to set a context for a request
func NewApplicationListParamsWithContext(ctx context.Context) *ApplicationListParams {
	var ()
	return &ApplicationListParams{

		Context: ctx,
	}
}

/*ApplicationListParams contains all the parameters to send to the API endpoint
for the application list operation typically these are written to a http.Request
*/
type ApplicationListParams struct {

	/*AccountName
	  The name of the Batch account.

	*/
	AccountName string
	/*APIVersion
	  The API version to be used with the HTTP request.

	*/
	APIVersion string
	/*Maxresults
	  The maximum number of items to return in the response.

	*/
	Maxresults *int32
	/*ResourceGroupName
	  The name of the resource group that contains the Batch account.

	*/
	ResourceGroupName string
	/*SubscriptionID
	  A unique identifier of a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.

	*/
	SubscriptionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the application list params
func (o *ApplicationListParams) WithTimeout(timeout time.Duration) *ApplicationListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the application list params
func (o *ApplicationListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the application list params
func (o *ApplicationListParams) WithContext(ctx context.Context) *ApplicationListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the application list params
func (o *ApplicationListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithAccountName adds the accountName to the application list params
func (o *ApplicationListParams) WithAccountName(accountName string) *ApplicationListParams {
	o.SetAccountName(accountName)
	return o
}

// SetAccountName adds the accountName to the application list params
func (o *ApplicationListParams) SetAccountName(accountName string) {
	o.AccountName = accountName
}

// WithAPIVersion adds the aPIVersion to the application list params
func (o *ApplicationListParams) WithAPIVersion(aPIVersion string) *ApplicationListParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the application list params
func (o *ApplicationListParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithMaxresults adds the maxresults to the application list params
func (o *ApplicationListParams) WithMaxresults(maxresults *int32) *ApplicationListParams {
	o.SetMaxresults(maxresults)
	return o
}

// SetMaxresults adds the maxresults to the application list params
func (o *ApplicationListParams) SetMaxresults(maxresults *int32) {
	o.Maxresults = maxresults
}

// WithResourceGroupName adds the resourceGroupName to the application list params
func (o *ApplicationListParams) WithResourceGroupName(resourceGroupName string) *ApplicationListParams {
	o.SetResourceGroupName(resourceGroupName)
	return o
}

// SetResourceGroupName adds the resourceGroupName to the application list params
func (o *ApplicationListParams) SetResourceGroupName(resourceGroupName string) {
	o.ResourceGroupName = resourceGroupName
}

// WithSubscriptionID adds the subscriptionID to the application list params
func (o *ApplicationListParams) WithSubscriptionID(subscriptionID string) *ApplicationListParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the application list params
func (o *ApplicationListParams) SetSubscriptionID(subscriptionID string) {
	o.SubscriptionID = subscriptionID
}

// WriteToRequest writes these params to a swagger request
func (o *ApplicationListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param accountName
	if err := r.SetPathParam("accountName", o.AccountName); err != nil {
		return err
	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.Maxresults != nil {

		// query param maxresults
		var qrMaxresults int32
		if o.Maxresults != nil {
			qrMaxresults = *o.Maxresults
		}
		qMaxresults := swag.FormatInt32(qrMaxresults)
		if qMaxresults != "" {
			if err := r.SetQueryParam("maxresults", qMaxresults); err != nil {
				return err
			}
		}

	}

	// path param resourceGroupName
	if err := r.SetPathParam("resourceGroupName", o.ResourceGroupName); err != nil {
		return err
	}

	// path param subscriptionId
	if err := r.SetPathParam("subscriptionId", o.SubscriptionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
