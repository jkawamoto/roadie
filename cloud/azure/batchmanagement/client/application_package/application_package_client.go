package application_package

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new application package API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for application package API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ApplicationPackageActivate Activates the specified application package.
*/
func (a *Client) ApplicationPackageActivate(params *ApplicationPackageActivateParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationPackageActivateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationPackageActivateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationPackage_Activate",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationPackageActivateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ApplicationPackageActivateNoContent), nil

}

/*
ApplicationPackageCreate Creates an application package record.
*/
func (a *Client) ApplicationPackageCreate(params *ApplicationPackageCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationPackageCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationPackageCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationPackage_Create",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationPackageCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ApplicationPackageCreateCreated), nil

}

/*
ApplicationPackageDelete Deletes an application package record and its associated binary file.
*/
func (a *Client) ApplicationPackageDelete(params *ApplicationPackageDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationPackageDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationPackageDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationPackage_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationPackageDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ApplicationPackageDeleteNoContent), nil

}

/*
ApplicationPackageGet Gets information about the specified application package.
*/
func (a *Client) ApplicationPackageGet(params *ApplicationPackageGetParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationPackageGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationPackageGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationPackage_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationPackageGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ApplicationPackageGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
