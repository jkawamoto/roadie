package batch_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new batch account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for batch account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
BatchAccountCreate Creates a new Batch account with the specified parameters. Existing accounts cannot be updated with this API and should instead be updated with the Update Batch Account API.
*/
func (a *Client) BatchAccountCreate(params *BatchAccountCreateParams, authInfo runtime.ClientAuthInfoWriter) (*BatchAccountCreateOK, *BatchAccountCreateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchAccountCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BatchAccount_Create",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchAccountCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BatchAccountCreateOK:
		return value, nil, nil
	case *BatchAccountCreateAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
BatchAccountDelete Deletes the specified Batch account.
*/
func (a *Client) BatchAccountDelete(params *BatchAccountDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*BatchAccountDeleteOK, *BatchAccountDeleteAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchAccountDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BatchAccount_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchAccountDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BatchAccountDeleteOK:
		return value, nil, nil
	case *BatchAccountDeleteAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
BatchAccountGet Gets information about the specified Batch account.
*/
func (a *Client) BatchAccountGet(params *BatchAccountGetParams, authInfo runtime.ClientAuthInfoWriter) (*BatchAccountGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchAccountGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BatchAccount_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchAccountGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BatchAccountGetOK), nil

}

/*
BatchAccountGetKeys gets the account keys for the specified batch account

This operation applies only to Batch accounts created with a poolAllocationMode of 'BatchService'. If the Batch account was created with a poolAllocationMode of 'UserSubscription', clients cannot use access to keys to authenticate, and must use Azure Active Directory instead. In this case, getting the keys will fail.
*/
func (a *Client) BatchAccountGetKeys(params *BatchAccountGetKeysParams, authInfo runtime.ClientAuthInfoWriter) (*BatchAccountGetKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchAccountGetKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BatchAccount_GetKeys",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/listKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchAccountGetKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BatchAccountGetKeysOK), nil

}

/*
BatchAccountList Gets information about the Batch accounts associated with the subscription.
*/
func (a *Client) BatchAccountList(params *BatchAccountListParams, authInfo runtime.ClientAuthInfoWriter) (*BatchAccountListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchAccountListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BatchAccount_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Batch/batchAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchAccountListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BatchAccountListOK), nil

}

/*
BatchAccountListByResourceGroup Gets information about the Batch accounts associated within the specified resource group.
*/
func (a *Client) BatchAccountListByResourceGroup(params *BatchAccountListByResourceGroupParams, authInfo runtime.ClientAuthInfoWriter) (*BatchAccountListByResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchAccountListByResourceGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BatchAccount_ListByResourceGroup",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchAccountListByResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BatchAccountListByResourceGroupOK), nil

}

/*
BatchAccountRegenerateKey Regenerates the specified account key for the Batch account.
*/
func (a *Client) BatchAccountRegenerateKey(params *BatchAccountRegenerateKeyParams, authInfo runtime.ClientAuthInfoWriter) (*BatchAccountRegenerateKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchAccountRegenerateKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BatchAccount_RegenerateKey",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/regenerateKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchAccountRegenerateKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BatchAccountRegenerateKeyOK), nil

}

/*
BatchAccountSynchronizeAutoStorageKeys Synchronizes access keys for the auto storage account configured for the specified Batch account.
*/
func (a *Client) BatchAccountSynchronizeAutoStorageKeys(params *BatchAccountSynchronizeAutoStorageKeysParams, authInfo runtime.ClientAuthInfoWriter) (*BatchAccountSynchronizeAutoStorageKeysNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchAccountSynchronizeAutoStorageKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BatchAccount_SynchronizeAutoStorageKeys",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/syncAutoStorageKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchAccountSynchronizeAutoStorageKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BatchAccountSynchronizeAutoStorageKeysNoContent), nil

}

/*
BatchAccountUpdate Updates the properties of an existing Batch account.
*/
func (a *Client) BatchAccountUpdate(params *BatchAccountUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*BatchAccountUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchAccountUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BatchAccount_Update",
		Method:             "PATCH",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BatchAccountUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BatchAccountUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
