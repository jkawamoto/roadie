package batch_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewBatchAccountListParams creates a new BatchAccountListParams object
// with the default values initialized.
func NewBatchAccountListParams() *BatchAccountListParams {
	var ()
	return &BatchAccountListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewBatchAccountListParamsWithTimeout creates a new BatchAccountListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewBatchAccountListParamsWithTimeout(timeout time.Duration) *BatchAccountListParams {
	var ()
	return &BatchAccountListParams{

		timeout: timeout,
	}
}

// NewBatchAccountListParamsWithContext creates a new BatchAccountListParams object
// with the default values initialized, and the ability to set a context for a request
func NewBatchAccountListParamsWithContext(ctx context.Context) *BatchAccountListParams {
	var ()
	return &BatchAccountListParams{

		Context: ctx,
	}
}

/*BatchAccountListParams contains all the parameters to send to the API endpoint
for the batch account list operation typically these are written to a http.Request
*/
type BatchAccountListParams struct {

	/*APIVersion
	  The API version to be used with the HTTP request.

	*/
	APIVersion string
	/*SubscriptionID
	  A unique identifier of a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.

	*/
	SubscriptionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the batch account list params
func (o *BatchAccountListParams) WithTimeout(timeout time.Duration) *BatchAccountListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the batch account list params
func (o *BatchAccountListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the batch account list params
func (o *BatchAccountListParams) WithContext(ctx context.Context) *BatchAccountListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the batch account list params
func (o *BatchAccountListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithAPIVersion adds the aPIVersion to the batch account list params
func (o *BatchAccountListParams) WithAPIVersion(aPIVersion string) *BatchAccountListParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the batch account list params
func (o *BatchAccountListParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithSubscriptionID adds the subscriptionID to the batch account list params
func (o *BatchAccountListParams) WithSubscriptionID(subscriptionID string) *BatchAccountListParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the batch account list params
func (o *BatchAccountListParams) SetSubscriptionID(subscriptionID string) {
	o.SubscriptionID = subscriptionID
}

// WriteToRequest writes these params to a swagger request
func (o *BatchAccountListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param subscriptionId
	if err := r.SetPathParam("subscriptionId", o.SubscriptionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
