package batch_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jkawamoto/roadie/cloud/azure/batchmanagement/models"
)

// NewBatchAccountCreateParams creates a new BatchAccountCreateParams object
// with the default values initialized.
func NewBatchAccountCreateParams() *BatchAccountCreateParams {
	var ()
	return &BatchAccountCreateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewBatchAccountCreateParamsWithTimeout creates a new BatchAccountCreateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewBatchAccountCreateParamsWithTimeout(timeout time.Duration) *BatchAccountCreateParams {
	var ()
	return &BatchAccountCreateParams{

		timeout: timeout,
	}
}

// NewBatchAccountCreateParamsWithContext creates a new BatchAccountCreateParams object
// with the default values initialized, and the ability to set a context for a request
func NewBatchAccountCreateParamsWithContext(ctx context.Context) *BatchAccountCreateParams {
	var ()
	return &BatchAccountCreateParams{

		Context: ctx,
	}
}

/*BatchAccountCreateParams contains all the parameters to send to the API endpoint
for the batch account create operation typically these are written to a http.Request
*/
type BatchAccountCreateParams struct {

	/*AccountName
	  A name for the Batch account which must be unique within the region. Batch account names must be between 3 and 24 characters in length and must use only numbers and lowercase letters. This name is used as part of the DNS name that is used to access the Batch service in the region in which the account is created. For example: http://accountname.region.batch.azure.com/.

	*/
	AccountName string
	/*APIVersion
	  The API version to be used with the HTTP request.

	*/
	APIVersion string
	/*Parameters
	  Additional parameters for account creation.

	*/
	Parameters *models.BatchAccountCreateParameters
	/*ResourceGroupName
	  The name of the resource group that contains the new Batch account.

	*/
	ResourceGroupName string
	/*SubscriptionID
	  A unique identifier of a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.

	*/
	SubscriptionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the batch account create params
func (o *BatchAccountCreateParams) WithTimeout(timeout time.Duration) *BatchAccountCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the batch account create params
func (o *BatchAccountCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the batch account create params
func (o *BatchAccountCreateParams) WithContext(ctx context.Context) *BatchAccountCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the batch account create params
func (o *BatchAccountCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithAccountName adds the accountName to the batch account create params
func (o *BatchAccountCreateParams) WithAccountName(accountName string) *BatchAccountCreateParams {
	o.SetAccountName(accountName)
	return o
}

// SetAccountName adds the accountName to the batch account create params
func (o *BatchAccountCreateParams) SetAccountName(accountName string) {
	o.AccountName = accountName
}

// WithAPIVersion adds the aPIVersion to the batch account create params
func (o *BatchAccountCreateParams) WithAPIVersion(aPIVersion string) *BatchAccountCreateParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the batch account create params
func (o *BatchAccountCreateParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithParameters adds the parameters to the batch account create params
func (o *BatchAccountCreateParams) WithParameters(parameters *models.BatchAccountCreateParameters) *BatchAccountCreateParams {
	o.SetParameters(parameters)
	return o
}

// SetParameters adds the parameters to the batch account create params
func (o *BatchAccountCreateParams) SetParameters(parameters *models.BatchAccountCreateParameters) {
	o.Parameters = parameters
}

// WithResourceGroupName adds the resourceGroupName to the batch account create params
func (o *BatchAccountCreateParams) WithResourceGroupName(resourceGroupName string) *BatchAccountCreateParams {
	o.SetResourceGroupName(resourceGroupName)
	return o
}

// SetResourceGroupName adds the resourceGroupName to the batch account create params
func (o *BatchAccountCreateParams) SetResourceGroupName(resourceGroupName string) {
	o.ResourceGroupName = resourceGroupName
}

// WithSubscriptionID adds the subscriptionID to the batch account create params
func (o *BatchAccountCreateParams) WithSubscriptionID(subscriptionID string) *BatchAccountCreateParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the batch account create params
func (o *BatchAccountCreateParams) SetSubscriptionID(subscriptionID string) {
	o.SubscriptionID = subscriptionID
}

// WriteToRequest writes these params to a swagger request
func (o *BatchAccountCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param accountName
	if err := r.SetPathParam("accountName", o.AccountName); err != nil {
		return err
	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.Parameters == nil {
		o.Parameters = new(models.BatchAccountCreateParameters)
	}

	if err := r.SetBodyParam(o.Parameters); err != nil {
		return err
	}

	// path param resourceGroupName
	if err := r.SetPathParam("resourceGroupName", o.ResourceGroupName); err != nil {
		return err
	}

	// path param subscriptionId
	if err := r.SetPathParam("subscriptionId", o.SubscriptionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
