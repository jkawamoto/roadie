package disks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jkawamoto/roadie/cloud/azure/disk/models"
)

// DisksUpdateReader is a Reader for the DisksUpdate structure.
type DisksUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DisksUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDisksUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewDisksUpdateAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDisksUpdateOK creates a DisksUpdateOK with default headers values
func NewDisksUpdateOK() *DisksUpdateOK {
	return &DisksUpdateOK{}
}

/*DisksUpdateOK handles this case with default header values.

OK
*/
type DisksUpdateOK struct {
	Payload *models.Disk
}

func (o *DisksUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}][%d] disksUpdateOK  %+v", 200, o.Payload)
}

func (o *DisksUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Disk)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisksUpdateAccepted creates a DisksUpdateAccepted with default headers values
func NewDisksUpdateAccepted() *DisksUpdateAccepted {
	return &DisksUpdateAccepted{}
}

/*DisksUpdateAccepted handles this case with default header values.

Accepted
*/
type DisksUpdateAccepted struct {
	Payload *models.Disk
}

func (o *DisksUpdateAccepted) Error() string {
	return fmt.Sprintf("[PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}][%d] disksUpdateAccepted  %+v", 202, o.Payload)
}

func (o *DisksUpdateAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Disk)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
