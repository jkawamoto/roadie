package disks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new disks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for disks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DisksCreateOrUpdate Creates or updates a disk.
*/
func (a *Client) DisksCreateOrUpdate(params *DisksCreateOrUpdateParams) (*DisksCreateOrUpdateOK, *DisksCreateOrUpdateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisksCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Disks_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisksCreateOrUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DisksCreateOrUpdateOK:
		return value, nil, nil
	case *DisksCreateOrUpdateAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DisksDelete Deletes a disk.
*/
func (a *Client) DisksDelete(params *DisksDeleteParams) (*DisksDeleteOK, *DisksDeleteAccepted, *DisksDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisksDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Disks_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisksDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *DisksDeleteOK:
		return value, nil, nil, nil
	case *DisksDeleteAccepted:
		return nil, value, nil, nil
	case *DisksDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
DisksGet Gets information about a disk.
*/
func (a *Client) DisksGet(params *DisksGetParams) (*DisksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisksGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Disks_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisksGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DisksGetOK), nil

}

/*
DisksGrantAccess Grants access to a disk.
*/
func (a *Client) DisksGrantAccess(params *DisksGrantAccessParams) (*DisksGrantAccessOK, *DisksGrantAccessAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisksGrantAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Disks_GrantAccess",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}/beginGetAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisksGrantAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DisksGrantAccessOK:
		return value, nil, nil
	case *DisksGrantAccessAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DisksList Lists all the disks under a subscription.
*/
func (a *Client) DisksList(params *DisksListParams) (*DisksListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisksListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Disks_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/disks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisksListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DisksListOK), nil

}

/*
DisksListByResourceGroup Lists all the disks under a resource group.
*/
func (a *Client) DisksListByResourceGroup(params *DisksListByResourceGroupParams) (*DisksListByResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisksListByResourceGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Disks_ListByResourceGroup",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisksListByResourceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DisksListByResourceGroupOK), nil

}

/*
DisksRevokeAccess Revokes access to a disk.
*/
func (a *Client) DisksRevokeAccess(params *DisksRevokeAccessParams) (*DisksRevokeAccessOK, *DisksRevokeAccessAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisksRevokeAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Disks_RevokeAccess",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}/endGetAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisksRevokeAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DisksRevokeAccessOK:
		return value, nil, nil
	case *DisksRevokeAccessAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DisksUpdate Updates (patches) a disk.
*/
func (a *Client) DisksUpdate(params *DisksUpdateParams) (*DisksUpdateOK, *DisksUpdateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisksUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Disks_Update",
		Method:             "PATCH",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisksUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DisksUpdateOK:
		return value, nil, nil
	case *DisksUpdateAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
