package snapshots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new snapshots API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for snapshots API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SnapshotsCreateOrUpdate Creates or updates a snapshot.
*/
func (a *Client) SnapshotsCreateOrUpdate(params *SnapshotsCreateOrUpdateParams) (*SnapshotsCreateOrUpdateOK, *SnapshotsCreateOrUpdateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSnapshotsCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Snapshots_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SnapshotsCreateOrUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SnapshotsCreateOrUpdateOK:
		return value, nil, nil
	case *SnapshotsCreateOrUpdateAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SnapshotsDelete Deletes a snapshot.
*/
func (a *Client) SnapshotsDelete(params *SnapshotsDeleteParams) (*SnapshotsDeleteOK, *SnapshotsDeleteAccepted, *SnapshotsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSnapshotsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Snapshots_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SnapshotsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *SnapshotsDeleteOK:
		return value, nil, nil, nil
	case *SnapshotsDeleteAccepted:
		return nil, value, nil, nil
	case *SnapshotsDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
SnapshotsGet Gets information about a snapshot.
*/
func (a *Client) SnapshotsGet(params *SnapshotsGetParams) (*SnapshotsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSnapshotsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Snapshots_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SnapshotsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SnapshotsGetOK), nil

}

/*
SnapshotsGrantAccess Grants access to a snapshot.
*/
func (a *Client) SnapshotsGrantAccess(params *SnapshotsGrantAccessParams) (*SnapshotsGrantAccessOK, *SnapshotsGrantAccessAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSnapshotsGrantAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Snapshots_GrantAccess",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}/beginGetAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SnapshotsGrantAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SnapshotsGrantAccessOK:
		return value, nil, nil
	case *SnapshotsGrantAccessAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SnapshotsList Lists snapshots under a subscription.
*/
func (a *Client) SnapshotsList(params *SnapshotsListParams) (*SnapshotsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSnapshotsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Snapshots_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SnapshotsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SnapshotsListOK), nil

}

/*
SnapshotsListByResourceGroup Lists snapshots under a resource group.
*/
func (a *Client) SnapshotsListByResourceGroup(params *SnapshotsListByResourceGroupParams) (*SnapshotsListByResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSnapshotsListByResourceGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Snapshots_ListByResourceGroup",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SnapshotsListByResourceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SnapshotsListByResourceGroupOK), nil

}

/*
SnapshotsRevokeAccess Revokes access to a snapshot.
*/
func (a *Client) SnapshotsRevokeAccess(params *SnapshotsRevokeAccessParams) (*SnapshotsRevokeAccessOK, *SnapshotsRevokeAccessAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSnapshotsRevokeAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Snapshots_RevokeAccess",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}/endGetAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SnapshotsRevokeAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SnapshotsRevokeAccessOK:
		return value, nil, nil
	case *SnapshotsRevokeAccessAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SnapshotsUpdate Updates (patches) a snapshot.
*/
func (a *Client) SnapshotsUpdate(params *SnapshotsUpdateParams) (*SnapshotsUpdateOK, *SnapshotsUpdateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSnapshotsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Snapshots_Update",
		Method:             "PATCH",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SnapshotsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SnapshotsUpdateOK:
		return value, nil, nil
	case *SnapshotsUpdateAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
