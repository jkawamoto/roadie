package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GrantAccessData Data used for requesting a SAS.
// swagger:model GrantAccessData
type GrantAccessData struct {

	// access
	// Required: true
	Access *string `json:"access"`

	// Time duration in seconds until the SAS access expires.
	// Required: true
	DurationInSeconds *int32 `json:"durationInSeconds"`
}

// Validate validates this grant access data
func (m *GrantAccessData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDurationInSeconds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var grantAccessDataTypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Read"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		grantAccessDataTypeAccessPropEnum = append(grantAccessDataTypeAccessPropEnum, v)
	}
}

const (
	// GrantAccessDataAccessNone captures enum value "None"
	GrantAccessDataAccessNone string = "None"
	// GrantAccessDataAccessRead captures enum value "Read"
	GrantAccessDataAccessRead string = "Read"
)

// prop value enum
func (m *GrantAccessData) validateAccessEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, grantAccessDataTypeAccessPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GrantAccessData) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", m.Access); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccessEnum("access", "body", *m.Access); err != nil {
		return err
	}

	return nil
}

func (m *GrantAccessData) validateDurationInSeconds(formats strfmt.Registry) error {

	if err := validate.Required("durationInSeconds", "body", m.DurationInSeconds); err != nil {
		return err
	}

	return nil
}
