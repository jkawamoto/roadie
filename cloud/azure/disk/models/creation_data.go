package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// CreationData Data used when creating a disk.
// swagger:model CreationData
type CreationData struct {

	// create option
	// Required: true
	CreateOption *string `json:"createOption"`

	// Disk source information.
	ImageReference *ImageDiskReference `json:"imageReference,omitempty"`

	// If createOption is Copy, this is the ARM id of the source snapshot or disk. If creationOption is Restore, this is the ARM-like id of the source disk restore point.
	SourceResourceID string `json:"sourceResourceId,omitempty"`

	// If creationOption is Import, this is a SAS URI to a blob to be imported into a managed disk. If creationOption is Copy, this is a relative Uri containing the id of the source snapshot to be copied into a managed disk.
	SourceURI string `json:"sourceUri,omitempty"`

	// If createOption is Import, the Azure Resource Manager identifier of the storage account containing the blob to import as a disk. Required only if the blob is in a different subscription
	StorageAccountID string `json:"storageAccountId,omitempty"`
}

// Validate validates this creation data
func (m *CreationData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateOption(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImageReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var creationDataTypeCreateOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Empty","Attach","FromImage","Import","Copy","Restore"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		creationDataTypeCreateOptionPropEnum = append(creationDataTypeCreateOptionPropEnum, v)
	}
}

const (
	// CreationDataCreateOptionEmpty captures enum value "Empty"
	CreationDataCreateOptionEmpty string = "Empty"
	// CreationDataCreateOptionAttach captures enum value "Attach"
	CreationDataCreateOptionAttach string = "Attach"
	// CreationDataCreateOptionFromImage captures enum value "FromImage"
	CreationDataCreateOptionFromImage string = "FromImage"
	// CreationDataCreateOptionImport captures enum value "Import"
	CreationDataCreateOptionImport string = "Import"
	// CreationDataCreateOptionCopy captures enum value "Copy"
	CreationDataCreateOptionCopy string = "Copy"
	// CreationDataCreateOptionRestore captures enum value "Restore"
	CreationDataCreateOptionRestore string = "Restore"
)

// prop value enum
func (m *CreationData) validateCreateOptionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, creationDataTypeCreateOptionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreationData) validateCreateOption(formats strfmt.Registry) error {

	if err := validate.Required("createOption", "body", m.CreateOption); err != nil {
		return err
	}

	// value enum
	if err := m.validateCreateOptionEnum("createOption", "body", *m.CreateOption); err != nil {
		return err
	}

	return nil
}

func (m *CreationData) validateImageReference(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageReference) { // not required
		return nil
	}

	if m.ImageReference != nil {

		if err := m.ImageReference.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
