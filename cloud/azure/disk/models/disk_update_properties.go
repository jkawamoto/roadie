package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// DiskUpdateProperties Disk resource update properties.
// swagger:model DiskUpdateProperties
type DiskUpdateProperties struct {

	// the storage account type of the disk.
	AccountType string `json:"accountType,omitempty"`

	// disk source information. CreationData information cannot be changed after the disk has been created.
	CreationData *CreationData `json:"creationData,omitempty"`

	// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the VHD to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB int32 `json:"diskSizeGB,omitempty"`

	// Encryption settings for disk or snapshot
	EncryptionSettings *EncryptionSettings `json:"encryptionSettings,omitempty"`

	// the Operating System type.
	OsType string `json:"osType,omitempty"`
}

// Validate validates this disk update properties
func (m *DiskUpdateProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreationData(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEncryptionSettings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var diskUpdatePropertiesTypeAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Standard_LRS","Premium_LRS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskUpdatePropertiesTypeAccountTypePropEnum = append(diskUpdatePropertiesTypeAccountTypePropEnum, v)
	}
}

const (
	// DiskUpdatePropertiesAccountTypeStandardLRS captures enum value "Standard_LRS"
	DiskUpdatePropertiesAccountTypeStandardLRS string = "Standard_LRS"
	// DiskUpdatePropertiesAccountTypePremiumLRS captures enum value "Premium_LRS"
	DiskUpdatePropertiesAccountTypePremiumLRS string = "Premium_LRS"
)

// prop value enum
func (m *DiskUpdateProperties) validateAccountTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, diskUpdatePropertiesTypeAccountTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DiskUpdateProperties) validateAccountType(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccountTypeEnum("accountType", "body", m.AccountType); err != nil {
		return err
	}

	return nil
}

func (m *DiskUpdateProperties) validateCreationData(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationData) { // not required
		return nil
	}

	if m.CreationData != nil {

		if err := m.CreationData.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *DiskUpdateProperties) validateEncryptionSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.EncryptionSettings) { // not required
		return nil
	}

	if m.EncryptionSettings != nil {

		if err := m.EncryptionSettings.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var diskUpdatePropertiesTypeOsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Windows","Linux"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskUpdatePropertiesTypeOsTypePropEnum = append(diskUpdatePropertiesTypeOsTypePropEnum, v)
	}
}

const (
	// DiskUpdatePropertiesOsTypeWindows captures enum value "Windows"
	DiskUpdatePropertiesOsTypeWindows string = "Windows"
	// DiskUpdatePropertiesOsTypeLinux captures enum value "Linux"
	DiskUpdatePropertiesOsTypeLinux string = "Linux"
)

// prop value enum
func (m *DiskUpdateProperties) validateOsTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, diskUpdatePropertiesTypeOsTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DiskUpdateProperties) validateOsType(formats strfmt.Registry) error {

	if swag.IsZero(m.OsType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsTypeEnum("osType", "body", m.OsType); err != nil {
		return err
	}

	return nil
}
