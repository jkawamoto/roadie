package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// DiskProperties Disk resource properties.
// swagger:model DiskProperties
type DiskProperties struct {

	// the storage account type of the disk.
	AccountType string `json:"accountType,omitempty"`

	// Disk source information. CreationData information cannot be changed after the disk has been created.
	// Required: true
	CreationData *CreationData `json:"creationData"`

	// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the VHD to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB int32 `json:"diskSizeGB,omitempty"`

	// Encryption settings for disk or snapshot
	EncryptionSettings *EncryptionSettings `json:"encryptionSettings,omitempty"`

	// The Operating System type.
	OsType string `json:"osType,omitempty"`

	// A relative URI containing the VM id that has the disk attached.
	// Read Only: true
	OwnerID string `json:"ownerId,omitempty"`

	// The disk provisioning state.
	// Read Only: true
	ProvisioningState string `json:"provisioningState,omitempty"`

	// The time when the disk was created.
	// Read Only: true
	TimeCreated strfmt.DateTime `json:"timeCreated,omitempty"`
}

// Validate validates this disk properties
func (m *DiskProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreationData(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEncryptionSettings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var diskPropertiesTypeAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Standard_LRS","Premium_LRS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskPropertiesTypeAccountTypePropEnum = append(diskPropertiesTypeAccountTypePropEnum, v)
	}
}

const (
	// DiskPropertiesAccountTypeStandardLRS captures enum value "Standard_LRS"
	DiskPropertiesAccountTypeStandardLRS string = "Standard_LRS"
	// DiskPropertiesAccountTypePremiumLRS captures enum value "Premium_LRS"
	DiskPropertiesAccountTypePremiumLRS string = "Premium_LRS"
)

// prop value enum
func (m *DiskProperties) validateAccountTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, diskPropertiesTypeAccountTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DiskProperties) validateAccountType(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccountTypeEnum("accountType", "body", m.AccountType); err != nil {
		return err
	}

	return nil
}

func (m *DiskProperties) validateCreationData(formats strfmt.Registry) error {

	if err := validate.Required("creationData", "body", m.CreationData); err != nil {
		return err
	}

	if m.CreationData != nil {

		if err := m.CreationData.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *DiskProperties) validateEncryptionSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.EncryptionSettings) { // not required
		return nil
	}

	if m.EncryptionSettings != nil {

		if err := m.EncryptionSettings.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var diskPropertiesTypeOsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Windows","Linux"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskPropertiesTypeOsTypePropEnum = append(diskPropertiesTypeOsTypePropEnum, v)
	}
}

const (
	// DiskPropertiesOsTypeWindows captures enum value "Windows"
	DiskPropertiesOsTypeWindows string = "Windows"
	// DiskPropertiesOsTypeLinux captures enum value "Linux"
	DiskPropertiesOsTypeLinux string = "Linux"
)

// prop value enum
func (m *DiskProperties) validateOsTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, diskPropertiesTypeOsTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DiskProperties) validateOsType(formats strfmt.Registry) error {

	if swag.IsZero(m.OsType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsTypeEnum("osType", "body", m.OsType); err != nil {
		return err
	}

	return nil
}
