package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// EncryptionSettings Encryption settings for disk or snapshot
// swagger:model EncryptionSettings
type EncryptionSettings struct {

	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReference `json:"diskEncryptionKey,omitempty"`

	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled bool `json:"enabled,omitempty"`

	// Key Vault Key Url and vault id of the key encryption key
	KeyEncryptionKey *KeyVaultAndKeyReference `json:"keyEncryptionKey,omitempty"`
}

// Validate validates this encryption settings
func (m *EncryptionSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskEncryptionKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKeyEncryptionKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EncryptionSettings) validateDiskEncryptionKey(formats strfmt.Registry) error {

	if swag.IsZero(m.DiskEncryptionKey) { // not required
		return nil
	}

	if m.DiskEncryptionKey != nil {

		if err := m.DiskEncryptionKey.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *EncryptionSettings) validateKeyEncryptionKey(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyEncryptionKey) { // not required
		return nil
	}

	if m.KeyEncryptionKey != nil {

		if err := m.KeyEncryptionKey.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
