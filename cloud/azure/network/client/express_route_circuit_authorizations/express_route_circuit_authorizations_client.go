package express_route_circuit_authorizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new express route circuit authorizations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for express route circuit authorizations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ExpressRouteCircuitAuthorizationsCreateOrUpdate The Put Authorization operation creates/updates an authorization in thespecified ExpressRouteCircuits
*/
func (a *Client) ExpressRouteCircuitAuthorizationsCreateOrUpdate(params *ExpressRouteCircuitAuthorizationsCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ExpressRouteCircuitAuthorizationsCreateOrUpdateOK, *ExpressRouteCircuitAuthorizationsCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpressRouteCircuitAuthorizationsCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExpressRouteCircuitAuthorizations_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExpressRouteCircuitAuthorizationsCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ExpressRouteCircuitAuthorizationsCreateOrUpdateOK:
		return value, nil, nil
	case *ExpressRouteCircuitAuthorizationsCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ExpressRouteCircuitAuthorizationsDelete The delete authorization operation deletes the specified authorization from the specified ExpressRouteCircuit.
*/
func (a *Client) ExpressRouteCircuitAuthorizationsDelete(params *ExpressRouteCircuitAuthorizationsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ExpressRouteCircuitAuthorizationsDeleteOK, *ExpressRouteCircuitAuthorizationsDeleteAccepted, *ExpressRouteCircuitAuthorizationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpressRouteCircuitAuthorizationsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExpressRouteCircuitAuthorizations_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExpressRouteCircuitAuthorizationsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *ExpressRouteCircuitAuthorizationsDeleteOK:
		return value, nil, nil, nil
	case *ExpressRouteCircuitAuthorizationsDeleteAccepted:
		return nil, value, nil, nil
	case *ExpressRouteCircuitAuthorizationsDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
ExpressRouteCircuitAuthorizationsGet The GET authorization operation retrieves the specified authorization from the specified ExpressRouteCircuit.
*/
func (a *Client) ExpressRouteCircuitAuthorizationsGet(params *ExpressRouteCircuitAuthorizationsGetParams, authInfo runtime.ClientAuthInfoWriter) (*ExpressRouteCircuitAuthorizationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpressRouteCircuitAuthorizationsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExpressRouteCircuitAuthorizations_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExpressRouteCircuitAuthorizationsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExpressRouteCircuitAuthorizationsGetOK), nil

}

/*
ExpressRouteCircuitAuthorizationsList The List authorization operation retrieves all the authorizations in an ExpressRouteCircuit.
*/
func (a *Client) ExpressRouteCircuitAuthorizationsList(params *ExpressRouteCircuitAuthorizationsListParams, authInfo runtime.ClientAuthInfoWriter) (*ExpressRouteCircuitAuthorizationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpressRouteCircuitAuthorizationsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExpressRouteCircuitAuthorizations_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExpressRouteCircuitAuthorizationsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExpressRouteCircuitAuthorizationsListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
