package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCheckDNSNameAvailabilityParams creates a new CheckDNSNameAvailabilityParams object
// with the default values initialized.
func NewCheckDNSNameAvailabilityParams() *CheckDNSNameAvailabilityParams {
	var ()
	return &CheckDNSNameAvailabilityParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCheckDNSNameAvailabilityParamsWithTimeout creates a new CheckDNSNameAvailabilityParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCheckDNSNameAvailabilityParamsWithTimeout(timeout time.Duration) *CheckDNSNameAvailabilityParams {
	var ()
	return &CheckDNSNameAvailabilityParams{

		timeout: timeout,
	}
}

// NewCheckDNSNameAvailabilityParamsWithContext creates a new CheckDNSNameAvailabilityParams object
// with the default values initialized, and the ability to set a context for a request
func NewCheckDNSNameAvailabilityParamsWithContext(ctx context.Context) *CheckDNSNameAvailabilityParams {
	var ()
	return &CheckDNSNameAvailabilityParams{

		Context: ctx,
	}
}

/*CheckDNSNameAvailabilityParams contains all the parameters to send to the API endpoint
for the check Dns name availability operation typically these are written to a http.Request
*/
type CheckDNSNameAvailabilityParams struct {

	/*APIVersion
	  Client Api Version.

	*/
	APIVersion string
	/*DomainNameLabel
	  The domain name to be verified. It must conform to the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.

	*/
	DomainNameLabel *string
	/*Location
	  The location of the domain name

	*/
	Location string
	/*SubscriptionID
	  Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.

	*/
	SubscriptionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the check Dns name availability params
func (o *CheckDNSNameAvailabilityParams) WithTimeout(timeout time.Duration) *CheckDNSNameAvailabilityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the check Dns name availability params
func (o *CheckDNSNameAvailabilityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the check Dns name availability params
func (o *CheckDNSNameAvailabilityParams) WithContext(ctx context.Context) *CheckDNSNameAvailabilityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the check Dns name availability params
func (o *CheckDNSNameAvailabilityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithAPIVersion adds the aPIVersion to the check Dns name availability params
func (o *CheckDNSNameAvailabilityParams) WithAPIVersion(aPIVersion string) *CheckDNSNameAvailabilityParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the check Dns name availability params
func (o *CheckDNSNameAvailabilityParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithDomainNameLabel adds the domainNameLabel to the check Dns name availability params
func (o *CheckDNSNameAvailabilityParams) WithDomainNameLabel(domainNameLabel *string) *CheckDNSNameAvailabilityParams {
	o.SetDomainNameLabel(domainNameLabel)
	return o
}

// SetDomainNameLabel adds the domainNameLabel to the check Dns name availability params
func (o *CheckDNSNameAvailabilityParams) SetDomainNameLabel(domainNameLabel *string) {
	o.DomainNameLabel = domainNameLabel
}

// WithLocation adds the location to the check Dns name availability params
func (o *CheckDNSNameAvailabilityParams) WithLocation(location string) *CheckDNSNameAvailabilityParams {
	o.SetLocation(location)
	return o
}

// SetLocation adds the location to the check Dns name availability params
func (o *CheckDNSNameAvailabilityParams) SetLocation(location string) {
	o.Location = location
}

// WithSubscriptionID adds the subscriptionID to the check Dns name availability params
func (o *CheckDNSNameAvailabilityParams) WithSubscriptionID(subscriptionID string) *CheckDNSNameAvailabilityParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the check Dns name availability params
func (o *CheckDNSNameAvailabilityParams) SetSubscriptionID(subscriptionID string) {
	o.SubscriptionID = subscriptionID
}

// WriteToRequest writes these params to a swagger request
func (o *CheckDNSNameAvailabilityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	if o.DomainNameLabel != nil {

		// query param domainNameLabel
		var qrDomainNameLabel string
		if o.DomainNameLabel != nil {
			qrDomainNameLabel = *o.DomainNameLabel
		}
		qDomainNameLabel := qrDomainNameLabel
		if qDomainNameLabel != "" {
			if err := r.SetQueryParam("domainNameLabel", qDomainNameLabel); err != nil {
				return err
			}
		}

	}

	// path param location
	if err := r.SetPathParam("location", o.Location); err != nil {
		return err
	}

	// path param subscriptionId
	if err := r.SetPathParam("subscriptionId", o.SubscriptionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
