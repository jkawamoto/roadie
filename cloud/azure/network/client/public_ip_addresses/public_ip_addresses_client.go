package public_ip_addresses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new public ip addresses API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for public ip addresses API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PublicIPAddressesCreateOrUpdate The Put PublicIPAddress operation creates/updates a stable/dynamic PublicIP address
*/
func (a *Client) PublicIPAddressesCreateOrUpdate(params *PublicIPAddressesCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PublicIPAddressesCreateOrUpdateOK, *PublicIPAddressesCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicIPAddressesCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicIPAddresses_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicIPAddressesCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PublicIPAddressesCreateOrUpdateOK:
		return value, nil, nil
	case *PublicIPAddressesCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PublicIPAddressesDelete The delete publicIpAddress operation deletes the specified publicIpAddress.
*/
func (a *Client) PublicIPAddressesDelete(params *PublicIPAddressesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PublicIPAddressesDeleteOK, *PublicIPAddressesDeleteAccepted, *PublicIPAddressesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicIPAddressesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicIPAddresses_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicIPAddressesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *PublicIPAddressesDeleteOK:
		return value, nil, nil, nil
	case *PublicIPAddressesDeleteAccepted:
		return nil, value, nil, nil
	case *PublicIPAddressesDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
PublicIPAddressesGet The Get publicIpAddress operation retreives information about the specified pubicIpAddress
*/
func (a *Client) PublicIPAddressesGet(params *PublicIPAddressesGetParams, authInfo runtime.ClientAuthInfoWriter) (*PublicIPAddressesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicIPAddressesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicIPAddresses_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicIPAddressesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicIPAddressesGetOK), nil

}

/*
PublicIPAddressesList The List publicIpAddress opertion retrieves all the publicIpAddresses in a resource group.
*/
func (a *Client) PublicIPAddressesList(params *PublicIPAddressesListParams, authInfo runtime.ClientAuthInfoWriter) (*PublicIPAddressesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicIPAddressesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicIPAddresses_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicIPAddressesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicIPAddressesListOK), nil

}

/*
PublicIPAddressesListAll The List publicIpAddress opertion retrieves all the publicIpAddresses in a subscription.
*/
func (a *Client) PublicIPAddressesListAll(params *PublicIPAddressesListAllParams, authInfo runtime.ClientAuthInfoWriter) (*PublicIPAddressesListAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicIPAddressesListAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicIPAddresses_ListAll",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Network/publicIPAddresses",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicIPAddressesListAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicIPAddressesListAllOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
