package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new routes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for routes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
RoutesCreateOrUpdate The Put route operation creates/updates a route in the specified route table
*/
func (a *Client) RoutesCreateOrUpdate(params *RoutesCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*RoutesCreateOrUpdateOK, *RoutesCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoutesCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Routes_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RoutesCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RoutesCreateOrUpdateOK:
		return value, nil, nil
	case *RoutesCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
RoutesDelete The delete route operation deletes the specified route from a route table.
*/
func (a *Client) RoutesDelete(params *RoutesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*RoutesDeleteOK, *RoutesDeleteAccepted, *RoutesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoutesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Routes_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RoutesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *RoutesDeleteOK:
		return value, nil, nil, nil
	case *RoutesDeleteAccepted:
		return nil, value, nil, nil
	case *RoutesDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
RoutesGet The Get route operation retreives information about the specified route from the route table.
*/
func (a *Client) RoutesGet(params *RoutesGetParams, authInfo runtime.ClientAuthInfoWriter) (*RoutesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoutesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Routes_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RoutesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RoutesGetOK), nil

}

/*
RoutesList The List network security rule opertion retrieves all the routes in a route table.
*/
func (a *Client) RoutesList(params *RoutesListParams, authInfo runtime.ClientAuthInfoWriter) (*RoutesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoutesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Routes_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RoutesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RoutesListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
