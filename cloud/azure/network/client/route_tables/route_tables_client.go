package route_tables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new route tables API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for route tables API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
RouteTablesCreateOrUpdate The Put RouteTable operation creates/updates a route tablein the specified resource group.
*/
func (a *Client) RouteTablesCreateOrUpdate(params *RouteTablesCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*RouteTablesCreateOrUpdateOK, *RouteTablesCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteTablesCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RouteTables_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RouteTablesCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RouteTablesCreateOrUpdateOK:
		return value, nil, nil
	case *RouteTablesCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
RouteTablesDelete The Delete RouteTable operation deletes the specifed Route Table
*/
func (a *Client) RouteTablesDelete(params *RouteTablesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*RouteTablesDeleteOK, *RouteTablesDeleteAccepted, *RouteTablesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteTablesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RouteTables_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RouteTablesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *RouteTablesDeleteOK:
		return value, nil, nil, nil
	case *RouteTablesDeleteAccepted:
		return nil, value, nil, nil
	case *RouteTablesDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
RouteTablesGet The Get RouteTables operation retrieves information about the specified route table.
*/
func (a *Client) RouteTablesGet(params *RouteTablesGetParams, authInfo runtime.ClientAuthInfoWriter) (*RouteTablesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteTablesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RouteTables_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RouteTablesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RouteTablesGetOK), nil

}

/*
RouteTablesList The list RouteTables returns all route tables in a resource group
*/
func (a *Client) RouteTablesList(params *RouteTablesListParams, authInfo runtime.ClientAuthInfoWriter) (*RouteTablesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteTablesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RouteTables_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RouteTablesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RouteTablesListOK), nil

}

/*
RouteTablesListAll The list RouteTables returns all route tables in a subscription
*/
func (a *Client) RouteTablesListAll(params *RouteTablesListAllParams, authInfo runtime.ClientAuthInfoWriter) (*RouteTablesListAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteTablesListAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RouteTables_ListAll",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Network/routeTables",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RouteTablesListAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RouteTablesListAllOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
