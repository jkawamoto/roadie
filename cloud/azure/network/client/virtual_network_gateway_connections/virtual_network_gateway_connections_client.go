package virtual_network_gateway_connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new virtual network gateway connections API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual network gateway connections API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
VirtualNetworkGatewayConnectionsCreateOrUpdate The Put VirtualNetworkGatewayConnection operation creates/updates a virtual network gateway connection in the specified resource group through Network resource provider.
*/
func (a *Client) VirtualNetworkGatewayConnectionsCreateOrUpdate(params *VirtualNetworkGatewayConnectionsCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworkGatewayConnectionsCreateOrUpdateOK, *VirtualNetworkGatewayConnectionsCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkGatewayConnectionsCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworkGatewayConnections_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworkGatewayConnectionsCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VirtualNetworkGatewayConnectionsCreateOrUpdateOK:
		return value, nil, nil
	case *VirtualNetworkGatewayConnectionsCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
VirtualNetworkGatewayConnectionsDelete The Delete VirtualNetworkGatewayConnection operation deletes the specifed virtual network Gateway connection through Network resource provider.
*/
func (a *Client) VirtualNetworkGatewayConnectionsDelete(params *VirtualNetworkGatewayConnectionsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworkGatewayConnectionsDeleteOK, *VirtualNetworkGatewayConnectionsDeleteAccepted, *VirtualNetworkGatewayConnectionsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkGatewayConnectionsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworkGatewayConnections_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworkGatewayConnectionsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *VirtualNetworkGatewayConnectionsDeleteOK:
		return value, nil, nil, nil
	case *VirtualNetworkGatewayConnectionsDeleteAccepted:
		return nil, value, nil, nil
	case *VirtualNetworkGatewayConnectionsDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
VirtualNetworkGatewayConnectionsGet The Get VirtualNetworkGatewayConnection operation retrieves information about the specified virtual network gateway connection through Network resource provider.
*/
func (a *Client) VirtualNetworkGatewayConnectionsGet(params *VirtualNetworkGatewayConnectionsGetParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworkGatewayConnectionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkGatewayConnectionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworkGatewayConnections_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworkGatewayConnectionsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualNetworkGatewayConnectionsGetOK), nil

}

/*
VirtualNetworkGatewayConnectionsGetSharedKey The Get VirtualNetworkGatewayConnectionSharedKey operation retrieves information about the specified virtual network gateway connection shared key through Network resource provider.
*/
func (a *Client) VirtualNetworkGatewayConnectionsGetSharedKey(params *VirtualNetworkGatewayConnectionsGetSharedKeyParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworkGatewayConnectionsGetSharedKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkGatewayConnectionsGetSharedKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworkGatewayConnections_GetSharedKey",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{connectionSharedKeyName}/sharedkey",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworkGatewayConnectionsGetSharedKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualNetworkGatewayConnectionsGetSharedKeyOK), nil

}

/*
VirtualNetworkGatewayConnectionsList The List VirtualNetworkGatewayConnections operation retrieves all the virtual network gateways connections created.
*/
func (a *Client) VirtualNetworkGatewayConnectionsList(params *VirtualNetworkGatewayConnectionsListParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworkGatewayConnectionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkGatewayConnectionsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworkGatewayConnections_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworkGatewayConnectionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualNetworkGatewayConnectionsListOK), nil

}

/*
VirtualNetworkGatewayConnectionsResetSharedKey The VirtualNetworkGatewayConnectionResetSharedKey operation resets the virtual network gateway connection shared key for passed virtual network gateway connection in the specified resource group through Network resource provider.
*/
func (a *Client) VirtualNetworkGatewayConnectionsResetSharedKey(params *VirtualNetworkGatewayConnectionsResetSharedKeyParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworkGatewayConnectionsResetSharedKeyOK, *VirtualNetworkGatewayConnectionsResetSharedKeyAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkGatewayConnectionsResetSharedKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworkGatewayConnections_ResetSharedKey",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey/reset",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworkGatewayConnectionsResetSharedKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VirtualNetworkGatewayConnectionsResetSharedKeyOK:
		return value, nil, nil
	case *VirtualNetworkGatewayConnectionsResetSharedKeyAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
VirtualNetworkGatewayConnectionsSetSharedKey The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual network gateway connection shared key for passed virtual network gateway connection in the specified resource group through Network resource provider.
*/
func (a *Client) VirtualNetworkGatewayConnectionsSetSharedKey(params *VirtualNetworkGatewayConnectionsSetSharedKeyParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworkGatewayConnectionsSetSharedKeyOK, *VirtualNetworkGatewayConnectionsSetSharedKeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkGatewayConnectionsSetSharedKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworkGatewayConnections_SetSharedKey",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworkGatewayConnectionsSetSharedKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VirtualNetworkGatewayConnectionsSetSharedKeyOK:
		return value, nil, nil
	case *VirtualNetworkGatewayConnectionsSetSharedKeyCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
