package express_route_circuit_peerings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jkawamoto/roadie/cloud/azure/network/models"
)

// ExpressRouteCircuitPeeringsCreateOrUpdateReader is a Reader for the ExpressRouteCircuitPeeringsCreateOrUpdate structure.
type ExpressRouteCircuitPeeringsCreateOrUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExpressRouteCircuitPeeringsCreateOrUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewExpressRouteCircuitPeeringsCreateOrUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewExpressRouteCircuitPeeringsCreateOrUpdateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewExpressRouteCircuitPeeringsCreateOrUpdateOK creates a ExpressRouteCircuitPeeringsCreateOrUpdateOK with default headers values
func NewExpressRouteCircuitPeeringsCreateOrUpdateOK() *ExpressRouteCircuitPeeringsCreateOrUpdateOK {
	return &ExpressRouteCircuitPeeringsCreateOrUpdateOK{}
}

/*ExpressRouteCircuitPeeringsCreateOrUpdateOK handles this case with default header values.

ExpressRouteCircuitPeeringsCreateOrUpdateOK express route circuit peerings create or update o k
*/
type ExpressRouteCircuitPeeringsCreateOrUpdateOK struct {
	Payload *models.ExpressRouteCircuitPeering
}

func (o *ExpressRouteCircuitPeeringsCreateOrUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}][%d] expressRouteCircuitPeeringsCreateOrUpdateOK  %+v", 200, o.Payload)
}

func (o *ExpressRouteCircuitPeeringsCreateOrUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExpressRouteCircuitPeering)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExpressRouteCircuitPeeringsCreateOrUpdateCreated creates a ExpressRouteCircuitPeeringsCreateOrUpdateCreated with default headers values
func NewExpressRouteCircuitPeeringsCreateOrUpdateCreated() *ExpressRouteCircuitPeeringsCreateOrUpdateCreated {
	return &ExpressRouteCircuitPeeringsCreateOrUpdateCreated{}
}

/*ExpressRouteCircuitPeeringsCreateOrUpdateCreated handles this case with default header values.

ExpressRouteCircuitPeeringsCreateOrUpdateCreated express route circuit peerings create or update created
*/
type ExpressRouteCircuitPeeringsCreateOrUpdateCreated struct {
	Payload *models.ExpressRouteCircuitPeering
}

func (o *ExpressRouteCircuitPeeringsCreateOrUpdateCreated) Error() string {
	return fmt.Sprintf("[PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}][%d] expressRouteCircuitPeeringsCreateOrUpdateCreated  %+v", 201, o.Payload)
}

func (o *ExpressRouteCircuitPeeringsCreateOrUpdateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExpressRouteCircuitPeering)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
