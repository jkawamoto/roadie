package express_route_circuit_peerings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ExpressRouteCircuitPeeringsDeleteReader is a Reader for the ExpressRouteCircuitPeeringsDelete structure.
type ExpressRouteCircuitPeeringsDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExpressRouteCircuitPeeringsDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewExpressRouteCircuitPeeringsDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewExpressRouteCircuitPeeringsDeleteAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewExpressRouteCircuitPeeringsDeleteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewExpressRouteCircuitPeeringsDeleteOK creates a ExpressRouteCircuitPeeringsDeleteOK with default headers values
func NewExpressRouteCircuitPeeringsDeleteOK() *ExpressRouteCircuitPeeringsDeleteOK {
	return &ExpressRouteCircuitPeeringsDeleteOK{}
}

/*ExpressRouteCircuitPeeringsDeleteOK handles this case with default header values.

ExpressRouteCircuitPeeringsDeleteOK express route circuit peerings delete o k
*/
type ExpressRouteCircuitPeeringsDeleteOK struct {
}

func (o *ExpressRouteCircuitPeeringsDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}][%d] expressRouteCircuitPeeringsDeleteOK ", 200)
}

func (o *ExpressRouteCircuitPeeringsDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExpressRouteCircuitPeeringsDeleteAccepted creates a ExpressRouteCircuitPeeringsDeleteAccepted with default headers values
func NewExpressRouteCircuitPeeringsDeleteAccepted() *ExpressRouteCircuitPeeringsDeleteAccepted {
	return &ExpressRouteCircuitPeeringsDeleteAccepted{}
}

/*ExpressRouteCircuitPeeringsDeleteAccepted handles this case with default header values.

ExpressRouteCircuitPeeringsDeleteAccepted express route circuit peerings delete accepted
*/
type ExpressRouteCircuitPeeringsDeleteAccepted struct {
}

func (o *ExpressRouteCircuitPeeringsDeleteAccepted) Error() string {
	return fmt.Sprintf("[DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}][%d] expressRouteCircuitPeeringsDeleteAccepted ", 202)
}

func (o *ExpressRouteCircuitPeeringsDeleteAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExpressRouteCircuitPeeringsDeleteNoContent creates a ExpressRouteCircuitPeeringsDeleteNoContent with default headers values
func NewExpressRouteCircuitPeeringsDeleteNoContent() *ExpressRouteCircuitPeeringsDeleteNoContent {
	return &ExpressRouteCircuitPeeringsDeleteNoContent{}
}

/*ExpressRouteCircuitPeeringsDeleteNoContent handles this case with default header values.

ExpressRouteCircuitPeeringsDeleteNoContent express route circuit peerings delete no content
*/
type ExpressRouteCircuitPeeringsDeleteNoContent struct {
}

func (o *ExpressRouteCircuitPeeringsDeleteNoContent) Error() string {
	return fmt.Sprintf("[DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}][%d] expressRouteCircuitPeeringsDeleteNoContent ", 204)
}

func (o *ExpressRouteCircuitPeeringsDeleteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
