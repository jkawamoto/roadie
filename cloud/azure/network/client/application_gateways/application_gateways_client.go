package application_gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new application gateways API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for application gateways API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ApplicationGatewaysCreateOrUpdate The Put ApplicationGateway operation creates/updates a ApplicationGateway
*/
func (a *Client) ApplicationGatewaysCreateOrUpdate(params *ApplicationGatewaysCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationGatewaysCreateOrUpdateOK, *ApplicationGatewaysCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationGatewaysCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationGateways_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationGatewaysCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ApplicationGatewaysCreateOrUpdateOK:
		return value, nil, nil
	case *ApplicationGatewaysCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ApplicationGatewaysDelete The delete applicationgateway operation deletes the specified applicationgateway.
*/
func (a *Client) ApplicationGatewaysDelete(params *ApplicationGatewaysDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationGatewaysDeleteOK, *ApplicationGatewaysDeleteAccepted, *ApplicationGatewaysDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationGatewaysDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationGateways_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationGatewaysDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *ApplicationGatewaysDeleteOK:
		return value, nil, nil, nil
	case *ApplicationGatewaysDeleteAccepted:
		return nil, value, nil, nil
	case *ApplicationGatewaysDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
ApplicationGatewaysGet The Get applicationgateway operation retreives information about the specified applicationgateway.
*/
func (a *Client) ApplicationGatewaysGet(params *ApplicationGatewaysGetParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationGatewaysGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationGatewaysGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationGateways_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationGatewaysGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ApplicationGatewaysGetOK), nil

}

/*
ApplicationGatewaysList The List ApplicationGateway opertion retrieves all the applicationgateways in a resource group.
*/
func (a *Client) ApplicationGatewaysList(params *ApplicationGatewaysListParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationGatewaysListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationGatewaysListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationGateways_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationGatewaysListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ApplicationGatewaysListOK), nil

}

/*
ApplicationGatewaysListAll The List applicationgateway opertion retrieves all the applicationgateways in a subscription.
*/
func (a *Client) ApplicationGatewaysListAll(params *ApplicationGatewaysListAllParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationGatewaysListAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationGatewaysListAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationGateways_ListAll",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGateways",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationGatewaysListAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ApplicationGatewaysListAllOK), nil

}

/*
ApplicationGatewaysStart The Start ApplicationGateway operation starts application gatewayin the specified resource group through Network resource provider.
*/
func (a *Client) ApplicationGatewaysStart(params *ApplicationGatewaysStartParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationGatewaysStartOK, *ApplicationGatewaysStartAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationGatewaysStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationGateways_Start",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/start",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationGatewaysStartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ApplicationGatewaysStartOK:
		return value, nil, nil
	case *ApplicationGatewaysStartAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ApplicationGatewaysStop The STOP ApplicationGateway operation stops application gatewayin the specified resource group through Network resource provider.
*/
func (a *Client) ApplicationGatewaysStop(params *ApplicationGatewaysStopParams, authInfo runtime.ClientAuthInfoWriter) (*ApplicationGatewaysStopOK, *ApplicationGatewaysStopAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationGatewaysStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplicationGateways_Stop",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/stop",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationGatewaysStopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ApplicationGatewaysStopOK:
		return value, nil, nil
	case *ApplicationGatewaysStopAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
