package express_route_circuits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new express route circuits API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for express route circuits API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ExpressRouteCircuitsCreateOrUpdate The Put ExpressRouteCircuit operation creates/updates a ExpressRouteCircuit
*/
func (a *Client) ExpressRouteCircuitsCreateOrUpdate(params *ExpressRouteCircuitsCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ExpressRouteCircuitsCreateOrUpdateOK, *ExpressRouteCircuitsCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpressRouteCircuitsCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExpressRouteCircuits_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExpressRouteCircuitsCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ExpressRouteCircuitsCreateOrUpdateOK:
		return value, nil, nil
	case *ExpressRouteCircuitsCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ExpressRouteCircuitsDelete The delete ExpressRouteCircuit operation deletes the specified ExpressRouteCircuit.
*/
func (a *Client) ExpressRouteCircuitsDelete(params *ExpressRouteCircuitsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ExpressRouteCircuitsDeleteOK, *ExpressRouteCircuitsDeleteAccepted, *ExpressRouteCircuitsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpressRouteCircuitsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExpressRouteCircuits_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExpressRouteCircuitsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *ExpressRouteCircuitsDeleteOK:
		return value, nil, nil, nil
	case *ExpressRouteCircuitsDeleteAccepted:
		return nil, value, nil, nil
	case *ExpressRouteCircuitsDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
ExpressRouteCircuitsGet The Get ExpressRouteCircuit operation retreives information about the specified ExpressRouteCircuit.
*/
func (a *Client) ExpressRouteCircuitsGet(params *ExpressRouteCircuitsGetParams, authInfo runtime.ClientAuthInfoWriter) (*ExpressRouteCircuitsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpressRouteCircuitsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExpressRouteCircuits_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExpressRouteCircuitsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExpressRouteCircuitsGetOK), nil

}

/*
ExpressRouteCircuitsList The List ExpressRouteCircuit opertion retrieves all the ExpressRouteCircuits in a resource group.
*/
func (a *Client) ExpressRouteCircuitsList(params *ExpressRouteCircuitsListParams, authInfo runtime.ClientAuthInfoWriter) (*ExpressRouteCircuitsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpressRouteCircuitsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExpressRouteCircuits_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExpressRouteCircuitsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExpressRouteCircuitsListOK), nil

}

/*
ExpressRouteCircuitsListAll The List ExpressRouteCircuit opertion retrieves all the ExpressRouteCircuits in a subscription.
*/
func (a *Client) ExpressRouteCircuitsListAll(params *ExpressRouteCircuitsListAllParams, authInfo runtime.ClientAuthInfoWriter) (*ExpressRouteCircuitsListAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpressRouteCircuitsListAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExpressRouteCircuits_ListAll",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCircuits",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExpressRouteCircuitsListAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExpressRouteCircuitsListAllOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
