package subnets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new subnets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subnets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SubnetsCreateOrUpdate The Put Subnet operation creates/updates a subnet in thespecified virtual network
*/
func (a *Client) SubnetsCreateOrUpdate(params *SubnetsCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SubnetsCreateOrUpdateOK, *SubnetsCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubnetsCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Subnets_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubnetsCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SubnetsCreateOrUpdateOK:
		return value, nil, nil
	case *SubnetsCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SubnetsDelete The delete subnet operation deletes the specified subnet.
*/
func (a *Client) SubnetsDelete(params *SubnetsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*SubnetsDeleteOK, *SubnetsDeleteAccepted, *SubnetsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubnetsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Subnets_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubnetsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *SubnetsDeleteOK:
		return value, nil, nil, nil
	case *SubnetsDeleteAccepted:
		return nil, value, nil, nil
	case *SubnetsDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
SubnetsGet The Get subnet operation retreives information about the specified subnet.
*/
func (a *Client) SubnetsGet(params *SubnetsGetParams, authInfo runtime.ClientAuthInfoWriter) (*SubnetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubnetsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Subnets_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubnetsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubnetsGetOK), nil

}

/*
SubnetsList The List subnets opertion retrieves all the subnets in a virtual network.
*/
func (a *Client) SubnetsList(params *SubnetsListParams, authInfo runtime.ClientAuthInfoWriter) (*SubnetsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubnetsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Subnets_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubnetsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubnetsListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
