package subnets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSubnetsGetParams creates a new SubnetsGetParams object
// with the default values initialized.
func NewSubnetsGetParams() *SubnetsGetParams {
	var ()
	return &SubnetsGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSubnetsGetParamsWithTimeout creates a new SubnetsGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSubnetsGetParamsWithTimeout(timeout time.Duration) *SubnetsGetParams {
	var ()
	return &SubnetsGetParams{

		timeout: timeout,
	}
}

// NewSubnetsGetParamsWithContext creates a new SubnetsGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewSubnetsGetParamsWithContext(ctx context.Context) *SubnetsGetParams {
	var ()
	return &SubnetsGetParams{

		Context: ctx,
	}
}

/*SubnetsGetParams contains all the parameters to send to the API endpoint
for the subnets get operation typically these are written to a http.Request
*/
type SubnetsGetParams struct {

	/*NrDollarExpand
	  expand references resources.

	*/
	DollarExpand *string
	/*APIVersion
	  Client Api Version.

	*/
	APIVersion string
	/*ResourceGroupName
	  The name of the resource group.

	*/
	ResourceGroupName string
	/*SubnetName
	  The name of the subnet.

	*/
	SubnetName string
	/*SubscriptionID
	  Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.

	*/
	SubscriptionID string
	/*VirtualNetworkName
	  The name of the virtual network.

	*/
	VirtualNetworkName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the subnets get params
func (o *SubnetsGetParams) WithTimeout(timeout time.Duration) *SubnetsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the subnets get params
func (o *SubnetsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the subnets get params
func (o *SubnetsGetParams) WithContext(ctx context.Context) *SubnetsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the subnets get params
func (o *SubnetsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithDollarExpand adds the dollarExpand to the subnets get params
func (o *SubnetsGetParams) WithDollarExpand(dollarExpand *string) *SubnetsGetParams {
	o.SetDollarExpand(dollarExpand)
	return o
}

// SetDollarExpand adds the dollarExpand to the subnets get params
func (o *SubnetsGetParams) SetDollarExpand(dollarExpand *string) {
	o.DollarExpand = dollarExpand
}

// WithAPIVersion adds the aPIVersion to the subnets get params
func (o *SubnetsGetParams) WithAPIVersion(aPIVersion string) *SubnetsGetParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the subnets get params
func (o *SubnetsGetParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithResourceGroupName adds the resourceGroupName to the subnets get params
func (o *SubnetsGetParams) WithResourceGroupName(resourceGroupName string) *SubnetsGetParams {
	o.SetResourceGroupName(resourceGroupName)
	return o
}

// SetResourceGroupName adds the resourceGroupName to the subnets get params
func (o *SubnetsGetParams) SetResourceGroupName(resourceGroupName string) {
	o.ResourceGroupName = resourceGroupName
}

// WithSubnetName adds the subnetName to the subnets get params
func (o *SubnetsGetParams) WithSubnetName(subnetName string) *SubnetsGetParams {
	o.SetSubnetName(subnetName)
	return o
}

// SetSubnetName adds the subnetName to the subnets get params
func (o *SubnetsGetParams) SetSubnetName(subnetName string) {
	o.SubnetName = subnetName
}

// WithSubscriptionID adds the subscriptionID to the subnets get params
func (o *SubnetsGetParams) WithSubscriptionID(subscriptionID string) *SubnetsGetParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the subnets get params
func (o *SubnetsGetParams) SetSubscriptionID(subscriptionID string) {
	o.SubscriptionID = subscriptionID
}

// WithVirtualNetworkName adds the virtualNetworkName to the subnets get params
func (o *SubnetsGetParams) WithVirtualNetworkName(virtualNetworkName string) *SubnetsGetParams {
	o.SetVirtualNetworkName(virtualNetworkName)
	return o
}

// SetVirtualNetworkName adds the virtualNetworkName to the subnets get params
func (o *SubnetsGetParams) SetVirtualNetworkName(virtualNetworkName string) {
	o.VirtualNetworkName = virtualNetworkName
}

// WriteToRequest writes these params to a swagger request
func (o *SubnetsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.DollarExpand != nil {

		// query param $expand
		var qrNrDollarExpand string
		if o.DollarExpand != nil {
			qrNrDollarExpand = *o.DollarExpand
		}
		qNrDollarExpand := qrNrDollarExpand
		if qNrDollarExpand != "" {
			if err := r.SetQueryParam("$expand", qNrDollarExpand); err != nil {
				return err
			}
		}

	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param resourceGroupName
	if err := r.SetPathParam("resourceGroupName", o.ResourceGroupName); err != nil {
		return err
	}

	// path param subnetName
	if err := r.SetPathParam("subnetName", o.SubnetName); err != nil {
		return err
	}

	// path param subscriptionId
	if err := r.SetPathParam("subscriptionId", o.SubscriptionID); err != nil {
		return err
	}

	// path param virtualNetworkName
	if err := r.SetPathParam("virtualNetworkName", o.VirtualNetworkName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
