package local_network_gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new local network gateways API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for local network gateways API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
LocalNetworkGatewaysCreateOrUpdate The Put LocalNetworkGateway operation creates/updates a local network gateway in the specified resource group through Network resource provider.
*/
func (a *Client) LocalNetworkGatewaysCreateOrUpdate(params *LocalNetworkGatewaysCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*LocalNetworkGatewaysCreateOrUpdateOK, *LocalNetworkGatewaysCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocalNetworkGatewaysCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LocalNetworkGateways_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LocalNetworkGatewaysCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LocalNetworkGatewaysCreateOrUpdateOK:
		return value, nil, nil
	case *LocalNetworkGatewaysCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
LocalNetworkGatewaysDelete The Delete LocalNetworkGateway operation deletes the specifed local network Gateway through Network resource provider.
*/
func (a *Client) LocalNetworkGatewaysDelete(params *LocalNetworkGatewaysDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*LocalNetworkGatewaysDeleteOK, *LocalNetworkGatewaysDeleteAccepted, *LocalNetworkGatewaysDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocalNetworkGatewaysDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LocalNetworkGateways_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LocalNetworkGatewaysDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *LocalNetworkGatewaysDeleteOK:
		return value, nil, nil, nil
	case *LocalNetworkGatewaysDeleteAccepted:
		return nil, value, nil, nil
	case *LocalNetworkGatewaysDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
LocalNetworkGatewaysGet The Get LocalNetworkGateway operation retrieves information about the specified local network gateway through Network resource provider.
*/
func (a *Client) LocalNetworkGatewaysGet(params *LocalNetworkGatewaysGetParams, authInfo runtime.ClientAuthInfoWriter) (*LocalNetworkGatewaysGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocalNetworkGatewaysGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LocalNetworkGateways_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LocalNetworkGatewaysGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LocalNetworkGatewaysGetOK), nil

}

/*
LocalNetworkGatewaysList The List LocalNetworkGateways opertion retrieves all the local network gateways stored.
*/
func (a *Client) LocalNetworkGatewaysList(params *LocalNetworkGatewaysListParams, authInfo runtime.ClientAuthInfoWriter) (*LocalNetworkGatewaysListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocalNetworkGatewaysListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LocalNetworkGateways_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LocalNetworkGatewaysListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LocalNetworkGatewaysListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
