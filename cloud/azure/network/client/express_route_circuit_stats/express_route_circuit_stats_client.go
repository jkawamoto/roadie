package express_route_circuit_stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new express route circuit stats API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for express route circuit stats API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ExpressRouteCircuitsGetPeeringStats The Liststats ExpressRouteCircuit opertion retrieves all the stats from a ExpressRouteCircuits in a resource group.
*/
func (a *Client) ExpressRouteCircuitsGetPeeringStats(params *ExpressRouteCircuitsGetPeeringStatsParams, authInfo runtime.ClientAuthInfoWriter) (*ExpressRouteCircuitsGetPeeringStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpressRouteCircuitsGetPeeringStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExpressRouteCircuits_GetPeeringStats",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/stats",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExpressRouteCircuitsGetPeeringStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExpressRouteCircuitsGetPeeringStatsOK), nil

}

/*
ExpressRouteCircuitsGetStats The Liststats ExpressRouteCircuit opertion retrieves all the stats from a ExpressRouteCircuits in a resource group.
*/
func (a *Client) ExpressRouteCircuitsGetStats(params *ExpressRouteCircuitsGetStatsParams, authInfo runtime.ClientAuthInfoWriter) (*ExpressRouteCircuitsGetStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpressRouteCircuitsGetStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExpressRouteCircuits_GetStats",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/stats",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExpressRouteCircuitsGetStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExpressRouteCircuitsGetStatsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
