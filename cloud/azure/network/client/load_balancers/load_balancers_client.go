package load_balancers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new load balancers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for load balancers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
LoadBalancersCreateOrUpdate The Put LoadBalancer operation creates/updates a LoadBalancer
*/
func (a *Client) LoadBalancersCreateOrUpdate(params *LoadBalancersCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*LoadBalancersCreateOrUpdateOK, *LoadBalancersCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadBalancersCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadBalancers_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoadBalancersCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LoadBalancersCreateOrUpdateOK:
		return value, nil, nil
	case *LoadBalancersCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
LoadBalancersDelete The delete loadbalancer operation deletes the specified loadbalancer.
*/
func (a *Client) LoadBalancersDelete(params *LoadBalancersDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*LoadBalancersDeleteOK, *LoadBalancersDeleteAccepted, *LoadBalancersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadBalancersDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadBalancers_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoadBalancersDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *LoadBalancersDeleteOK:
		return value, nil, nil, nil
	case *LoadBalancersDeleteAccepted:
		return nil, value, nil, nil
	case *LoadBalancersDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
LoadBalancersGet The Get ntework interface operation retreives information about the specified network interface.
*/
func (a *Client) LoadBalancersGet(params *LoadBalancersGetParams, authInfo runtime.ClientAuthInfoWriter) (*LoadBalancersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadBalancersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadBalancers_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoadBalancersGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadBalancersGetOK), nil

}

/*
LoadBalancersList The List loadBalancer opertion retrieves all the loadbalancers in a resource group.
*/
func (a *Client) LoadBalancersList(params *LoadBalancersListParams, authInfo runtime.ClientAuthInfoWriter) (*LoadBalancersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadBalancersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadBalancers_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoadBalancersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadBalancersListOK), nil

}

/*
LoadBalancersListAll The List loadBalancer opertion retrieves all the loadbalancers in a subscription.
*/
func (a *Client) LoadBalancersListAll(params *LoadBalancersListAllParams, authInfo runtime.ClientAuthInfoWriter) (*LoadBalancersListAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadBalancersListAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoadBalancers_ListAll",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Network/loadBalancers",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoadBalancersListAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadBalancersListAllOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
