package virtual_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new virtual networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
VirtualNetworksCreateOrUpdate The Put VirtualNetwork operation creates/updates a virtual network in the specified resource group.
*/
func (a *Client) VirtualNetworksCreateOrUpdate(params *VirtualNetworksCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworksCreateOrUpdateOK, *VirtualNetworksCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworksCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworks_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworksCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VirtualNetworksCreateOrUpdateOK:
		return value, nil, nil
	case *VirtualNetworksCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
VirtualNetworksDelete The Delete VirtualNetwork operation deletes the specifed virtual network
*/
func (a *Client) VirtualNetworksDelete(params *VirtualNetworksDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworksDeleteOK, *VirtualNetworksDeleteAccepted, *VirtualNetworksDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworksDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworks_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworksDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *VirtualNetworksDeleteOK:
		return value, nil, nil, nil
	case *VirtualNetworksDeleteAccepted:
		return nil, value, nil, nil
	case *VirtualNetworksDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
VirtualNetworksGet The Get VirtualNetwork operation retrieves information about the specified virtual network.
*/
func (a *Client) VirtualNetworksGet(params *VirtualNetworksGetParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworksGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworks_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworksGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualNetworksGetOK), nil

}

/*
VirtualNetworksList The list VirtualNetwork returns all Virtual Networks in a resource group
*/
func (a *Client) VirtualNetworksList(params *VirtualNetworksListParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworksListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworksListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworks_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworksListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualNetworksListOK), nil

}

/*
VirtualNetworksListAll The list VirtualNetwork returns all Virtual Networks in a subscription
*/
func (a *Client) VirtualNetworksListAll(params *VirtualNetworksListAllParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworksListAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworksListAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworks_ListAll",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualNetworks",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworksListAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualNetworksListAllOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
