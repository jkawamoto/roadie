package network_security_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new network security groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network security groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
NetworkSecurityGroupsCreateOrUpdate The Put NetworkSecurityGroup operation creates/updates a network security groupin the specified resource group.
*/
func (a *Client) NetworkSecurityGroupsCreateOrUpdate(params *NetworkSecurityGroupsCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkSecurityGroupsCreateOrUpdateOK, *NetworkSecurityGroupsCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkSecurityGroupsCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkSecurityGroups_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NetworkSecurityGroupsCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *NetworkSecurityGroupsCreateOrUpdateOK:
		return value, nil, nil
	case *NetworkSecurityGroupsCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
NetworkSecurityGroupsDelete The Delete NetworkSecurityGroup operation deletes the specifed network security group
*/
func (a *Client) NetworkSecurityGroupsDelete(params *NetworkSecurityGroupsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkSecurityGroupsDeleteOK, *NetworkSecurityGroupsDeleteAccepted, *NetworkSecurityGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkSecurityGroupsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkSecurityGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NetworkSecurityGroupsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *NetworkSecurityGroupsDeleteOK:
		return value, nil, nil, nil
	case *NetworkSecurityGroupsDeleteAccepted:
		return nil, value, nil, nil
	case *NetworkSecurityGroupsDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
NetworkSecurityGroupsGet The Get NetworkSecurityGroups operation retrieves information about the specified network security group.
*/
func (a *Client) NetworkSecurityGroupsGet(params *NetworkSecurityGroupsGetParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkSecurityGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkSecurityGroupsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkSecurityGroups_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NetworkSecurityGroupsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NetworkSecurityGroupsGetOK), nil

}

/*
NetworkSecurityGroupsList The list NetworkSecurityGroups returns all network security groups in a resource group
*/
func (a *Client) NetworkSecurityGroupsList(params *NetworkSecurityGroupsListParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkSecurityGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkSecurityGroupsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkSecurityGroups_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NetworkSecurityGroupsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NetworkSecurityGroupsListOK), nil

}

/*
NetworkSecurityGroupsListAll The list NetworkSecurityGroups returns all network security groups in a subscription
*/
func (a *Client) NetworkSecurityGroupsListAll(params *NetworkSecurityGroupsListAllParams, authInfo runtime.ClientAuthInfoWriter) (*NetworkSecurityGroupsListAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkSecurityGroupsListAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkSecurityGroups_ListAll",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Network/networkSecurityGroups",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NetworkSecurityGroupsListAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NetworkSecurityGroupsListAllOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
