package security_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new security rules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for security rules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SecurityRulesCreateOrUpdate The Put network security rule operation creates/updates a security rule in the specified network security group
*/
func (a *Client) SecurityRulesCreateOrUpdate(params *SecurityRulesCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SecurityRulesCreateOrUpdateOK, *SecurityRulesCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityRulesCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SecurityRules_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityRulesCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SecurityRulesCreateOrUpdateOK:
		return value, nil, nil
	case *SecurityRulesCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SecurityRulesDelete The delete network security rule operation deletes the specified network security rule.
*/
func (a *Client) SecurityRulesDelete(params *SecurityRulesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*SecurityRulesDeleteOK, *SecurityRulesDeleteAccepted, *SecurityRulesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityRulesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SecurityRules_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityRulesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *SecurityRulesDeleteOK:
		return value, nil, nil, nil
	case *SecurityRulesDeleteAccepted:
		return nil, value, nil, nil
	case *SecurityRulesDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
SecurityRulesGet The Get NetworkSecurityRule operation retreives information about the specified network security rule.
*/
func (a *Client) SecurityRulesGet(params *SecurityRulesGetParams, authInfo runtime.ClientAuthInfoWriter) (*SecurityRulesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityRulesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SecurityRules_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityRulesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SecurityRulesGetOK), nil

}

/*
SecurityRulesList The List network security rule opertion retrieves all the security rules in a network security group.
*/
func (a *Client) SecurityRulesList(params *SecurityRulesListParams, authInfo runtime.ClientAuthInfoWriter) (*SecurityRulesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityRulesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SecurityRules_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityRulesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SecurityRulesListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
