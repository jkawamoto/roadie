package virtual_network_gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new virtual network gateways API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual network gateways API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
VirtualNetworkGatewaysCreateOrUpdate The Put VirtualNetworkGateway operation creates/updates a virtual network gateway in the specified resource group through Network resource provider.
*/
func (a *Client) VirtualNetworkGatewaysCreateOrUpdate(params *VirtualNetworkGatewaysCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworkGatewaysCreateOrUpdateOK, *VirtualNetworkGatewaysCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkGatewaysCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworkGateways_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworkGatewaysCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VirtualNetworkGatewaysCreateOrUpdateOK:
		return value, nil, nil
	case *VirtualNetworkGatewaysCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
VirtualNetworkGatewaysDelete The Delete VirtualNetworkGateway operation deletes the specifed virtual network Gateway through Network resource provider.
*/
func (a *Client) VirtualNetworkGatewaysDelete(params *VirtualNetworkGatewaysDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworkGatewaysDeleteOK, *VirtualNetworkGatewaysDeleteAccepted, *VirtualNetworkGatewaysDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkGatewaysDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworkGateways_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworkGatewaysDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *VirtualNetworkGatewaysDeleteOK:
		return value, nil, nil, nil
	case *VirtualNetworkGatewaysDeleteAccepted:
		return nil, value, nil, nil
	case *VirtualNetworkGatewaysDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
VirtualNetworkGatewaysGeneratevpnclientpackage The Generatevpnclientpackage operation generates Vpn client package for P2S client of the virtual network gateway in the specified resource group through Network resource provider.
*/
func (a *Client) VirtualNetworkGatewaysGeneratevpnclientpackage(params *VirtualNetworkGatewaysGeneratevpnclientpackageParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworkGatewaysGeneratevpnclientpackageAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkGatewaysGeneratevpnclientpackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworkGateways_Generatevpnclientpackage",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/generatevpnclientpackage",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworkGatewaysGeneratevpnclientpackageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualNetworkGatewaysGeneratevpnclientpackageAccepted), nil

}

/*
VirtualNetworkGatewaysGet The Get VirtualNetworkGateway operation retrieves information about the specified virtual network gateway through Network resource provider.
*/
func (a *Client) VirtualNetworkGatewaysGet(params *VirtualNetworkGatewaysGetParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworkGatewaysGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkGatewaysGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworkGateways_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworkGatewaysGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualNetworkGatewaysGetOK), nil

}

/*
VirtualNetworkGatewaysList The List VirtualNetworkGateways opertion retrieves all the virtual network gateways stored.
*/
func (a *Client) VirtualNetworkGatewaysList(params *VirtualNetworkGatewaysListParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworkGatewaysListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkGatewaysListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworkGateways_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworkGatewaysListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualNetworkGatewaysListOK), nil

}

/*
VirtualNetworkGatewaysReset The Reset VirtualNetworkGateway operation resets the primary of the virtual network gateway in the specified resource group through Network resource provider.
*/
func (a *Client) VirtualNetworkGatewaysReset(params *VirtualNetworkGatewaysResetParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualNetworkGatewaysResetOK, *VirtualNetworkGatewaysResetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualNetworkGatewaysResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualNetworkGateways_Reset",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/reset",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualNetworkGatewaysResetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VirtualNetworkGatewaysResetOK:
		return value, nil, nil
	case *VirtualNetworkGatewaysResetAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
