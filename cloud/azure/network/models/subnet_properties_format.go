package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// SubnetPropertiesFormat subnet properties format
// swagger:model SubnetPropertiesFormat
type SubnetPropertiesFormat struct {

	// Gets or sets Address prefix for the subnet.
	AddressPrefix string `json:"addressPrefix,omitempty"`

	// Gets array of references to the network interface IP configurations using subnet
	IPConfigurations []*IPConfiguration `json:"ipConfigurations"`

	// Gets or sets the reference of the NetworkSecurityGroup resource
	NetworkSecurityGroup *NetworkSecurityGroup `json:"networkSecurityGroup,omitempty"`

	// Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`

	// Gets or sets the reference of the RouteTable resource
	RouteTable *RouteTable `json:"routeTable,omitempty"`
}

// Validate validates this subnet properties format
func (m *SubnetPropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPConfigurations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkSecurityGroup(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRouteTable(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubnetPropertiesFormat) validateIPConfigurations(formats strfmt.Registry) error {

	if swag.IsZero(m.IPConfigurations) { // not required
		return nil
	}

	for i := 0; i < len(m.IPConfigurations); i++ {

		if swag.IsZero(m.IPConfigurations[i]) { // not required
			continue
		}

		if m.IPConfigurations[i] != nil {

			if err := m.IPConfigurations[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SubnetPropertiesFormat) validateNetworkSecurityGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkSecurityGroup) { // not required
		return nil
	}

	if m.NetworkSecurityGroup != nil {

		if err := m.NetworkSecurityGroup.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *SubnetPropertiesFormat) validateRouteTable(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteTable) { // not required
		return nil
	}

	if m.RouteTable != nil {

		if err := m.RouteTable.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
