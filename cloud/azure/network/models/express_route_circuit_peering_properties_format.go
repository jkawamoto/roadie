package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ExpressRouteCircuitPeeringPropertiesFormat express route circuit peering properties format
// swagger:model ExpressRouteCircuitPeeringPropertiesFormat
type ExpressRouteCircuitPeeringPropertiesFormat struct {

	// Gets or sets the azure ASN
	AzureASN int32 `json:"azureASN,omitempty"`

	// Gets or sets the mircosoft peering config
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringConfig `json:"microsoftPeeringConfig,omitempty"`

	// Gets or sets the peer ASN
	PeerASN int32 `json:"peerASN,omitempty"`

	// Gets or sets PeeringType
	PeeringType string `json:"peeringType,omitempty"`

	// Gets or sets the primary port
	PrimaryAzurePort string `json:"primaryAzurePort,omitempty"`

	// Gets or sets the primary address prefix
	PrimaryPeerAddressPrefix string `json:"primaryPeerAddressPrefix,omitempty"`

	// Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`

	// Gets or sets the secondary port
	SecondaryAzurePort string `json:"secondaryAzurePort,omitempty"`

	// Gets or sets the secondary address prefix
	SecondaryPeerAddressPrefix string `json:"secondaryPeerAddressPrefix,omitempty"`

	// Gets or sets the shared key
	SharedKey string `json:"sharedKey,omitempty"`

	// Gets or sets state of Peering
	State string `json:"state,omitempty"`

	// Gets or peering stats
	Stats *ExpressRouteCircuitStats `json:"stats,omitempty"`

	// Gets or sets the vlan id
	VlanID int32 `json:"vlanId,omitempty"`
}

// Validate validates this express route circuit peering properties format
func (m *ExpressRouteCircuitPeeringPropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMicrosoftPeeringConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeeringType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExpressRouteCircuitPeeringPropertiesFormat) validateMicrosoftPeeringConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.MicrosoftPeeringConfig) { // not required
		return nil
	}

	if m.MicrosoftPeeringConfig != nil {

		if err := m.MicrosoftPeeringConfig.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var expressRouteCircuitPeeringPropertiesFormatTypePeeringTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AzurePublicPeering","AzurePrivatePeering","MicrosoftPeering"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		expressRouteCircuitPeeringPropertiesFormatTypePeeringTypePropEnum = append(expressRouteCircuitPeeringPropertiesFormatTypePeeringTypePropEnum, v)
	}
}

const (
	// ExpressRouteCircuitPeeringPropertiesFormatPeeringTypeAzurePublicPeering captures enum value "AzurePublicPeering"
	ExpressRouteCircuitPeeringPropertiesFormatPeeringTypeAzurePublicPeering string = "AzurePublicPeering"
	// ExpressRouteCircuitPeeringPropertiesFormatPeeringTypeAzurePrivatePeering captures enum value "AzurePrivatePeering"
	ExpressRouteCircuitPeeringPropertiesFormatPeeringTypeAzurePrivatePeering string = "AzurePrivatePeering"
	// ExpressRouteCircuitPeeringPropertiesFormatPeeringTypeMicrosoftPeering captures enum value "MicrosoftPeering"
	ExpressRouteCircuitPeeringPropertiesFormatPeeringTypeMicrosoftPeering string = "MicrosoftPeering"
)

// prop value enum
func (m *ExpressRouteCircuitPeeringPropertiesFormat) validatePeeringTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, expressRouteCircuitPeeringPropertiesFormatTypePeeringTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExpressRouteCircuitPeeringPropertiesFormat) validatePeeringType(formats strfmt.Registry) error {

	if swag.IsZero(m.PeeringType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePeeringTypeEnum("peeringType", "body", m.PeeringType); err != nil {
		return err
	}

	return nil
}

var expressRouteCircuitPeeringPropertiesFormatTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Disabled","Enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		expressRouteCircuitPeeringPropertiesFormatTypeStatePropEnum = append(expressRouteCircuitPeeringPropertiesFormatTypeStatePropEnum, v)
	}
}

const (
	// ExpressRouteCircuitPeeringPropertiesFormatStateDisabled captures enum value "Disabled"
	ExpressRouteCircuitPeeringPropertiesFormatStateDisabled string = "Disabled"
	// ExpressRouteCircuitPeeringPropertiesFormatStateEnabled captures enum value "Enabled"
	ExpressRouteCircuitPeeringPropertiesFormatStateEnabled string = "Enabled"
)

// prop value enum
func (m *ExpressRouteCircuitPeeringPropertiesFormat) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, expressRouteCircuitPeeringPropertiesFormatTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExpressRouteCircuitPeeringPropertiesFormat) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *ExpressRouteCircuitPeeringPropertiesFormat) validateStats(formats strfmt.Registry) error {

	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {

		if err := m.Stats.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
