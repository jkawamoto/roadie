package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PublicIPAddressPropertiesFormat PublicIpAddress properties
// swagger:model PublicIPAddressPropertiesFormat
type PublicIPAddressPropertiesFormat struct {

	// Gets or sets FQDN of the DNS record associated with the public IP address
	DNSSettings *PublicIPAddressDNSSettings `json:"dnsSettings,omitempty"`

	// Gets or sets the Idletimeout of the public IP address
	IDLETimeoutInMinutes int32 `json:"idleTimeoutInMinutes,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// ip configuration
	IPConfiguration *IPConfiguration `json:"ipConfiguration,omitempty"`

	// Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`

	// Gets or sets PublicIP address version (IPv4/IPv6)
	PublicIPAddressVersion string `json:"publicIPAddressVersion,omitempty"`

	// Gets or sets PublicIP allocation method (Static/Dynamic)
	PublicIPAllocationMethod string `json:"publicIPAllocationMethod,omitempty"`

	// Gets or sets resource guid property of the PublicIP resource
	ResourceGUID string `json:"resourceGuid,omitempty"`
}

// Validate validates this public IP address properties format
func (m *PublicIPAddressPropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNSSettings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPConfiguration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicIPAddressVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicIPAllocationMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicIPAddressPropertiesFormat) validateDNSSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSSettings) { // not required
		return nil
	}

	if m.DNSSettings != nil {

		if err := m.DNSSettings.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PublicIPAddressPropertiesFormat) validateIPConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.IPConfiguration) { // not required
		return nil
	}

	if m.IPConfiguration != nil {

		if err := m.IPConfiguration.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var publicIpAddressPropertiesFormatTypePublicIPAddressVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IPv4","IPv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicIpAddressPropertiesFormatTypePublicIPAddressVersionPropEnum = append(publicIpAddressPropertiesFormatTypePublicIPAddressVersionPropEnum, v)
	}
}

const (
	// PublicIPAddressPropertiesFormatPublicIPAddressVersionIPV4 captures enum value "IPv4"
	PublicIPAddressPropertiesFormatPublicIPAddressVersionIPV4 string = "IPv4"
	// PublicIPAddressPropertiesFormatPublicIPAddressVersionIPV6 captures enum value "IPv6"
	PublicIPAddressPropertiesFormatPublicIPAddressVersionIPV6 string = "IPv6"
)

// prop value enum
func (m *PublicIPAddressPropertiesFormat) validatePublicIPAddressVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, publicIpAddressPropertiesFormatTypePublicIPAddressVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PublicIPAddressPropertiesFormat) validatePublicIPAddressVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicIPAddressVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validatePublicIPAddressVersionEnum("publicIPAddressVersion", "body", m.PublicIPAddressVersion); err != nil {
		return err
	}

	return nil
}

var publicIpAddressPropertiesFormatTypePublicIPAllocationMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Static","Dynamic"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicIpAddressPropertiesFormatTypePublicIPAllocationMethodPropEnum = append(publicIpAddressPropertiesFormatTypePublicIPAllocationMethodPropEnum, v)
	}
}

const (
	// PublicIPAddressPropertiesFormatPublicIPAllocationMethodStatic captures enum value "Static"
	PublicIPAddressPropertiesFormatPublicIPAllocationMethodStatic string = "Static"
	// PublicIPAddressPropertiesFormatPublicIPAllocationMethodDynamic captures enum value "Dynamic"
	PublicIPAddressPropertiesFormatPublicIPAllocationMethodDynamic string = "Dynamic"
)

// prop value enum
func (m *PublicIPAddressPropertiesFormat) validatePublicIPAllocationMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, publicIpAddressPropertiesFormatTypePublicIPAllocationMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PublicIPAddressPropertiesFormat) validatePublicIPAllocationMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicIPAllocationMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validatePublicIPAllocationMethodEnum("publicIPAllocationMethod", "body", m.PublicIPAllocationMethod); err != nil {
		return err
	}

	return nil
}
