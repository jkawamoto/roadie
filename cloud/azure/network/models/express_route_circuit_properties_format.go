package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ExpressRouteCircuitPropertiesFormat Properties of ExpressRouteCircuit
// swagger:model ExpressRouteCircuitPropertiesFormat
type ExpressRouteCircuitPropertiesFormat struct {

	// allow classic operations
	AllowClassicOperations bool `json:"allowClassicOperations,omitempty"`

	// Gets or sets list of authorizations
	Authorizations []*ExpressRouteCircuitAuthorization `json:"authorizations"`

	// Gets or sets CircuitProvisioningState state of the resource
	CircuitProvisioningState string `json:"circuitProvisioningState,omitempty"`

	// Gets or sets list of peerings
	Peerings []*ExpressRouteCircuitPeering `json:"peerings"`

	// Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`

	// Gets or sets ServiceKey
	ServiceKey string `json:"serviceKey,omitempty"`

	// Gets or sets ServiceProviderNotes
	ServiceProviderNotes string `json:"serviceProviderNotes,omitempty"`

	// Gets or sets ServiceProviderProperties
	ServiceProviderProperties *ExpressRouteCircuitServiceProviderProperties `json:"serviceProviderProperties,omitempty"`

	// Gets or sets ServiceProviderProvisioningState state of the resource
	ServiceProviderProvisioningState string `json:"serviceProviderProvisioningState,omitempty"`
}

// Validate validates this express route circuit properties format
func (m *ExpressRouteCircuitPropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeerings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceProviderProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceProviderProvisioningState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExpressRouteCircuitPropertiesFormat) validateAuthorizations(formats strfmt.Registry) error {

	if swag.IsZero(m.Authorizations) { // not required
		return nil
	}

	for i := 0; i < len(m.Authorizations); i++ {

		if swag.IsZero(m.Authorizations[i]) { // not required
			continue
		}

		if m.Authorizations[i] != nil {

			if err := m.Authorizations[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ExpressRouteCircuitPropertiesFormat) validatePeerings(formats strfmt.Registry) error {

	if swag.IsZero(m.Peerings) { // not required
		return nil
	}

	for i := 0; i < len(m.Peerings); i++ {

		if swag.IsZero(m.Peerings[i]) { // not required
			continue
		}

		if m.Peerings[i] != nil {

			if err := m.Peerings[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ExpressRouteCircuitPropertiesFormat) validateServiceProviderProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceProviderProperties) { // not required
		return nil
	}

	if m.ServiceProviderProperties != nil {

		if err := m.ServiceProviderProperties.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var expressRouteCircuitPropertiesFormatTypeServiceProviderProvisioningStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotProvisioned","Provisioning","Provisioned","Deprovisioning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		expressRouteCircuitPropertiesFormatTypeServiceProviderProvisioningStatePropEnum = append(expressRouteCircuitPropertiesFormatTypeServiceProviderProvisioningStatePropEnum, v)
	}
}

const (
	// ExpressRouteCircuitPropertiesFormatServiceProviderProvisioningStateNotProvisioned captures enum value "NotProvisioned"
	ExpressRouteCircuitPropertiesFormatServiceProviderProvisioningStateNotProvisioned string = "NotProvisioned"
	// ExpressRouteCircuitPropertiesFormatServiceProviderProvisioningStateProvisioning captures enum value "Provisioning"
	ExpressRouteCircuitPropertiesFormatServiceProviderProvisioningStateProvisioning string = "Provisioning"
	// ExpressRouteCircuitPropertiesFormatServiceProviderProvisioningStateProvisioned captures enum value "Provisioned"
	ExpressRouteCircuitPropertiesFormatServiceProviderProvisioningStateProvisioned string = "Provisioned"
	// ExpressRouteCircuitPropertiesFormatServiceProviderProvisioningStateDeprovisioning captures enum value "Deprovisioning"
	ExpressRouteCircuitPropertiesFormatServiceProviderProvisioningStateDeprovisioning string = "Deprovisioning"
)

// prop value enum
func (m *ExpressRouteCircuitPropertiesFormat) validateServiceProviderProvisioningStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, expressRouteCircuitPropertiesFormatTypeServiceProviderProvisioningStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExpressRouteCircuitPropertiesFormat) validateServiceProviderProvisioningState(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceProviderProvisioningState) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceProviderProvisioningStateEnum("serviceProviderProvisioningState", "body", m.ServiceProviderProvisioningState); err != nil {
		return err
	}

	return nil
}
