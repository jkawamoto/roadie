package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// NetworkSecurityGroupPropertiesFormat Network Security Group resource
// swagger:model NetworkSecurityGroupPropertiesFormat
type NetworkSecurityGroupPropertiesFormat struct {

	// Gets or sets Default security rules of network security group
	DefaultSecurityRules []*SecurityRule `json:"defaultSecurityRules"`

	// Gets collection of references to Network Interfaces
	NetworkInterfaces []*NetworkInterface `json:"networkInterfaces"`

	// Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`

	// Gets or sets resource guid property of the network security group resource
	ResourceGUID string `json:"resourceGuid,omitempty"`

	// Gets or sets Security rules of network security group
	SecurityRules []*SecurityRule `json:"securityRules"`

	// Gets collection of references to subnets
	Subnets []*Subnet `json:"subnets"`
}

// Validate validates this network security group properties format
func (m *NetworkSecurityGroupPropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultSecurityRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkInterfaces(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSecurityRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkSecurityGroupPropertiesFormat) validateDefaultSecurityRules(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultSecurityRules) { // not required
		return nil
	}

	for i := 0; i < len(m.DefaultSecurityRules); i++ {

		if swag.IsZero(m.DefaultSecurityRules[i]) { // not required
			continue
		}

		if m.DefaultSecurityRules[i] != nil {

			if err := m.DefaultSecurityRules[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *NetworkSecurityGroupPropertiesFormat) validateNetworkInterfaces(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkInterfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkInterfaces); i++ {

		if swag.IsZero(m.NetworkInterfaces[i]) { // not required
			continue
		}

		if m.NetworkInterfaces[i] != nil {

			if err := m.NetworkInterfaces[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *NetworkSecurityGroupPropertiesFormat) validateSecurityRules(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityRules) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityRules); i++ {

		if swag.IsZero(m.SecurityRules[i]) { // not required
			continue
		}

		if m.SecurityRules[i] != nil {

			if err := m.SecurityRules[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *NetworkSecurityGroupPropertiesFormat) validateSubnets(formats strfmt.Registry) error {

	if swag.IsZero(m.Subnets) { // not required
		return nil
	}

	for i := 0; i < len(m.Subnets); i++ {

		if swag.IsZero(m.Subnets[i]) { // not required
			continue
		}

		if m.Subnets[i] != nil {

			if err := m.Subnets[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
