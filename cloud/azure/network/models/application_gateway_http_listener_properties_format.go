package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ApplicationGatewayHTTPListenerPropertiesFormat Properties of Http listener of application gateway
// swagger:model ApplicationGatewayHttpListenerPropertiesFormat
type ApplicationGatewayHTTPListenerPropertiesFormat struct {

	// Gets or sets frontend IP configuration resource of application gateway
	FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`

	// Gets or sets frontend port resource of application gateway
	FrontendPort *SubResource `json:"frontendPort,omitempty"`

	// Gets or sets the host name of http listener
	HostName string `json:"hostName,omitempty"`

	// Gets or sets the protocol
	Protocol string `json:"protocol,omitempty"`

	// Gets or sets Provisioning state of the http listener resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`

	// Gets or sets the requireServerNameIndication of http listener
	RequireServerNameIndication bool `json:"requireServerNameIndication,omitempty"`

	// Gets or sets ssl certificate resource of application gateway
	SslCertificate *SubResource `json:"sslCertificate,omitempty"`
}

// Validate validates this application gateway Http listener properties format
func (m *ApplicationGatewayHTTPListenerPropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrontendIPConfiguration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFrontendPort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSslCertificate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationGatewayHTTPListenerPropertiesFormat) validateFrontendIPConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.FrontendIPConfiguration) { // not required
		return nil
	}

	if m.FrontendIPConfiguration != nil {

		if err := m.FrontendIPConfiguration.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ApplicationGatewayHTTPListenerPropertiesFormat) validateFrontendPort(formats strfmt.Registry) error {

	if swag.IsZero(m.FrontendPort) { // not required
		return nil
	}

	if m.FrontendPort != nil {

		if err := m.FrontendPort.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var applicationGatewayHttpListenerPropertiesFormatTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Http","Https"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationGatewayHttpListenerPropertiesFormatTypeProtocolPropEnum = append(applicationGatewayHttpListenerPropertiesFormatTypeProtocolPropEnum, v)
	}
}

const (
	// ApplicationGatewayHTTPListenerPropertiesFormatProtocolHTTP captures enum value "Http"
	ApplicationGatewayHTTPListenerPropertiesFormatProtocolHTTP string = "Http"
	// ApplicationGatewayHTTPListenerPropertiesFormatProtocolHTTPS captures enum value "Https"
	ApplicationGatewayHTTPListenerPropertiesFormatProtocolHTTPS string = "Https"
)

// prop value enum
func (m *ApplicationGatewayHTTPListenerPropertiesFormat) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, applicationGatewayHttpListenerPropertiesFormatTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationGatewayHTTPListenerPropertiesFormat) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationGatewayHTTPListenerPropertiesFormat) validateSslCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.SslCertificate) { // not required
		return nil
	}

	if m.SslCertificate != nil {

		if err := m.SslCertificate.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
