package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ApplicationGatewayFrontendIPConfigurationPropertiesFormat Properties of Frontend IP configuration of application gateway
// swagger:model ApplicationGatewayFrontendIPConfigurationPropertiesFormat
type ApplicationGatewayFrontendIPConfigurationPropertiesFormat struct {

	// Gets or sets the privateIPAddress of the Network Interface IP Configuration
	PrivateIPAddress string `json:"privateIPAddress,omitempty"`

	// Gets or sets PrivateIP allocation method (Static/Dynamic)
	PrivateIPAllocationMethod string `json:"privateIPAllocationMethod,omitempty"`

	// Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`

	// Gets or sets the reference of the PublicIP resource
	PublicIPAddress *SubResource `json:"publicIPAddress,omitempty"`

	// Gets or sets the reference of the subnet resource
	Subnet *SubResource `json:"subnet,omitempty"`
}

// Validate validates this application gateway frontend IP configuration properties format
func (m *ApplicationGatewayFrontendIPConfigurationPropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrivateIPAllocationMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicIPAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var applicationGatewayFrontendIpConfigurationPropertiesFormatTypePrivateIPAllocationMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Static","Dynamic"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationGatewayFrontendIpConfigurationPropertiesFormatTypePrivateIPAllocationMethodPropEnum = append(applicationGatewayFrontendIpConfigurationPropertiesFormatTypePrivateIPAllocationMethodPropEnum, v)
	}
}

const (
	// ApplicationGatewayFrontendIPConfigurationPropertiesFormatPrivateIPAllocationMethodStatic captures enum value "Static"
	ApplicationGatewayFrontendIPConfigurationPropertiesFormatPrivateIPAllocationMethodStatic string = "Static"
	// ApplicationGatewayFrontendIPConfigurationPropertiesFormatPrivateIPAllocationMethodDynamic captures enum value "Dynamic"
	ApplicationGatewayFrontendIPConfigurationPropertiesFormatPrivateIPAllocationMethodDynamic string = "Dynamic"
)

// prop value enum
func (m *ApplicationGatewayFrontendIPConfigurationPropertiesFormat) validatePrivateIPAllocationMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, applicationGatewayFrontendIpConfigurationPropertiesFormatTypePrivateIPAllocationMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationGatewayFrontendIPConfigurationPropertiesFormat) validatePrivateIPAllocationMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateIPAllocationMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrivateIPAllocationMethodEnum("privateIPAllocationMethod", "body", m.PrivateIPAllocationMethod); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationGatewayFrontendIPConfigurationPropertiesFormat) validatePublicIPAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicIPAddress) { // not required
		return nil
	}

	if m.PublicIPAddress != nil {

		if err := m.PublicIPAddress.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ApplicationGatewayFrontendIPConfigurationPropertiesFormat) validateSubnet(formats strfmt.Registry) error {

	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	if m.Subnet != nil {

		if err := m.Subnet.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
