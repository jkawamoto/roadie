package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// AzureAsyncOperationResult The response body contains the status of the specified asynchronous operation, indicating whether it has succeeded, is inprogress, or has failed. Note that this status is distinct from the HTTP status code returned for the Get Operation Status operation itself. If the asynchronous operation succeeded, the response body includes the HTTP status code for the successful request. If the asynchronous operation failed, the response body includes the HTTP status code for the failed request and error information regarding the failure.
// swagger:model AzureAsyncOperationResult
type AzureAsyncOperationResult struct {

	// error
	Error *Error `json:"error,omitempty"`

	// Status of the AzureAsuncOperation
	Status string `json:"status,omitempty"`
}

// Validate validates this azure async operation result
func (m *AzureAsyncOperationResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureAsyncOperationResult) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {

		if err := m.Error.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var azureAsyncOperationResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InProgress","Succeeded","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureAsyncOperationResultTypeStatusPropEnum = append(azureAsyncOperationResultTypeStatusPropEnum, v)
	}
}

const (
	// AzureAsyncOperationResultStatusInProgress captures enum value "InProgress"
	AzureAsyncOperationResultStatusInProgress string = "InProgress"
	// AzureAsyncOperationResultStatusSucceeded captures enum value "Succeeded"
	AzureAsyncOperationResultStatusSucceeded string = "Succeeded"
	// AzureAsyncOperationResultStatusFailed captures enum value "Failed"
	AzureAsyncOperationResultStatusFailed string = "Failed"
)

// prop value enum
func (m *AzureAsyncOperationResult) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, azureAsyncOperationResultTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AzureAsyncOperationResult) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}
