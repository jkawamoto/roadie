package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// ApplicationGatewayPathRulePropertiesFormat Properties of probe of application gateway
// swagger:model ApplicationGatewayPathRulePropertiesFormat
type ApplicationGatewayPathRulePropertiesFormat struct {

	// Gets or sets backend address pool resource of URL path map
	BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`

	// Gets or sets backend http settings resource of URL path map
	BackendHTTPSettings *SubResource `json:"backendHttpSettings,omitempty"`

	// Gets or sets the path rules of URL path map
	Paths []string `json:"paths"`

	// Gets or sets path rule of URL path map resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`
}

// Validate validates this application gateway path rule properties format
func (m *ApplicationGatewayPathRulePropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackendAddressPool(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBackendHTTPSettings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePaths(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationGatewayPathRulePropertiesFormat) validateBackendAddressPool(formats strfmt.Registry) error {

	if swag.IsZero(m.BackendAddressPool) { // not required
		return nil
	}

	if m.BackendAddressPool != nil {

		if err := m.BackendAddressPool.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ApplicationGatewayPathRulePropertiesFormat) validateBackendHTTPSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.BackendHTTPSettings) { // not required
		return nil
	}

	if m.BackendHTTPSettings != nil {

		if err := m.BackendHTTPSettings.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ApplicationGatewayPathRulePropertiesFormat) validatePaths(formats strfmt.Registry) error {

	if swag.IsZero(m.Paths) { // not required
		return nil
	}

	return nil
}
