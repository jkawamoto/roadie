package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// VirtualNetworkGatewayPropertiesFormat VirtualNeworkGateay properties
// swagger:model VirtualNetworkGatewayPropertiesFormat
type VirtualNetworkGatewayPropertiesFormat struct {

	// Virtual network gateway's BGP speaker settings
	BgpSettings *BgpSettings `json:"bgpSettings,omitempty"`

	// EnableBgp Flag
	EnableBgp bool `json:"enableBgp,omitempty"`

	// Gets or sets the reference of the LocalNetworkGateway resource which represents Local network site having default routes. Assign Null value in case of removing existing default site setting.
	GatewayDefaultSite *SubResource `json:"gatewayDefaultSite,omitempty"`

	// The type of this virtual network gateway.
	GatewayType string `json:"gatewayType,omitempty"`

	// IpConfigurations for Virtual network gateway.
	IPConfigurations []*VirtualNetworkGatewayIPConfiguration `json:"ipConfigurations"`

	// Gets or sets Provisioning state of the VirtualNetworkGateway resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`

	// Gets or sets resource guid property of the VirtualNetworkGateway resource
	ResourceGUID string `json:"resourceGuid,omitempty"`

	// Gets or sets the reference of the VirtualNetworkGatewaySku resource which represents the sku selected for Virtual network gateway.
	Sku *VirtualNetworkGatewaySku `json:"sku,omitempty"`

	// Gets or sets the reference of the VpnClientConfiguration resource which represents the P2S VpnClient configurations.
	VpnClientConfiguration *VpnClientConfiguration `json:"vpnClientConfiguration,omitempty"`

	// The type of this virtual network gateway.
	VpnType string `json:"vpnType,omitempty"`
}

// Validate validates this virtual network gateway properties format
func (m *VirtualNetworkGatewayPropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBgpSettings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGatewayDefaultSite(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGatewayType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPConfigurations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSku(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVpnClientConfiguration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVpnType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualNetworkGatewayPropertiesFormat) validateBgpSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.BgpSettings) { // not required
		return nil
	}

	if m.BgpSettings != nil {

		if err := m.BgpSettings.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VirtualNetworkGatewayPropertiesFormat) validateGatewayDefaultSite(formats strfmt.Registry) error {

	if swag.IsZero(m.GatewayDefaultSite) { // not required
		return nil
	}

	if m.GatewayDefaultSite != nil {

		if err := m.GatewayDefaultSite.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var virtualNetworkGatewayPropertiesFormatTypeGatewayTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Vpn","ExpressRoute"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualNetworkGatewayPropertiesFormatTypeGatewayTypePropEnum = append(virtualNetworkGatewayPropertiesFormatTypeGatewayTypePropEnum, v)
	}
}

const (
	// VirtualNetworkGatewayPropertiesFormatGatewayTypeVpn captures enum value "Vpn"
	VirtualNetworkGatewayPropertiesFormatGatewayTypeVpn string = "Vpn"
	// VirtualNetworkGatewayPropertiesFormatGatewayTypeExpressRoute captures enum value "ExpressRoute"
	VirtualNetworkGatewayPropertiesFormatGatewayTypeExpressRoute string = "ExpressRoute"
)

// prop value enum
func (m *VirtualNetworkGatewayPropertiesFormat) validateGatewayTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualNetworkGatewayPropertiesFormatTypeGatewayTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualNetworkGatewayPropertiesFormat) validateGatewayType(formats strfmt.Registry) error {

	if swag.IsZero(m.GatewayType) { // not required
		return nil
	}

	// value enum
	if err := m.validateGatewayTypeEnum("gatewayType", "body", m.GatewayType); err != nil {
		return err
	}

	return nil
}

func (m *VirtualNetworkGatewayPropertiesFormat) validateIPConfigurations(formats strfmt.Registry) error {

	if swag.IsZero(m.IPConfigurations) { // not required
		return nil
	}

	for i := 0; i < len(m.IPConfigurations); i++ {

		if swag.IsZero(m.IPConfigurations[i]) { // not required
			continue
		}

		if m.IPConfigurations[i] != nil {

			if err := m.IPConfigurations[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *VirtualNetworkGatewayPropertiesFormat) validateSku(formats strfmt.Registry) error {

	if swag.IsZero(m.Sku) { // not required
		return nil
	}

	if m.Sku != nil {

		if err := m.Sku.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VirtualNetworkGatewayPropertiesFormat) validateVpnClientConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.VpnClientConfiguration) { // not required
		return nil
	}

	if m.VpnClientConfiguration != nil {

		if err := m.VpnClientConfiguration.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var virtualNetworkGatewayPropertiesFormatTypeVpnTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PolicyBased","RouteBased"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualNetworkGatewayPropertiesFormatTypeVpnTypePropEnum = append(virtualNetworkGatewayPropertiesFormatTypeVpnTypePropEnum, v)
	}
}

const (
	// VirtualNetworkGatewayPropertiesFormatVpnTypePolicyBased captures enum value "PolicyBased"
	VirtualNetworkGatewayPropertiesFormatVpnTypePolicyBased string = "PolicyBased"
	// VirtualNetworkGatewayPropertiesFormatVpnTypeRouteBased captures enum value "RouteBased"
	VirtualNetworkGatewayPropertiesFormatVpnTypeRouteBased string = "RouteBased"
)

// prop value enum
func (m *VirtualNetworkGatewayPropertiesFormat) validateVpnTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualNetworkGatewayPropertiesFormatTypeVpnTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualNetworkGatewayPropertiesFormat) validateVpnType(formats strfmt.Registry) error {

	if swag.IsZero(m.VpnType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVpnTypeEnum("vpnType", "body", m.VpnType); err != nil {
		return err
	}

	return nil
}
