package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// RouteTablePropertiesFormat Route Table resource
// swagger:model RouteTablePropertiesFormat
type RouteTablePropertiesFormat struct {

	// Gets or sets Provisioning state of the resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`

	// Gets or sets Routes in a Route Table
	Routes []*Route `json:"routes"`

	// Gets collection of references to subnets
	Subnets []*Subnet `json:"subnets"`
}

// Validate validates this route table properties format
func (m *RouteTablePropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoutes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouteTablePropertiesFormat) validateRoutes(formats strfmt.Registry) error {

	if swag.IsZero(m.Routes) { // not required
		return nil
	}

	for i := 0; i < len(m.Routes); i++ {

		if swag.IsZero(m.Routes[i]) { // not required
			continue
		}

		if m.Routes[i] != nil {

			if err := m.Routes[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *RouteTablePropertiesFormat) validateSubnets(formats strfmt.Registry) error {

	if swag.IsZero(m.Subnets) { // not required
		return nil
	}

	for i := 0; i < len(m.Subnets); i++ {

		if swag.IsZero(m.Subnets[i]) { // not required
			continue
		}

		if m.Subnets[i] != nil {

			if err := m.Subnets[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
