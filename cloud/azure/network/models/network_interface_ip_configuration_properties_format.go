package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// NetworkInterfaceIPConfigurationPropertiesFormat Properties of IPConfiguration
// swagger:model NetworkInterfaceIPConfigurationPropertiesFormat
type NetworkInterfaceIPConfigurationPropertiesFormat struct {

	// Gets or sets the reference of ApplicationGatewayBackendAddressPool resource
	ApplicationGatewayBackendAddressPools []*ApplicationGatewayBackendAddressPool `json:"applicationGatewayBackendAddressPools"`

	// Gets or sets the reference of LoadBalancerBackendAddressPool resource
	LoadBalancerBackendAddressPools []*BackendAddressPool `json:"loadBalancerBackendAddressPools"`

	// Gets or sets list of references of LoadBalancerInboundNatRules
	LoadBalancerInboundNatRules []*InboundNatRule `json:"loadBalancerInboundNatRules"`

	// Gets whether this is a primary customer address on the NIC
	Primary bool `json:"primary,omitempty"`

	// private IP address
	PrivateIPAddress string `json:"privateIPAddress,omitempty"`

	// Gets or sets PrivateIP address version (IPv4/IPv6)
	PrivateIPAddressVersion string `json:"privateIPAddressVersion,omitempty"`

	// Gets or sets PrivateIP allocation method (Static/Dynamic)
	PrivateIPAllocationMethod string `json:"privateIPAllocationMethod,omitempty"`

	// provisioning state
	ProvisioningState string `json:"provisioningState,omitempty"`

	// public IP address
	PublicIPAddress *PublicIPAddress `json:"publicIPAddress,omitempty"`

	// subnet
	Subnet *Subnet `json:"subnet,omitempty"`
}

// Validate validates this network interface IP configuration properties format
func (m *NetworkInterfaceIPConfigurationPropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationGatewayBackendAddressPools(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLoadBalancerBackendAddressPools(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLoadBalancerInboundNatRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrivateIPAddressVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrivateIPAllocationMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicIPAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkInterfaceIPConfigurationPropertiesFormat) validateApplicationGatewayBackendAddressPools(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicationGatewayBackendAddressPools) { // not required
		return nil
	}

	for i := 0; i < len(m.ApplicationGatewayBackendAddressPools); i++ {

		if swag.IsZero(m.ApplicationGatewayBackendAddressPools[i]) { // not required
			continue
		}

		if m.ApplicationGatewayBackendAddressPools[i] != nil {

			if err := m.ApplicationGatewayBackendAddressPools[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *NetworkInterfaceIPConfigurationPropertiesFormat) validateLoadBalancerBackendAddressPools(formats strfmt.Registry) error {

	if swag.IsZero(m.LoadBalancerBackendAddressPools) { // not required
		return nil
	}

	for i := 0; i < len(m.LoadBalancerBackendAddressPools); i++ {

		if swag.IsZero(m.LoadBalancerBackendAddressPools[i]) { // not required
			continue
		}

		if m.LoadBalancerBackendAddressPools[i] != nil {

			if err := m.LoadBalancerBackendAddressPools[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *NetworkInterfaceIPConfigurationPropertiesFormat) validateLoadBalancerInboundNatRules(formats strfmt.Registry) error {

	if swag.IsZero(m.LoadBalancerInboundNatRules) { // not required
		return nil
	}

	for i := 0; i < len(m.LoadBalancerInboundNatRules); i++ {

		if swag.IsZero(m.LoadBalancerInboundNatRules[i]) { // not required
			continue
		}

		if m.LoadBalancerInboundNatRules[i] != nil {

			if err := m.LoadBalancerInboundNatRules[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

var networkInterfaceIpConfigurationPropertiesFormatTypePrivateIPAddressVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IPv4","IPv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkInterfaceIpConfigurationPropertiesFormatTypePrivateIPAddressVersionPropEnum = append(networkInterfaceIpConfigurationPropertiesFormatTypePrivateIPAddressVersionPropEnum, v)
	}
}

const (
	// NetworkInterfaceIPConfigurationPropertiesFormatPrivateIPAddressVersionIPV4 captures enum value "IPv4"
	NetworkInterfaceIPConfigurationPropertiesFormatPrivateIPAddressVersionIPV4 string = "IPv4"
	// NetworkInterfaceIPConfigurationPropertiesFormatPrivateIPAddressVersionIPV6 captures enum value "IPv6"
	NetworkInterfaceIPConfigurationPropertiesFormatPrivateIPAddressVersionIPV6 string = "IPv6"
)

// prop value enum
func (m *NetworkInterfaceIPConfigurationPropertiesFormat) validatePrivateIPAddressVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, networkInterfaceIpConfigurationPropertiesFormatTypePrivateIPAddressVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NetworkInterfaceIPConfigurationPropertiesFormat) validatePrivateIPAddressVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateIPAddressVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrivateIPAddressVersionEnum("privateIPAddressVersion", "body", m.PrivateIPAddressVersion); err != nil {
		return err
	}

	return nil
}

var networkInterfaceIpConfigurationPropertiesFormatTypePrivateIPAllocationMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Static","Dynamic"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkInterfaceIpConfigurationPropertiesFormatTypePrivateIPAllocationMethodPropEnum = append(networkInterfaceIpConfigurationPropertiesFormatTypePrivateIPAllocationMethodPropEnum, v)
	}
}

const (
	// NetworkInterfaceIPConfigurationPropertiesFormatPrivateIPAllocationMethodStatic captures enum value "Static"
	NetworkInterfaceIPConfigurationPropertiesFormatPrivateIPAllocationMethodStatic string = "Static"
	// NetworkInterfaceIPConfigurationPropertiesFormatPrivateIPAllocationMethodDynamic captures enum value "Dynamic"
	NetworkInterfaceIPConfigurationPropertiesFormatPrivateIPAllocationMethodDynamic string = "Dynamic"
)

// prop value enum
func (m *NetworkInterfaceIPConfigurationPropertiesFormat) validatePrivateIPAllocationMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, networkInterfaceIpConfigurationPropertiesFormatTypePrivateIPAllocationMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NetworkInterfaceIPConfigurationPropertiesFormat) validatePrivateIPAllocationMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateIPAllocationMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrivateIPAllocationMethodEnum("privateIPAllocationMethod", "body", m.PrivateIPAllocationMethod); err != nil {
		return err
	}

	return nil
}

func (m *NetworkInterfaceIPConfigurationPropertiesFormat) validatePublicIPAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicIPAddress) { // not required
		return nil
	}

	if m.PublicIPAddress != nil {

		if err := m.PublicIPAddress.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *NetworkInterfaceIPConfigurationPropertiesFormat) validateSubnet(formats strfmt.Registry) error {

	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	if m.Subnet != nil {

		if err := m.Subnet.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
