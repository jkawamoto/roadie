package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// AuthorizationPropertiesFormat authorization properties format
// swagger:model AuthorizationPropertiesFormat
type AuthorizationPropertiesFormat struct {

	// Gets or sets the authorization key
	AuthorizationKey string `json:"authorizationKey,omitempty"`

	// Gets or sets AuthorizationUseStatus
	AuthorizationUseStatus string `json:"authorizationUseStatus,omitempty"`

	// Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`
}

// Validate validates this authorization properties format
func (m *AuthorizationPropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizationUseStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var authorizationPropertiesFormatTypeAuthorizationUseStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Available","InUse"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authorizationPropertiesFormatTypeAuthorizationUseStatusPropEnum = append(authorizationPropertiesFormatTypeAuthorizationUseStatusPropEnum, v)
	}
}

const (
	// AuthorizationPropertiesFormatAuthorizationUseStatusAvailable captures enum value "Available"
	AuthorizationPropertiesFormatAuthorizationUseStatusAvailable string = "Available"
	// AuthorizationPropertiesFormatAuthorizationUseStatusInUse captures enum value "InUse"
	AuthorizationPropertiesFormatAuthorizationUseStatusInUse string = "InUse"
)

// prop value enum
func (m *AuthorizationPropertiesFormat) validateAuthorizationUseStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, authorizationPropertiesFormatTypeAuthorizationUseStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AuthorizationPropertiesFormat) validateAuthorizationUseStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthorizationUseStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthorizationUseStatusEnum("authorizationUseStatus", "body", m.AuthorizationUseStatus); err != nil {
		return err
	}

	return nil
}
