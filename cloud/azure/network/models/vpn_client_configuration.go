package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// VpnClientConfiguration VpnClientConfiguration for P2S client
// swagger:model VpnClientConfiguration
type VpnClientConfiguration struct {

	// Gets or sets the reference of the Address space resource which represents Address space for P2S VpnClient.
	VpnClientAddressPool *AddressSpace `json:"vpnClientAddressPool,omitempty"`

	// VpnClientRevokedCertificate for Virtual network gateway.
	VpnClientRevokedCertificates []*VpnClientRevokedCertificate `json:"vpnClientRevokedCertificates"`

	// VpnClientRootCertificate for Virtual network gateway.
	VpnClientRootCertificates []*VpnClientRootCertificate `json:"vpnClientRootCertificates"`
}

// Validate validates this vpn client configuration
func (m *VpnClientConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVpnClientAddressPool(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVpnClientRevokedCertificates(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVpnClientRootCertificates(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpnClientConfiguration) validateVpnClientAddressPool(formats strfmt.Registry) error {

	if swag.IsZero(m.VpnClientAddressPool) { // not required
		return nil
	}

	if m.VpnClientAddressPool != nil {

		if err := m.VpnClientAddressPool.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VpnClientConfiguration) validateVpnClientRevokedCertificates(formats strfmt.Registry) error {

	if swag.IsZero(m.VpnClientRevokedCertificates) { // not required
		return nil
	}

	for i := 0; i < len(m.VpnClientRevokedCertificates); i++ {

		if swag.IsZero(m.VpnClientRevokedCertificates[i]) { // not required
			continue
		}

		if m.VpnClientRevokedCertificates[i] != nil {

			if err := m.VpnClientRevokedCertificates[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *VpnClientConfiguration) validateVpnClientRootCertificates(formats strfmt.Registry) error {

	if swag.IsZero(m.VpnClientRootCertificates) { // not required
		return nil
	}

	for i := 0; i < len(m.VpnClientRootCertificates); i++ {

		if swag.IsZero(m.VpnClientRootCertificates[i]) { // not required
			continue
		}

		if m.VpnClientRootCertificates[i] != nil {

			if err := m.VpnClientRootCertificates[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
