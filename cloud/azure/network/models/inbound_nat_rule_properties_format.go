package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// InboundNatRulePropertiesFormat Properties of Inbound NAT rule
// swagger:model InboundNatRulePropertiesFormat
type InboundNatRulePropertiesFormat struct {

	// Gets or sets a reference to a private ip address defined on a NetworkInterface of a VM. Traffic sent to frontendPort of each of the frontendIPConfigurations is forwarded to the backed IP
	BackendIPConfiguration *NetworkInterfaceIPConfiguration `json:"backendIPConfiguration,omitempty"`

	// Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal compotnent on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API
	BackendPort int32 `json:"backendPort,omitempty"`

	// Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON availability Groups in SQL server. This setting can't be changed after you create the endpoint
	EnableFloatingIP bool `json:"enableFloatingIP,omitempty"`

	// Gets or sets a reference to frontend IP Addresses
	FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`

	// Gets or sets the port for the external endpoint. You can spcify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive
	FrontendPort int32 `json:"frontendPort,omitempty"`

	// Gets or sets the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This emlement is only used when the protocol is set to Tcp
	IDLETimeoutInMinutes int32 `json:"idleTimeoutInMinutes,omitempty"`

	// Gets or sets the transport potocol for the external endpoint. Possible values are Udp or Tcp
	Protocol string `json:"protocol,omitempty"`

	// Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`
}

// Validate validates this inbound nat rule properties format
func (m *InboundNatRulePropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackendIPConfiguration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFrontendIPConfiguration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundNatRulePropertiesFormat) validateBackendIPConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.BackendIPConfiguration) { // not required
		return nil
	}

	if m.BackendIPConfiguration != nil {

		if err := m.BackendIPConfiguration.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *InboundNatRulePropertiesFormat) validateFrontendIPConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.FrontendIPConfiguration) { // not required
		return nil
	}

	if m.FrontendIPConfiguration != nil {

		if err := m.FrontendIPConfiguration.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var inboundNatRulePropertiesFormatTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Udp","Tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inboundNatRulePropertiesFormatTypeProtocolPropEnum = append(inboundNatRulePropertiesFormatTypeProtocolPropEnum, v)
	}
}

const (
	// InboundNatRulePropertiesFormatProtocolUDP captures enum value "Udp"
	InboundNatRulePropertiesFormatProtocolUDP string = "Udp"
	// InboundNatRulePropertiesFormatProtocolTCP captures enum value "Tcp"
	InboundNatRulePropertiesFormatProtocolTCP string = "Tcp"
)

// prop value enum
func (m *InboundNatRulePropertiesFormat) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, inboundNatRulePropertiesFormatTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InboundNatRulePropertiesFormat) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}
