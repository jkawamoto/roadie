package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// ApplicationGatewayBackendAddressPoolPropertiesFormat Properties of Backend Address Pool of application gateway
// swagger:model ApplicationGatewayBackendAddressPoolPropertiesFormat
type ApplicationGatewayBackendAddressPoolPropertiesFormat struct {

	// Gets or sets the backend addresses
	BackendAddresses []*ApplicationGatewayBackendAddress `json:"backendAddresses"`

	// Gets collection of references to IPs defined in NICs
	BackendIPConfigurations []*NetworkInterfaceIPConfiguration `json:"backendIPConfigurations"`

	// Gets or sets Provisioning state of the backend address pool resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`
}

// Validate validates this application gateway backend address pool properties format
func (m *ApplicationGatewayBackendAddressPoolPropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackendAddresses(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBackendIPConfigurations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationGatewayBackendAddressPoolPropertiesFormat) validateBackendAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.BackendAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.BackendAddresses); i++ {

		if swag.IsZero(m.BackendAddresses[i]) { // not required
			continue
		}

		if m.BackendAddresses[i] != nil {

			if err := m.BackendAddresses[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationGatewayBackendAddressPoolPropertiesFormat) validateBackendIPConfigurations(formats strfmt.Registry) error {

	if swag.IsZero(m.BackendIPConfigurations) { // not required
		return nil
	}

	for i := 0; i < len(m.BackendIPConfigurations); i++ {

		if swag.IsZero(m.BackendIPConfigurations[i]) { // not required
			continue
		}

		if m.BackendIPConfigurations[i] != nil {

			if err := m.BackendIPConfigurations[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
