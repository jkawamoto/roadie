package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ExpressRouteCircuitPeeringConfig Specfies the peering config
// swagger:model ExpressRouteCircuitPeeringConfig
type ExpressRouteCircuitPeeringConfig struct {

	// Gets or sets the reference of AdvertisedPublicPrefixes
	AdvertisedPublicPrefixes []string `json:"advertisedPublicPrefixes"`

	// Gets or sets AdvertisedPublicPrefixState of the Peering resource
	AdvertisedPublicPrefixesState string `json:"advertisedPublicPrefixesState,omitempty"`

	// Gets or Sets CustomerAsn of the peering.
	CustomerASN int32 `json:"customerASN,omitempty"`

	// Gets or Sets RoutingRegistryName of the config.
	RoutingRegistryName string `json:"routingRegistryName,omitempty"`
}

// Validate validates this express route circuit peering config
func (m *ExpressRouteCircuitPeeringConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvertisedPublicPrefixes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAdvertisedPublicPrefixesState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExpressRouteCircuitPeeringConfig) validateAdvertisedPublicPrefixes(formats strfmt.Registry) error {

	if swag.IsZero(m.AdvertisedPublicPrefixes) { // not required
		return nil
	}

	return nil
}

var expressRouteCircuitPeeringConfigTypeAdvertisedPublicPrefixesStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotConfigured","Configuring","Configured","ValidationNeeded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		expressRouteCircuitPeeringConfigTypeAdvertisedPublicPrefixesStatePropEnum = append(expressRouteCircuitPeeringConfigTypeAdvertisedPublicPrefixesStatePropEnum, v)
	}
}

const (
	// ExpressRouteCircuitPeeringConfigAdvertisedPublicPrefixesStateNotConfigured captures enum value "NotConfigured"
	ExpressRouteCircuitPeeringConfigAdvertisedPublicPrefixesStateNotConfigured string = "NotConfigured"
	// ExpressRouteCircuitPeeringConfigAdvertisedPublicPrefixesStateConfiguring captures enum value "Configuring"
	ExpressRouteCircuitPeeringConfigAdvertisedPublicPrefixesStateConfiguring string = "Configuring"
	// ExpressRouteCircuitPeeringConfigAdvertisedPublicPrefixesStateConfigured captures enum value "Configured"
	ExpressRouteCircuitPeeringConfigAdvertisedPublicPrefixesStateConfigured string = "Configured"
	// ExpressRouteCircuitPeeringConfigAdvertisedPublicPrefixesStateValidationNeeded captures enum value "ValidationNeeded"
	ExpressRouteCircuitPeeringConfigAdvertisedPublicPrefixesStateValidationNeeded string = "ValidationNeeded"
)

// prop value enum
func (m *ExpressRouteCircuitPeeringConfig) validateAdvertisedPublicPrefixesStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, expressRouteCircuitPeeringConfigTypeAdvertisedPublicPrefixesStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExpressRouteCircuitPeeringConfig) validateAdvertisedPublicPrefixesState(formats strfmt.Registry) error {

	if swag.IsZero(m.AdvertisedPublicPrefixesState) { // not required
		return nil
	}

	// value enum
	if err := m.validateAdvertisedPublicPrefixesStateEnum("advertisedPublicPrefixesState", "body", m.AdvertisedPublicPrefixesState); err != nil {
		return err
	}

	return nil
}
