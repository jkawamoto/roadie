package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// NetworkInterfaceDNSSettings Dns Settings of a network interface
// swagger:model NetworkInterfaceDnsSettings
type NetworkInterfaceDNSSettings struct {

	// Gets or sets list of Applied DNS servers IP addresses
	AppliedDNSServers []string `json:"appliedDnsServers"`

	// Gets or sets list of DNS servers IP addresses
	DNSServers []string `json:"dnsServers"`

	// Gets or sets the Internal DNS name
	InternalDNSNameLabel string `json:"internalDnsNameLabel,omitempty"`

	// Gets or sets internal domain name suffix of the NIC.
	InternalDomainNameSuffix string `json:"internalDomainNameSuffix,omitempty"`

	// Gets or sets the internal fqdn.
	InternalFqdn string `json:"internalFqdn,omitempty"`
}

// Validate validates this network interface Dns settings
func (m *NetworkInterfaceDNSSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedDNSServers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDNSServers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkInterfaceDNSSettings) validateAppliedDNSServers(formats strfmt.Registry) error {

	if swag.IsZero(m.AppliedDNSServers) { // not required
		return nil
	}

	return nil
}

func (m *NetworkInterfaceDNSSettings) validateDNSServers(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSServers) { // not required
		return nil
	}

	return nil
}
