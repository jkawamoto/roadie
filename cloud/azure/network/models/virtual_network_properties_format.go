package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// VirtualNetworkPropertiesFormat virtual network properties format
// swagger:model VirtualNetworkPropertiesFormat
type VirtualNetworkPropertiesFormat struct {

	// Gets or sets AddressSpace that contains an array of IP address ranges that can be used by subnets
	AddressSpace *AddressSpace `json:"addressSpace,omitempty"`

	// Gets or sets DHCPOptions that contains an array of DNS servers available to VMs deployed in the virtual network
	DhcpOptions *DhcpOptions `json:"dhcpOptions,omitempty"`

	// Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`

	// Gets or sets resource guid property of the VirtualNetwork resource
	ResourceGUID string `json:"resourceGuid,omitempty"`

	// Gets or sets List of subnets in a VirtualNetwork
	Subnets []*Subnet `json:"subnets"`
}

// Validate validates this virtual network properties format
func (m *VirtualNetworkPropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressSpace(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDhcpOptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualNetworkPropertiesFormat) validateAddressSpace(formats strfmt.Registry) error {

	if swag.IsZero(m.AddressSpace) { // not required
		return nil
	}

	if m.AddressSpace != nil {

		if err := m.AddressSpace.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VirtualNetworkPropertiesFormat) validateDhcpOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.DhcpOptions) { // not required
		return nil
	}

	if m.DhcpOptions != nil {

		if err := m.DhcpOptions.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VirtualNetworkPropertiesFormat) validateSubnets(formats strfmt.Registry) error {

	if swag.IsZero(m.Subnets) { // not required
		return nil
	}

	for i := 0; i < len(m.Subnets); i++ {

		if swag.IsZero(m.Subnets[i]) { // not required
			continue
		}

		if m.Subnets[i] != nil {

			if err := m.Subnets[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
