package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// LoadBalancerPropertiesFormat Properties of Load Balancer
// swagger:model LoadBalancerPropertiesFormat
type LoadBalancerPropertiesFormat struct {

	// Gets or sets Pools of backend IP addresseses
	BackendAddressPools []*BackendAddressPool `json:"backendAddressPools"`

	// Gets or sets frontend IP addresses of the load balancer
	FrontendIPConfigurations []*FrontendIPConfiguration `json:"frontendIPConfigurations"`

	// Gets or sets inbound NAT pools
	InboundNatPools []*InboundNatPool `json:"inboundNatPools"`

	// Gets or sets list of inbound rules
	InboundNatRules []*InboundNatRule `json:"inboundNatRules"`

	// Gets or sets loadbalancing rules
	LoadBalancingRules []*LoadBalancingRule `json:"loadBalancingRules"`

	// Gets or sets outbound NAT rules
	OutboundNatRules []*OutboundNatRule `json:"outboundNatRules"`

	// Gets or sets list of Load balancer probes
	Probes []*Probe `json:"probes"`

	// Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState string `json:"provisioningState,omitempty"`

	// Gets or sets resource guid property of the Load balancer resource
	ResourceGUID string `json:"resourceGuid,omitempty"`
}

// Validate validates this load balancer properties format
func (m *LoadBalancerPropertiesFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackendAddressPools(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFrontendIPConfigurations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInboundNatPools(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInboundNatRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLoadBalancingRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOutboundNatRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProbes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoadBalancerPropertiesFormat) validateBackendAddressPools(formats strfmt.Registry) error {

	if swag.IsZero(m.BackendAddressPools) { // not required
		return nil
	}

	for i := 0; i < len(m.BackendAddressPools); i++ {

		if swag.IsZero(m.BackendAddressPools[i]) { // not required
			continue
		}

		if m.BackendAddressPools[i] != nil {

			if err := m.BackendAddressPools[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *LoadBalancerPropertiesFormat) validateFrontendIPConfigurations(formats strfmt.Registry) error {

	if swag.IsZero(m.FrontendIPConfigurations) { // not required
		return nil
	}

	for i := 0; i < len(m.FrontendIPConfigurations); i++ {

		if swag.IsZero(m.FrontendIPConfigurations[i]) { // not required
			continue
		}

		if m.FrontendIPConfigurations[i] != nil {

			if err := m.FrontendIPConfigurations[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *LoadBalancerPropertiesFormat) validateInboundNatPools(formats strfmt.Registry) error {

	if swag.IsZero(m.InboundNatPools) { // not required
		return nil
	}

	for i := 0; i < len(m.InboundNatPools); i++ {

		if swag.IsZero(m.InboundNatPools[i]) { // not required
			continue
		}

		if m.InboundNatPools[i] != nil {

			if err := m.InboundNatPools[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *LoadBalancerPropertiesFormat) validateInboundNatRules(formats strfmt.Registry) error {

	if swag.IsZero(m.InboundNatRules) { // not required
		return nil
	}

	for i := 0; i < len(m.InboundNatRules); i++ {

		if swag.IsZero(m.InboundNatRules[i]) { // not required
			continue
		}

		if m.InboundNatRules[i] != nil {

			if err := m.InboundNatRules[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *LoadBalancerPropertiesFormat) validateLoadBalancingRules(formats strfmt.Registry) error {

	if swag.IsZero(m.LoadBalancingRules) { // not required
		return nil
	}

	for i := 0; i < len(m.LoadBalancingRules); i++ {

		if swag.IsZero(m.LoadBalancingRules[i]) { // not required
			continue
		}

		if m.LoadBalancingRules[i] != nil {

			if err := m.LoadBalancingRules[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *LoadBalancerPropertiesFormat) validateOutboundNatRules(formats strfmt.Registry) error {

	if swag.IsZero(m.OutboundNatRules) { // not required
		return nil
	}

	for i := 0; i < len(m.OutboundNatRules); i++ {

		if swag.IsZero(m.OutboundNatRules[i]) { // not required
			continue
		}

		if m.OutboundNatRules[i] != nil {

			if err := m.OutboundNatRules[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *LoadBalancerPropertiesFormat) validateProbes(formats strfmt.Registry) error {

	if swag.IsZero(m.Probes) { // not required
		return nil
	}

	for i := 0; i < len(m.Probes); i++ {

		if swag.IsZero(m.Probes[i]) { // not required
			continue
		}

		if m.Probes[i] != nil {

			if err := m.Probes[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
