package resource_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewResourceGroupsListResourcesParams creates a new ResourceGroupsListResourcesParams object
// with the default values initialized.
func NewResourceGroupsListResourcesParams() *ResourceGroupsListResourcesParams {
	var ()
	return &ResourceGroupsListResourcesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewResourceGroupsListResourcesParamsWithTimeout creates a new ResourceGroupsListResourcesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewResourceGroupsListResourcesParamsWithTimeout(timeout time.Duration) *ResourceGroupsListResourcesParams {
	var ()
	return &ResourceGroupsListResourcesParams{

		timeout: timeout,
	}
}

// NewResourceGroupsListResourcesParamsWithContext creates a new ResourceGroupsListResourcesParams object
// with the default values initialized, and the ability to set a context for a request
func NewResourceGroupsListResourcesParamsWithContext(ctx context.Context) *ResourceGroupsListResourcesParams {
	var ()
	return &ResourceGroupsListResourcesParams{

		Context: ctx,
	}
}

// NewResourceGroupsListResourcesParamsWithHTTPClient creates a new ResourceGroupsListResourcesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewResourceGroupsListResourcesParamsWithHTTPClient(client *http.Client) *ResourceGroupsListResourcesParams {
	var ()
	return &ResourceGroupsListResourcesParams{
		HTTPClient: client,
	}
}

/*ResourceGroupsListResourcesParams contains all the parameters to send to the API endpoint
for the resource groups list resources operation typically these are written to a http.Request
*/
type ResourceGroupsListResourcesParams struct {

	/*NrDollarExpand
	  The $expand query parameter

	*/
	DollarExpand *string
	/*NrDollarFilter
	  The filter to apply on the operation.

	*/
	DollarFilter *string
	/*NrDollarTop
	  The number of results to return. If null is passed, returns all resources.

	*/
	DollarTop *int32
	/*APIVersion
	  The API version to use for this operation.

	*/
	APIVersion string
	/*ResourceGroupName
	  The resource group with the resources to get.

	*/
	ResourceGroupName string
	/*SubscriptionID
	  The ID of the target subscription.

	*/
	SubscriptionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) WithTimeout(timeout time.Duration) *ResourceGroupsListResourcesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) WithContext(ctx context.Context) *ResourceGroupsListResourcesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) WithHTTPClient(client *http.Client) *ResourceGroupsListResourcesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarExpand adds the dollarExpand to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) WithDollarExpand(dollarExpand *string) *ResourceGroupsListResourcesParams {
	o.SetDollarExpand(dollarExpand)
	return o
}

// SetDollarExpand adds the dollarExpand to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) SetDollarExpand(dollarExpand *string) {
	o.DollarExpand = dollarExpand
}

// WithDollarFilter adds the dollarFilter to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) WithDollarFilter(dollarFilter *string) *ResourceGroupsListResourcesParams {
	o.SetDollarFilter(dollarFilter)
	return o
}

// SetDollarFilter adds the dollarFilter to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) SetDollarFilter(dollarFilter *string) {
	o.DollarFilter = dollarFilter
}

// WithDollarTop adds the dollarTop to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) WithDollarTop(dollarTop *int32) *ResourceGroupsListResourcesParams {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithAPIVersion adds the aPIVersion to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) WithAPIVersion(aPIVersion string) *ResourceGroupsListResourcesParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithResourceGroupName adds the resourceGroupName to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) WithResourceGroupName(resourceGroupName string) *ResourceGroupsListResourcesParams {
	o.SetResourceGroupName(resourceGroupName)
	return o
}

// SetResourceGroupName adds the resourceGroupName to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) SetResourceGroupName(resourceGroupName string) {
	o.ResourceGroupName = resourceGroupName
}

// WithSubscriptionID adds the subscriptionID to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) WithSubscriptionID(subscriptionID string) *ResourceGroupsListResourcesParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the resource groups list resources params
func (o *ResourceGroupsListResourcesParams) SetSubscriptionID(subscriptionID string) {
	o.SubscriptionID = subscriptionID
}

// WriteToRequest writes these params to a swagger request
func (o *ResourceGroupsListResourcesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarExpand != nil {

		// query param $expand
		var qrNrDollarExpand string
		if o.DollarExpand != nil {
			qrNrDollarExpand = *o.DollarExpand
		}
		qNrDollarExpand := qrNrDollarExpand
		if qNrDollarExpand != "" {
			if err := r.SetQueryParam("$expand", qNrDollarExpand); err != nil {
				return err
			}
		}

	}

	if o.DollarFilter != nil {

		// query param $filter
		var qrNrDollarFilter string
		if o.DollarFilter != nil {
			qrNrDollarFilter = *o.DollarFilter
		}
		qNrDollarFilter := qrNrDollarFilter
		if qNrDollarFilter != "" {
			if err := r.SetQueryParam("$filter", qNrDollarFilter); err != nil {
				return err
			}
		}

	}

	if o.DollarTop != nil {

		// query param $top
		var qrNrDollarTop int32
		if o.DollarTop != nil {
			qrNrDollarTop = *o.DollarTop
		}
		qNrDollarTop := swag.FormatInt32(qrNrDollarTop)
		if qNrDollarTop != "" {
			if err := r.SetQueryParam("$top", qNrDollarTop); err != nil {
				return err
			}
		}

	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param resourceGroupName
	if err := r.SetPathParam("resourceGroupName", o.ResourceGroupName); err != nil {
		return err
	}

	// path param subscriptionId
	if err := r.SetPathParam("subscriptionId", o.SubscriptionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
