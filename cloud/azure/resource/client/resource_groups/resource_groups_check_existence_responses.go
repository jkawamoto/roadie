package resource_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ResourceGroupsCheckExistenceReader is a Reader for the ResourceGroupsCheckExistence structure.
type ResourceGroupsCheckExistenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResourceGroupsCheckExistenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewResourceGroupsCheckExistenceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewResourceGroupsCheckExistenceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewResourceGroupsCheckExistenceNoContent creates a ResourceGroupsCheckExistenceNoContent with default headers values
func NewResourceGroupsCheckExistenceNoContent() *ResourceGroupsCheckExistenceNoContent {
	return &ResourceGroupsCheckExistenceNoContent{}
}

/*ResourceGroupsCheckExistenceNoContent handles this case with default header values.

No Content
*/
type ResourceGroupsCheckExistenceNoContent struct {
}

func (o *ResourceGroupsCheckExistenceNoContent) Error() string {
	return fmt.Sprintf("[HEAD /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}][%d] resourceGroupsCheckExistenceNoContent ", 204)
}

func (o *ResourceGroupsCheckExistenceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewResourceGroupsCheckExistenceNotFound creates a ResourceGroupsCheckExistenceNotFound with default headers values
func NewResourceGroupsCheckExistenceNotFound() *ResourceGroupsCheckExistenceNotFound {
	return &ResourceGroupsCheckExistenceNotFound{}
}

/*ResourceGroupsCheckExistenceNotFound handles this case with default header values.

Not Found
*/
type ResourceGroupsCheckExistenceNotFound struct {
}

func (o *ResourceGroupsCheckExistenceNotFound) Error() string {
	return fmt.Sprintf("[HEAD /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}][%d] resourceGroupsCheckExistenceNotFound ", 404)
}

func (o *ResourceGroupsCheckExistenceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
