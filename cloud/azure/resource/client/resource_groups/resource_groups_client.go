package resource_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new resource groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resource groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ResourceGroupsCheckExistence Checks whether a resource group exists.
*/
func (a *Client) ResourceGroupsCheckExistence(params *ResourceGroupsCheckExistenceParams, authInfo runtime.ClientAuthInfoWriter) (*ResourceGroupsCheckExistenceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupsCheckExistenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResourceGroups_CheckExistence",
		Method:             "HEAD",
		PathPattern:        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupsCheckExistenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResourceGroupsCheckExistenceNoContent), nil

}

/*
ResourceGroupsCreateOrUpdate Creates a resource group.
*/
func (a *Client) ResourceGroupsCreateOrUpdate(params *ResourceGroupsCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ResourceGroupsCreateOrUpdateOK, *ResourceGroupsCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupsCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResourceGroups_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupsCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ResourceGroupsCreateOrUpdateOK:
		return value, nil, nil
	case *ResourceGroupsCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ResourceGroupsDelete deletes a resource group

When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations.
*/
func (a *Client) ResourceGroupsDelete(params *ResourceGroupsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ResourceGroupsDeleteOK, *ResourceGroupsDeleteAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResourceGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ResourceGroupsDeleteOK:
		return value, nil, nil
	case *ResourceGroupsDeleteAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ResourceGroupsExportTemplate Captures the specified resource group as a template.
*/
func (a *Client) ResourceGroupsExportTemplate(params *ResourceGroupsExportTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*ResourceGroupsExportTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupsExportTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResourceGroups_ExportTemplate",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupsExportTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResourceGroupsExportTemplateOK), nil

}

/*
ResourceGroupsGet Gets a resource group.
*/
func (a *Client) ResourceGroupsGet(params *ResourceGroupsGetParams, authInfo runtime.ClientAuthInfoWriter) (*ResourceGroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResourceGroups_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResourceGroupsGetOK), nil

}

/*
ResourceGroupsList Gets all the resource groups for a subscription.
*/
func (a *Client) ResourceGroupsList(params *ResourceGroupsListParams, authInfo runtime.ClientAuthInfoWriter) (*ResourceGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResourceGroups_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourcegroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResourceGroupsListOK), nil

}

/*
ResourceGroupsListResources Get all the resources for a resource group.
*/
func (a *Client) ResourceGroupsListResources(params *ResourceGroupsListResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*ResourceGroupsListResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupsListResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResourceGroups_ListResources",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupsListResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResourceGroupsListResourcesOK), nil

}

/*
ResourceGroupsPatch updates a resource group

Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained.
*/
func (a *Client) ResourceGroupsPatch(params *ResourceGroupsPatchParams, authInfo runtime.ClientAuthInfoWriter) (*ResourceGroupsPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupsPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResourceGroups_Patch",
		Method:             "PATCH",
		PathPattern:        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupsPatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResourceGroupsPatchOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
