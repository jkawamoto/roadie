package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// TagsDeleteReader is a Reader for the TagsDelete structure.
type TagsDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TagsDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTagsDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewTagsDeleteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTagsDeleteOK creates a TagsDeleteOK with default headers values
func NewTagsDeleteOK() *TagsDeleteOK {
	return &TagsDeleteOK{}
}

/*TagsDeleteOK handles this case with default header values.

OK
*/
type TagsDeleteOK struct {
}

func (o *TagsDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /subscriptions/{subscriptionId}/tagNames/{tagName}][%d] tagsDeleteOK ", 200)
}

func (o *TagsDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTagsDeleteNoContent creates a TagsDeleteNoContent with default headers values
func NewTagsDeleteNoContent() *TagsDeleteNoContent {
	return &TagsDeleteNoContent{}
}

/*TagsDeleteNoContent handles this case with default header values.

No Content
*/
type TagsDeleteNoContent struct {
}

func (o *TagsDeleteNoContent) Error() string {
	return fmt.Sprintf("[DELETE /subscriptions/{subscriptionId}/tagNames/{tagName}][%d] tagsDeleteNoContent ", 204)
}

func (o *TagsDeleteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
