package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Identity Identity for the resource.
// swagger:model Identity
type Identity struct {

	// The principal ID of resource identity.
	// Read Only: true
	PrincipalID string `json:"principalId,omitempty"`

	// The tenant ID of resource.
	// Read Only: true
	TenantID string `json:"tenantId,omitempty"`

	// The identity type.
	Type string `json:"type,omitempty"`
}

// Validate validates this identity
func (m *Identity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var identityTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SystemAssigned"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		identityTypeTypePropEnum = append(identityTypeTypePropEnum, v)
	}
}

const (
	// IdentityTypeSystemAssigned captures enum value "SystemAssigned"
	IdentityTypeSystemAssigned string = "SystemAssigned"
)

// prop value enum
func (m *Identity) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, identityTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Identity) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
