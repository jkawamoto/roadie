package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Provider Resource provider information.
// swagger:model Provider
type Provider struct {

	// The provider ID.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The namespace of the resource provider.
	Namespace string `json:"namespace,omitempty"`

	// The registration state of the provider.
	// Read Only: true
	RegistrationState string `json:"registrationState,omitempty"`

	// The collection of provider resource types.
	// Read Only: true
	ResourceTypes []*ProviderResourceType `json:"resourceTypes"`
}

// Validate validates this provider
func (m *Provider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceTypes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Provider) validateResourceTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceTypes); i++ {

		if swag.IsZero(m.ResourceTypes[i]) { // not required
			continue
		}

		if m.ResourceTypes[i] != nil {

			if err := m.ResourceTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
