package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ProviderResourceType Resource type managed by the resource provider.
// swagger:model ProviderResourceType
type ProviderResourceType struct {

	// The aliases that are supported by this resource type.
	Aliases []*AliasType `json:"aliases"`

	// The API version.
	APIVersions []string `json:"apiVersions"`

	// The collection of locations where this resource type can be created.
	Locations []string `json:"locations"`

	// The properties.
	Properties map[string]string `json:"properties,omitempty"`

	// The resource type.
	ResourceType string `json:"resourceType,omitempty"`
}

// Validate validates this provider resource type
func (m *ProviderResourceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAliases(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAPIVersions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProviderResourceType) validateAliases(formats strfmt.Registry) error {

	if swag.IsZero(m.Aliases) { // not required
		return nil
	}

	for i := 0; i < len(m.Aliases); i++ {

		if swag.IsZero(m.Aliases[i]) { // not required
			continue
		}

		if m.Aliases[i] != nil {

			if err := m.Aliases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aliases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProviderResourceType) validateAPIVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.APIVersions) { // not required
		return nil
	}

	return nil
}

func (m *ProviderResourceType) validateLocations(formats strfmt.Registry) error {

	if swag.IsZero(m.Locations) { // not required
		return nil
	}

	return nil
}
