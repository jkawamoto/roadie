package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DeploymentOperationProperties Deployment operation properties.
// swagger:model DeploymentOperationProperties
type DeploymentOperationProperties struct {

	// The state of the provisioning.
	// Read Only: true
	ProvisioningState string `json:"provisioningState,omitempty"`

	// The HTTP request message.
	// Read Only: true
	Request *HTTPMessage `json:"request,omitempty"`

	// The HTTP response message.
	// Read Only: true
	Response *HTTPMessage `json:"response,omitempty"`

	// Deployment operation service request id.
	// Read Only: true
	ServiceRequestID string `json:"serviceRequestId,omitempty"`

	// Operation status code.
	// Read Only: true
	StatusCode string `json:"statusCode,omitempty"`

	// Operation status message.
	// Read Only: true
	StatusMessage interface{} `json:"statusMessage,omitempty"`

	// The target resource.
	// Read Only: true
	TargetResource *TargetResource `json:"targetResource,omitempty"`

	// The date and time of the operation.
	// Read Only: true
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this deployment operation properties
func (m *DeploymentOperationProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRequest(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResponse(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTargetResource(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentOperationProperties) validateRequest(formats strfmt.Registry) error {

	if swag.IsZero(m.Request) { // not required
		return nil
	}

	if m.Request != nil {

		if err := m.Request.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("request")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentOperationProperties) validateResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if m.Response != nil {

		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentOperationProperties) validateTargetResource(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetResource) { // not required
		return nil
	}

	if m.TargetResource != nil {

		if err := m.TargetResource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetResource")
			}
			return err
		}
	}

	return nil
}
