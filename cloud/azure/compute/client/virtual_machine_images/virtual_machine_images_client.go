package virtual_machine_images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new virtual machine images API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual machine images API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
VirtualMachineImagesGet Gets a virtual machine image.
*/
func (a *Client) VirtualMachineImagesGet(params *VirtualMachineImagesGetParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualMachineImagesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMachineImagesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualMachineImages_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualMachineImagesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualMachineImagesGetOK), nil

}

/*
VirtualMachineImagesList Gets a list of all virtual machine image versions for the specified location, publisher, offer, and SKU.
*/
func (a *Client) VirtualMachineImagesList(params *VirtualMachineImagesListParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualMachineImagesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMachineImagesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualMachineImages_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualMachineImagesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualMachineImagesListOK), nil

}

/*
VirtualMachineImagesListOffers Gets a list of virtual machine image offers for the specified location and publisher.
*/
func (a *Client) VirtualMachineImagesListOffers(params *VirtualMachineImagesListOffersParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualMachineImagesListOffersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMachineImagesListOffersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualMachineImages_ListOffers",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualMachineImagesListOffersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualMachineImagesListOffersOK), nil

}

/*
VirtualMachineImagesListPublishers Gets a list of virtual machine image publishers for the specified Azure location.
*/
func (a *Client) VirtualMachineImagesListPublishers(params *VirtualMachineImagesListPublishersParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualMachineImagesListPublishersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMachineImagesListPublishersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualMachineImages_ListPublishers",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualMachineImagesListPublishersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualMachineImagesListPublishersOK), nil

}

/*
VirtualMachineImagesListSkus Gets a list of virtual machine image SKUs for the specified location, publisher, and offer.
*/
func (a *Client) VirtualMachineImagesListSkus(params *VirtualMachineImagesListSkusParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualMachineImagesListSkusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMachineImagesListSkusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualMachineImages_ListSkus",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualMachineImagesListSkusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualMachineImagesListSkusOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
