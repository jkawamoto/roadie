package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jkawamoto/roadie/cloud/azure/compute/client/availability_sets"
	"github.com/jkawamoto/roadie/cloud/azure/compute/client/images"
	"github.com/jkawamoto/roadie/cloud/azure/compute/client/usage"
	"github.com/jkawamoto/roadie/cloud/azure/compute/client/virtual_machine_extension_images"
	"github.com/jkawamoto/roadie/cloud/azure/compute/client/virtual_machine_extensions"
	"github.com/jkawamoto/roadie/cloud/azure/compute/client/virtual_machine_images"
	"github.com/jkawamoto/roadie/cloud/azure/compute/client/virtual_machine_scale_set_vms"
	"github.com/jkawamoto/roadie/cloud/azure/compute/client/virtual_machine_scale_sets"
	"github.com/jkawamoto/roadie/cloud/azure/compute/client/virtual_machine_sizes"
	"github.com/jkawamoto/roadie/cloud/azure/compute/client/virtual_machines"
)

// Default compute management client HTTP client.
var Default = NewHTTPClient(nil)

// NewHTTPClient creates a new compute management client HTTP client.
func NewHTTPClient(formats strfmt.Registry) *ComputeManagementClient {
	if formats == nil {
		formats = strfmt.Default
	}
	transport := httptransport.New("management.azure.com", "/", []string{"https"})
	return New(transport, formats)
}

// New creates a new compute management client client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *ComputeManagementClient {
	cli := new(ComputeManagementClient)
	cli.Transport = transport

	cli.AvailabilitySets = availability_sets.New(transport, formats)

	cli.Images = images.New(transport, formats)

	cli.Usage = usage.New(transport, formats)

	cli.VirtualMachineExtensionImages = virtual_machine_extension_images.New(transport, formats)

	cli.VirtualMachineExtensions = virtual_machine_extensions.New(transport, formats)

	cli.VirtualMachineImages = virtual_machine_images.New(transport, formats)

	cli.VirtualMachineScaleSetVms = virtual_machine_scale_set_vms.New(transport, formats)

	cli.VirtualMachineScaleSets = virtual_machine_scale_sets.New(transport, formats)

	cli.VirtualMachineSizes = virtual_machine_sizes.New(transport, formats)

	cli.VirtualMachines = virtual_machines.New(transport, formats)

	return cli
}

// ComputeManagementClient is a client for compute management client
type ComputeManagementClient struct {
	AvailabilitySets *availability_sets.Client

	Images *images.Client

	Usage *usage.Client

	VirtualMachineExtensionImages *virtual_machine_extension_images.Client

	VirtualMachineExtensions *virtual_machine_extensions.Client

	VirtualMachineImages *virtual_machine_images.Client

	VirtualMachineScaleSetVms *virtual_machine_scale_set_vms.Client

	VirtualMachineScaleSets *virtual_machine_scale_sets.Client

	VirtualMachineSizes *virtual_machine_sizes.Client

	VirtualMachines *virtual_machines.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *ComputeManagementClient) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.AvailabilitySets.SetTransport(transport)

	c.Images.SetTransport(transport)

	c.Usage.SetTransport(transport)

	c.VirtualMachineExtensionImages.SetTransport(transport)

	c.VirtualMachineExtensions.SetTransport(transport)

	c.VirtualMachineImages.SetTransport(transport)

	c.VirtualMachineScaleSetVms.SetTransport(transport)

	c.VirtualMachineScaleSets.SetTransport(transport)

	c.VirtualMachineSizes.SetTransport(transport)

	c.VirtualMachines.SetTransport(transport)

}
