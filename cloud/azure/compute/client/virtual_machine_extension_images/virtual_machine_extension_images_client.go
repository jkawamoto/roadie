package virtual_machine_extension_images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new virtual machine extension images API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual machine extension images API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
VirtualMachineExtensionImagesGet Gets a virtual machine extension image.
*/
func (a *Client) VirtualMachineExtensionImagesGet(params *VirtualMachineExtensionImagesGetParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualMachineExtensionImagesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMachineExtensionImagesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualMachineExtensionImages_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualMachineExtensionImagesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualMachineExtensionImagesGetOK), nil

}

/*
VirtualMachineExtensionImagesListTypes Gets a list of virtual machine extension image types.
*/
func (a *Client) VirtualMachineExtensionImagesListTypes(params *VirtualMachineExtensionImagesListTypesParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualMachineExtensionImagesListTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMachineExtensionImagesListTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualMachineExtensionImages_ListTypes",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualMachineExtensionImagesListTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualMachineExtensionImagesListTypesOK), nil

}

/*
VirtualMachineExtensionImagesListVersions Gets a list of virtual machine extension image versions.
*/
func (a *Client) VirtualMachineExtensionImagesListVersions(params *VirtualMachineExtensionImagesListVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualMachineExtensionImagesListVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMachineExtensionImagesListVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualMachineExtensionImages_ListVersions",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualMachineExtensionImagesListVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualMachineExtensionImagesListVersionsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
