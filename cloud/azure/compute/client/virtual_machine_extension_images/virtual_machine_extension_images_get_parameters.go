package virtual_machine_extension_images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewVirtualMachineExtensionImagesGetParams creates a new VirtualMachineExtensionImagesGetParams object
// with the default values initialized.
func NewVirtualMachineExtensionImagesGetParams() *VirtualMachineExtensionImagesGetParams {
	var ()
	return &VirtualMachineExtensionImagesGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewVirtualMachineExtensionImagesGetParamsWithTimeout creates a new VirtualMachineExtensionImagesGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewVirtualMachineExtensionImagesGetParamsWithTimeout(timeout time.Duration) *VirtualMachineExtensionImagesGetParams {
	var ()
	return &VirtualMachineExtensionImagesGetParams{

		timeout: timeout,
	}
}

// NewVirtualMachineExtensionImagesGetParamsWithContext creates a new VirtualMachineExtensionImagesGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewVirtualMachineExtensionImagesGetParamsWithContext(ctx context.Context) *VirtualMachineExtensionImagesGetParams {
	var ()
	return &VirtualMachineExtensionImagesGetParams{

		Context: ctx,
	}
}

/*VirtualMachineExtensionImagesGetParams contains all the parameters to send to the API endpoint
for the virtual machine extension images get operation typically these are written to a http.Request
*/
type VirtualMachineExtensionImagesGetParams struct {

	/*APIVersion
	  Client Api Version.

	*/
	APIVersion string
	/*Location*/
	Location string
	/*PublisherName*/
	PublisherName string
	/*SubscriptionID
	  Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.

	*/
	SubscriptionID string
	/*Type*/
	Type string
	/*Version*/
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) WithTimeout(timeout time.Duration) *VirtualMachineExtensionImagesGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) WithContext(ctx context.Context) *VirtualMachineExtensionImagesGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithAPIVersion adds the aPIVersion to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) WithAPIVersion(aPIVersion string) *VirtualMachineExtensionImagesGetParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithLocation adds the location to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) WithLocation(location string) *VirtualMachineExtensionImagesGetParams {
	o.SetLocation(location)
	return o
}

// SetLocation adds the location to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) SetLocation(location string) {
	o.Location = location
}

// WithPublisherName adds the publisherName to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) WithPublisherName(publisherName string) *VirtualMachineExtensionImagesGetParams {
	o.SetPublisherName(publisherName)
	return o
}

// SetPublisherName adds the publisherName to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) SetPublisherName(publisherName string) {
	o.PublisherName = publisherName
}

// WithSubscriptionID adds the subscriptionID to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) WithSubscriptionID(subscriptionID string) *VirtualMachineExtensionImagesGetParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) SetSubscriptionID(subscriptionID string) {
	o.SubscriptionID = subscriptionID
}

// WithType adds the typeVar to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) WithType(typeVar string) *VirtualMachineExtensionImagesGetParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WithVersion adds the version to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) WithVersion(version string) *VirtualMachineExtensionImagesGetParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the virtual machine extension images get params
func (o *VirtualMachineExtensionImagesGetParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *VirtualMachineExtensionImagesGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param location
	if err := r.SetPathParam("location", o.Location); err != nil {
		return err
	}

	// path param publisherName
	if err := r.SetPathParam("publisherName", o.PublisherName); err != nil {
		return err
	}

	// path param subscriptionId
	if err := r.SetPathParam("subscriptionId", o.SubscriptionID); err != nil {
		return err
	}

	// path param type
	if err := r.SetPathParam("type", o.Type); err != nil {
		return err
	}

	// path param version
	if err := r.SetPathParam("version", o.Version); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
