package virtual_machine_extension_images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewVirtualMachineExtensionImagesListVersionsParams creates a new VirtualMachineExtensionImagesListVersionsParams object
// with the default values initialized.
func NewVirtualMachineExtensionImagesListVersionsParams() *VirtualMachineExtensionImagesListVersionsParams {
	var ()
	return &VirtualMachineExtensionImagesListVersionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewVirtualMachineExtensionImagesListVersionsParamsWithTimeout creates a new VirtualMachineExtensionImagesListVersionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewVirtualMachineExtensionImagesListVersionsParamsWithTimeout(timeout time.Duration) *VirtualMachineExtensionImagesListVersionsParams {
	var ()
	return &VirtualMachineExtensionImagesListVersionsParams{

		timeout: timeout,
	}
}

// NewVirtualMachineExtensionImagesListVersionsParamsWithContext creates a new VirtualMachineExtensionImagesListVersionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewVirtualMachineExtensionImagesListVersionsParamsWithContext(ctx context.Context) *VirtualMachineExtensionImagesListVersionsParams {
	var ()
	return &VirtualMachineExtensionImagesListVersionsParams{

		Context: ctx,
	}
}

/*VirtualMachineExtensionImagesListVersionsParams contains all the parameters to send to the API endpoint
for the virtual machine extension images list versions operation typically these are written to a http.Request
*/
type VirtualMachineExtensionImagesListVersionsParams struct {

	/*NrDollarFilter
	  The filter to apply on the operation.

	*/
	DollarFilter *string
	/*NrDollarOrderby*/
	DollarOrderby *string
	/*NrDollarTop*/
	DollarTop *int32
	/*APIVersion
	  Client Api Version.

	*/
	APIVersion string
	/*Location*/
	Location string
	/*PublisherName*/
	PublisherName string
	/*SubscriptionID
	  Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.

	*/
	SubscriptionID string
	/*Type*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) WithTimeout(timeout time.Duration) *VirtualMachineExtensionImagesListVersionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) WithContext(ctx context.Context) *VirtualMachineExtensionImagesListVersionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithDollarFilter adds the dollarFilter to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) WithDollarFilter(dollarFilter *string) *VirtualMachineExtensionImagesListVersionsParams {
	o.SetDollarFilter(dollarFilter)
	return o
}

// SetDollarFilter adds the dollarFilter to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) SetDollarFilter(dollarFilter *string) {
	o.DollarFilter = dollarFilter
}

// WithDollarOrderby adds the dollarOrderby to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) WithDollarOrderby(dollarOrderby *string) *VirtualMachineExtensionImagesListVersionsParams {
	o.SetDollarOrderby(dollarOrderby)
	return o
}

// SetDollarOrderby adds the dollarOrderby to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) SetDollarOrderby(dollarOrderby *string) {
	o.DollarOrderby = dollarOrderby
}

// WithDollarTop adds the dollarTop to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) WithDollarTop(dollarTop *int32) *VirtualMachineExtensionImagesListVersionsParams {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithAPIVersion adds the aPIVersion to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) WithAPIVersion(aPIVersion string) *VirtualMachineExtensionImagesListVersionsParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithLocation adds the location to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) WithLocation(location string) *VirtualMachineExtensionImagesListVersionsParams {
	o.SetLocation(location)
	return o
}

// SetLocation adds the location to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) SetLocation(location string) {
	o.Location = location
}

// WithPublisherName adds the publisherName to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) WithPublisherName(publisherName string) *VirtualMachineExtensionImagesListVersionsParams {
	o.SetPublisherName(publisherName)
	return o
}

// SetPublisherName adds the publisherName to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) SetPublisherName(publisherName string) {
	o.PublisherName = publisherName
}

// WithSubscriptionID adds the subscriptionID to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) WithSubscriptionID(subscriptionID string) *VirtualMachineExtensionImagesListVersionsParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) SetSubscriptionID(subscriptionID string) {
	o.SubscriptionID = subscriptionID
}

// WithType adds the typeVar to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) WithType(typeVar string) *VirtualMachineExtensionImagesListVersionsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the virtual machine extension images list versions params
func (o *VirtualMachineExtensionImagesListVersionsParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *VirtualMachineExtensionImagesListVersionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.DollarFilter != nil {

		// query param $filter
		var qrNrDollarFilter string
		if o.DollarFilter != nil {
			qrNrDollarFilter = *o.DollarFilter
		}
		qNrDollarFilter := qrNrDollarFilter
		if qNrDollarFilter != "" {
			if err := r.SetQueryParam("$filter", qNrDollarFilter); err != nil {
				return err
			}
		}

	}

	if o.DollarOrderby != nil {

		// query param $orderby
		var qrNrDollarOrderby string
		if o.DollarOrderby != nil {
			qrNrDollarOrderby = *o.DollarOrderby
		}
		qNrDollarOrderby := qrNrDollarOrderby
		if qNrDollarOrderby != "" {
			if err := r.SetQueryParam("$orderby", qNrDollarOrderby); err != nil {
				return err
			}
		}

	}

	if o.DollarTop != nil {

		// query param $top
		var qrNrDollarTop int32
		if o.DollarTop != nil {
			qrNrDollarTop = *o.DollarTop
		}
		qNrDollarTop := swag.FormatInt32(qrNrDollarTop)
		if qNrDollarTop != "" {
			if err := r.SetQueryParam("$top", qNrDollarTop); err != nil {
				return err
			}
		}

	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param location
	if err := r.SetPathParam("location", o.Location); err != nil {
		return err
	}

	// path param publisherName
	if err := r.SetPathParam("publisherName", o.PublisherName); err != nil {
		return err
	}

	// path param subscriptionId
	if err := r.SetPathParam("subscriptionId", o.SubscriptionID); err != nil {
		return err
	}

	// path param type
	if err := r.SetPathParam("type", o.Type); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
