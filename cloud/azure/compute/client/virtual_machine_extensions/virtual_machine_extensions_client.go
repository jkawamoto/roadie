package virtual_machine_extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new virtual machine extensions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual machine extensions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
VirtualMachineExtensionsCreateOrUpdate The operation to create or update the extension.
*/
func (a *Client) VirtualMachineExtensionsCreateOrUpdate(params *VirtualMachineExtensionsCreateOrUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualMachineExtensionsCreateOrUpdateOK, *VirtualMachineExtensionsCreateOrUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMachineExtensionsCreateOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualMachineExtensions_CreateOrUpdate",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualMachineExtensionsCreateOrUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VirtualMachineExtensionsCreateOrUpdateOK:
		return value, nil, nil
	case *VirtualMachineExtensionsCreateOrUpdateCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
VirtualMachineExtensionsDelete The operation to delete the extension.
*/
func (a *Client) VirtualMachineExtensionsDelete(params *VirtualMachineExtensionsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualMachineExtensionsDeleteOK, *VirtualMachineExtensionsDeleteAccepted, *VirtualMachineExtensionsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMachineExtensionsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualMachineExtensions_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualMachineExtensionsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *VirtualMachineExtensionsDeleteOK:
		return value, nil, nil, nil
	case *VirtualMachineExtensionsDeleteAccepted:
		return nil, value, nil, nil
	case *VirtualMachineExtensionsDeleteNoContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
VirtualMachineExtensionsGet The operation to get the extension.
*/
func (a *Client) VirtualMachineExtensionsGet(params *VirtualMachineExtensionsGetParams, authInfo runtime.ClientAuthInfoWriter) (*VirtualMachineExtensionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMachineExtensionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualMachineExtensions_Get",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VirtualMachineExtensionsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualMachineExtensionsGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
