package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// VaultSecretGroup Describes a set of certificates which are all in the same Key Vault.
// swagger:model VaultSecretGroup
type VaultSecretGroup struct {

	// The Relative URL of the Key Vault containing all of the certificates in VaultCertificates.
	SourceVault *SubResource `json:"sourceVault,omitempty"`

	// The list of key vault references in SourceVault which contain certificates.
	VaultCertificates []*VaultCertificate `json:"vaultCertificates"`
}

// Validate validates this vault secret group
func (m *VaultSecretGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceVault(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVaultCertificates(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VaultSecretGroup) validateSourceVault(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceVault) { // not required
		return nil
	}

	if m.SourceVault != nil {

		if err := m.SourceVault.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VaultSecretGroup) validateVaultCertificates(formats strfmt.Registry) error {

	if swag.IsZero(m.VaultCertificates) { // not required
		return nil
	}

	for i := 0; i < len(m.VaultCertificates); i++ {

		if swag.IsZero(m.VaultCertificates[i]) { // not required
			continue
		}

		if m.VaultCertificates[i] != nil {

			if err := m.VaultCertificates[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
