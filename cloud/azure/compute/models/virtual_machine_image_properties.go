package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// VirtualMachineImageProperties Describes the properties of a Virtual Machine Image.
// swagger:model VirtualMachineImageProperties
type VirtualMachineImageProperties struct {

	// data disk images
	DataDiskImages []*DataDiskImage `json:"dataDiskImages"`

	// os disk image
	OsDiskImage *OSDiskImage `json:"osDiskImage,omitempty"`

	// plan
	Plan *PurchasePlan `json:"plan,omitempty"`
}

// Validate validates this virtual machine image properties
func (m *VirtualMachineImageProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataDiskImages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOsDiskImage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineImageProperties) validateDataDiskImages(formats strfmt.Registry) error {

	if swag.IsZero(m.DataDiskImages) { // not required
		return nil
	}

	for i := 0; i < len(m.DataDiskImages); i++ {

		if swag.IsZero(m.DataDiskImages[i]) { // not required
			continue
		}

		if m.DataDiskImages[i] != nil {

			if err := m.DataDiskImages[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineImageProperties) validateOsDiskImage(formats strfmt.Registry) error {

	if swag.IsZero(m.OsDiskImage) { // not required
		return nil
	}

	if m.OsDiskImage != nil {

		if err := m.OsDiskImage.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VirtualMachineImageProperties) validatePlan(formats strfmt.Registry) error {

	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {

		if err := m.Plan.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
