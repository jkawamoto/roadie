package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// WinRMListener Describes Protocol and thumbprint of Windows Remote Management listener
// swagger:model WinRMListener
type WinRMListener struct {

	// The Certificate URL in KMS for Https listeners. Should be null for Http listeners.
	CertificateURL string `json:"certificateUrl,omitempty"`

	// The Protocol used by the WinRM listener. Http and Https are supported.
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this win r m listener
func (m *WinRMListener) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var winRMListenerTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Http","Https"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		winRMListenerTypeProtocolPropEnum = append(winRMListenerTypeProtocolPropEnum, v)
	}
}

const (
	// WinRMListenerProtocolHTTP captures enum value "Http"
	WinRMListenerProtocolHTTP string = "Http"
	// WinRMListenerProtocolHTTPS captures enum value "Https"
	WinRMListenerProtocolHTTPS string = "Https"
)

// prop value enum
func (m *WinRMListener) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, winRMListenerTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WinRMListener) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}
