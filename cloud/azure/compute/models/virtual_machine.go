package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// VirtualMachine Describes a Virtual Machine.
// swagger:model VirtualMachine
type VirtualMachine struct {
	Resource

	// The identity of the virtual machine, if configured.
	Identity *VirtualMachineIdentity `json:"identity,omitempty"`

	// The purchase plan when deploying virtual machine from VM Marketplace images.
	Plan *Plan `json:"plan,omitempty"`

	// properties
	Properties *VirtualMachineProperties `json:"properties,omitempty"`

	// The virtual machine child extension resources.
	// Read Only: true
	Resources []*VirtualMachineExtension `json:"resources"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VirtualMachine) UnmarshalJSON(raw []byte) error {
	var data struct {
		Identity *VirtualMachineIdentity `json:"identity,omitempty"`

		Plan *Plan `json:"plan,omitempty"`

		Properties *VirtualMachineProperties `json:"properties,omitempty"`

		Resources []*VirtualMachineExtension `json:"resources,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.Identity = data.Identity

	m.Plan = data.Plan

	m.Properties = data.Properties

	m.Resources = data.Resources

	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VirtualMachine) MarshalJSON() ([]byte, error) {
	var _parts [][]byte
	var data struct {
		Identity *VirtualMachineIdentity `json:"identity,omitempty"`

		Plan *Plan `json:"plan,omitempty"`

		Properties *VirtualMachineProperties `json:"properties,omitempty"`

		Resources []*VirtualMachineExtension `json:"resources,omitempty"`
	}

	data.Identity = m.Identity

	data.Plan = m.Plan

	data.Properties = m.Properties

	data.Resources = m.Resources

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this virtual machine
func (m *VirtualMachine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachine) validateIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.Identity) { // not required
		return nil
	}

	if m.Identity != nil {

		if err := m.Identity.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VirtualMachine) validatePlan(formats strfmt.Registry) error {

	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {

		if err := m.Plan.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VirtualMachine) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {

		if err := m.Properties.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VirtualMachine) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {

		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {

			if err := m.Resources[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
