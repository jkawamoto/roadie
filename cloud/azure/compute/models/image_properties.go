package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// ImageProperties Describes the properties of an Image.
// swagger:model ImageProperties
type ImageProperties struct {

	// The provisioning state.
	// Read Only: true
	ProvisioningState string `json:"provisioningState,omitempty"`

	// The source virtual machine from which Image is created.
	SourceVirtualMachine *SubResource `json:"sourceVirtualMachine,omitempty"`

	// The storage profile.
	StorageProfile *ImageStorageProfile `json:"storageProfile,omitempty"`
}

// Validate validates this image properties
func (m *ImageProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceVirtualMachine(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStorageProfile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageProperties) validateSourceVirtualMachine(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceVirtualMachine) { // not required
		return nil
	}

	if m.SourceVirtualMachine != nil {

		if err := m.SourceVirtualMachine.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ImageProperties) validateStorageProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageProfile) { // not required
		return nil
	}

	if m.StorageProfile != nil {

		if err := m.StorageProfile.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
