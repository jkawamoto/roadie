package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// VirtualMachineExtensionImageProperties Describes the properties of a Virtual Machine Extension Image.
// swagger:model VirtualMachineExtensionImageProperties
type VirtualMachineExtensionImageProperties struct {

	// The type of role (IaaS or PaaS) this extension supports.
	// Required: true
	ComputeRole *string `json:"computeRole"`

	// The schema defined by publisher, where extension consumers should provide settings in a matching schema.
	// Required: true
	HandlerSchema *string `json:"handlerSchema"`

	// The operating system this extension supports.
	// Required: true
	OperatingSystem *string `json:"operatingSystem"`

	// Whether the handler can support multiple extensions.
	SupportsMultipleExtensions bool `json:"supportsMultipleExtensions,omitempty"`

	// Whether the extension can be used on xRP VMScaleSets. By default existing extensions are usable on scalesets, but there might be cases where a publisher wants to explicitly indicate the extension is only enabled for CRP VMs but not VMSS.
	VMScaleSetEnabled bool `json:"vmScaleSetEnabled,omitempty"`
}

// Validate validates this virtual machine extension image properties
func (m *VirtualMachineExtensionImageProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputeRole(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHandlerSchema(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOperatingSystem(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineExtensionImageProperties) validateComputeRole(formats strfmt.Registry) error {

	if err := validate.Required("computeRole", "body", m.ComputeRole); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineExtensionImageProperties) validateHandlerSchema(formats strfmt.Registry) error {

	if err := validate.Required("handlerSchema", "body", m.HandlerSchema); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineExtensionImageProperties) validateOperatingSystem(formats strfmt.Registry) error {

	if err := validate.Required("operatingSystem", "body", m.OperatingSystem); err != nil {
		return err
	}

	return nil
}
