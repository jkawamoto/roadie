package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// ImageReference The image reference.
// swagger:model ImageReference
type ImageReference struct {
	SubResource

	// The image offer.
	Offer string `json:"offer,omitempty"`

	// The image publisher.
	Publisher string `json:"publisher,omitempty"`

	// The image SKU.
	Sku string `json:"sku,omitempty"`

	// The image version. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor and Build are decimal numbers. Specify 'latest' to use the latest version of the image.
	Version string `json:"version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ImageReference) UnmarshalJSON(raw []byte) error {
	var data struct {
		Offer string `json:"offer,omitempty"`

		Publisher string `json:"publisher,omitempty"`

		Sku string `json:"sku,omitempty"`

		Version string `json:"version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.Offer = data.Offer

	m.Publisher = data.Publisher

	m.Sku = data.Sku

	m.Version = data.Version

	var aO0 SubResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SubResource = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ImageReference) MarshalJSON() ([]byte, error) {
	var _parts [][]byte
	var data struct {
		Offer string `json:"offer,omitempty"`

		Publisher string `json:"publisher,omitempty"`

		Sku string `json:"sku,omitempty"`

		Version string `json:"version,omitempty"`
	}

	data.Offer = m.Offer

	data.Publisher = m.Publisher

	data.Sku = m.Sku

	data.Version = m.Version

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	aO0, err := swag.WriteJSON(m.SubResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this image reference
func (m *ImageReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.SubResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
