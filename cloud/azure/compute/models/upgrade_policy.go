package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// UpgradePolicy Describes an upgrade policy - automatic or manual.
// swagger:model UpgradePolicy
type UpgradePolicy struct {

	// The upgrade mode.
	Mode string `json:"mode,omitempty"`
}

// Validate validates this upgrade policy
func (m *UpgradePolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var upgradePolicyTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Automatic","Manual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradePolicyTypeModePropEnum = append(upgradePolicyTypeModePropEnum, v)
	}
}

const (
	// UpgradePolicyModeAutomatic captures enum value "Automatic"
	UpgradePolicyModeAutomatic string = "Automatic"
	// UpgradePolicyModeManual captures enum value "Manual"
	UpgradePolicyModeManual string = "Manual"
)

// prop value enum
func (m *UpgradePolicy) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, upgradePolicyTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpgradePolicy) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}
