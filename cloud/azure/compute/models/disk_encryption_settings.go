package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// DiskEncryptionSettings Describes a Encryption Settings for a Disk
// swagger:model DiskEncryptionSettings
type DiskEncryptionSettings struct {

	// The disk encryption key which is a Key Vault Secret.
	DiskEncryptionKey *KeyVaultSecretReference `json:"diskEncryptionKey,omitempty"`

	// Specifies whether disk encryption should be enabled on the virtual machine.
	Enabled bool `json:"enabled,omitempty"`

	// The key encryption key which is Key Vault Key.
	KeyEncryptionKey *KeyVaultKeyReference `json:"keyEncryptionKey,omitempty"`
}

// Validate validates this disk encryption settings
func (m *DiskEncryptionSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskEncryptionKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKeyEncryptionKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiskEncryptionSettings) validateDiskEncryptionKey(formats strfmt.Registry) error {

	if swag.IsZero(m.DiskEncryptionKey) { // not required
		return nil
	}

	if m.DiskEncryptionKey != nil {

		if err := m.DiskEncryptionKey.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *DiskEncryptionSettings) validateKeyEncryptionKey(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyEncryptionKey) { // not required
		return nil
	}

	if m.KeyEncryptionKey != nil {

		if err := m.KeyEncryptionKey.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
