package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// AdditionalUnattendContent Additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is a applied.
// swagger:model AdditionalUnattendContent
type AdditionalUnattendContent struct {

	// The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
	ComponentName string `json:"componentName,omitempty"`

	// XML formatted content that is added to the unattend.xml file in the specified pass and component. The XML must be less than 4 KB and must include the root element for the setting or feature that is being inserted.
	Content string `json:"content,omitempty"`

	// The pass name. Currently, the only allowable value is oobeSystem.
	PassName string `json:"passName,omitempty"`

	// Setting name (e.g. FirstLogonCommands, AutoLogon )
	SettingName string `json:"settingName,omitempty"`
}

// Validate validates this additional unattend content
func (m *AdditionalUnattendContent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponentName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePassName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSettingName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var additionalUnattendContentTypeComponentNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Microsoft-Windows-Shell-Setup"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		additionalUnattendContentTypeComponentNamePropEnum = append(additionalUnattendContentTypeComponentNamePropEnum, v)
	}
}

const (
	// AdditionalUnattendContentComponentNameMicrosoftWindowsShellSetup captures enum value "Microsoft-Windows-Shell-Setup"
	AdditionalUnattendContentComponentNameMicrosoftWindowsShellSetup string = "Microsoft-Windows-Shell-Setup"
)

// prop value enum
func (m *AdditionalUnattendContent) validateComponentNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, additionalUnattendContentTypeComponentNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AdditionalUnattendContent) validateComponentName(formats strfmt.Registry) error {

	if swag.IsZero(m.ComponentName) { // not required
		return nil
	}

	// value enum
	if err := m.validateComponentNameEnum("componentName", "body", m.ComponentName); err != nil {
		return err
	}

	return nil
}

var additionalUnattendContentTypePassNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["oobeSystem"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		additionalUnattendContentTypePassNamePropEnum = append(additionalUnattendContentTypePassNamePropEnum, v)
	}
}

const (
	// AdditionalUnattendContentPassNameOobeSystem captures enum value "oobeSystem"
	AdditionalUnattendContentPassNameOobeSystem string = "oobeSystem"
)

// prop value enum
func (m *AdditionalUnattendContent) validatePassNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, additionalUnattendContentTypePassNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AdditionalUnattendContent) validatePassName(formats strfmt.Registry) error {

	if swag.IsZero(m.PassName) { // not required
		return nil
	}

	// value enum
	if err := m.validatePassNameEnum("passName", "body", m.PassName); err != nil {
		return err
	}

	return nil
}

var additionalUnattendContentTypeSettingNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AutoLogon","FirstLogonCommands"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		additionalUnattendContentTypeSettingNamePropEnum = append(additionalUnattendContentTypeSettingNamePropEnum, v)
	}
}

const (
	// AdditionalUnattendContentSettingNameAutoLogon captures enum value "AutoLogon"
	AdditionalUnattendContentSettingNameAutoLogon string = "AutoLogon"
	// AdditionalUnattendContentSettingNameFirstLogonCommands captures enum value "FirstLogonCommands"
	AdditionalUnattendContentSettingNameFirstLogonCommands string = "FirstLogonCommands"
)

// prop value enum
func (m *AdditionalUnattendContent) validateSettingNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, additionalUnattendContentTypeSettingNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AdditionalUnattendContent) validateSettingName(formats strfmt.Registry) error {

	if swag.IsZero(m.SettingName) { // not required
		return nil
	}

	// value enum
	if err := m.validateSettingNameEnum("settingName", "body", m.SettingName); err != nil {
		return err
	}

	return nil
}
