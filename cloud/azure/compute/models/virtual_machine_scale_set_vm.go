package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// VirtualMachineScaleSetVM Describes a virtual machine scale set virtual machine.
// swagger:model VirtualMachineScaleSetVM
type VirtualMachineScaleSetVM struct {
	Resource

	// The virtual machine instance ID.
	// Read Only: true
	InstanceID string `json:"instanceId,omitempty"`

	// The purchase plan when deploying virtual machine from VM Marketplace images.
	Plan *Plan `json:"plan,omitempty"`

	// properties
	Properties *VirtualMachineScaleSetVMProperties `json:"properties,omitempty"`

	// The virtual machine child extension resources.
	// Read Only: true
	Resources []*VirtualMachineExtension `json:"resources"`

	// The virtual machine SKU.
	// Read Only: true
	Sku *Sku `json:"sku,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VirtualMachineScaleSetVM) UnmarshalJSON(raw []byte) error {
	var data struct {
		InstanceID string `json:"instanceId,omitempty"`

		Plan *Plan `json:"plan,omitempty"`

		Properties *VirtualMachineScaleSetVMProperties `json:"properties,omitempty"`

		Resources []*VirtualMachineExtension `json:"resources,omitempty"`

		Sku *Sku `json:"sku,omitempty"`
	}
	if err := swag.ReadJSON(raw, &data); err != nil {
		return err
	}

	m.InstanceID = data.InstanceID

	m.Plan = data.Plan

	m.Properties = data.Properties

	m.Resources = data.Resources

	m.Sku = data.Sku

	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VirtualMachineScaleSetVM) MarshalJSON() ([]byte, error) {
	var _parts [][]byte
	var data struct {
		InstanceID string `json:"instanceId,omitempty"`

		Plan *Plan `json:"plan,omitempty"`

		Properties *VirtualMachineScaleSetVMProperties `json:"properties,omitempty"`

		Resources []*VirtualMachineExtension `json:"resources,omitempty"`

		Sku *Sku `json:"sku,omitempty"`
	}

	data.InstanceID = m.InstanceID

	data.Plan = m.Plan

	data.Properties = m.Properties

	data.Resources = m.Resources

	data.Sku = m.Sku

	jsonData, err := swag.WriteJSON(data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, jsonData)

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this virtual machine scale set VM
func (m *VirtualMachineScaleSetVM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSku(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineScaleSetVM) validatePlan(formats strfmt.Registry) error {

	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {

		if err := m.Plan.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VirtualMachineScaleSetVM) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {

		if err := m.Properties.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *VirtualMachineScaleSetVM) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {

		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {

			if err := m.Resources[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineScaleSetVM) validateSku(formats strfmt.Registry) error {

	if swag.IsZero(m.Sku) { // not required
		return nil
	}

	if m.Sku != nil {

		if err := m.Sku.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
