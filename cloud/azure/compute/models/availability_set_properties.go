package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// AvailabilitySetProperties The instance view of a resource.
// swagger:model AvailabilitySetProperties
type AvailabilitySetProperties struct {

	// If the availability set supports managed disks.
	Managed bool `json:"managed,omitempty"`

	// Fault Domain count.
	PlatformFaultDomainCount int32 `json:"platformFaultDomainCount,omitempty"`

	// Update Domain count.
	PlatformUpdateDomainCount int32 `json:"platformUpdateDomainCount,omitempty"`

	// The resource status information.
	// Read Only: true
	Statuses []*InstanceViewStatus `json:"statuses"`

	// A list of references to all virtual machines in the availability set.
	VirtualMachines []*SubResource `json:"virtualMachines"`
}

// Validate validates this availability set properties
func (m *AvailabilitySetProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatuses(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVirtualMachines(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailabilitySetProperties) validateStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.Statuses) { // not required
		return nil
	}

	for i := 0; i < len(m.Statuses); i++ {

		if swag.IsZero(m.Statuses[i]) { // not required
			continue
		}

		if m.Statuses[i] != nil {

			if err := m.Statuses[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *AvailabilitySetProperties) validateVirtualMachines(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualMachines) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualMachines); i++ {

		if swag.IsZero(m.VirtualMachines[i]) { // not required
			continue
		}

		if m.VirtualMachines[i] != nil {

			if err := m.VirtualMachines[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
