package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// WindowsConfiguration Describes Windows Configuration of the OS Profile.
// swagger:model WindowsConfiguration
type WindowsConfiguration struct {

	// Additional base-64 encoded XML formatted information that can be included in the Unattend.xml file.
	AdditionalUnattendContent []*AdditionalUnattendContent `json:"additionalUnattendContent"`

	// Indicates whether Windows updates are automatically installed on the VM.
	EnableAutomaticUpdates bool `json:"enableAutomaticUpdates,omitempty"`

	// Indicates whether the virtual machine agent should be provisioned on the Virtual Machine. If not specified, then the default behavior is to set it to true.
	ProvisionVMAgent bool `json:"provisionVMAgent,omitempty"`

	// The time zone of the VM
	TimeZone string `json:"timeZone,omitempty"`

	// The Windows Remote Management configuration of the VM
	WinRM *WinRMConfiguration `json:"winRM,omitempty"`
}

// Validate validates this windows configuration
func (m *WindowsConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalUnattendContent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWinRM(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WindowsConfiguration) validateAdditionalUnattendContent(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalUnattendContent) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalUnattendContent); i++ {

		if swag.IsZero(m.AdditionalUnattendContent[i]) { // not required
			continue
		}

		if m.AdditionalUnattendContent[i] != nil {

			if err := m.AdditionalUnattendContent[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *WindowsConfiguration) validateWinRM(formats strfmt.Registry) error {

	if swag.IsZero(m.WinRM) { // not required
		return nil
	}

	if m.WinRM != nil {

		if err := m.WinRM.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
