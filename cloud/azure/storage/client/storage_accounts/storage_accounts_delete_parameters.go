package storage_accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStorageAccountsDeleteParams creates a new StorageAccountsDeleteParams object
// with the default values initialized.
func NewStorageAccountsDeleteParams() *StorageAccountsDeleteParams {
	var ()
	return &StorageAccountsDeleteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStorageAccountsDeleteParamsWithTimeout creates a new StorageAccountsDeleteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStorageAccountsDeleteParamsWithTimeout(timeout time.Duration) *StorageAccountsDeleteParams {
	var ()
	return &StorageAccountsDeleteParams{

		timeout: timeout,
	}
}

// NewStorageAccountsDeleteParamsWithContext creates a new StorageAccountsDeleteParams object
// with the default values initialized, and the ability to set a context for a request
func NewStorageAccountsDeleteParamsWithContext(ctx context.Context) *StorageAccountsDeleteParams {
	var ()
	return &StorageAccountsDeleteParams{

		Context: ctx,
	}
}

// NewStorageAccountsDeleteParamsWithHTTPClient creates a new StorageAccountsDeleteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStorageAccountsDeleteParamsWithHTTPClient(client *http.Client) *StorageAccountsDeleteParams {
	var ()
	return &StorageAccountsDeleteParams{
		HTTPClient: client,
	}
}

/*StorageAccountsDeleteParams contains all the parameters to send to the API endpoint
for the storage accounts delete operation typically these are written to a http.Request
*/
type StorageAccountsDeleteParams struct {

	/*AccountName
	  The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.

	*/
	AccountName string
	/*APIVersion
	  Client Api Version.

	*/
	APIVersion string
	/*ResourceGroupName
	  The name of the resource group within the user's subscription. The name is case insensitive.

	*/
	ResourceGroupName string
	/*SubscriptionID
	  Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.

	*/
	SubscriptionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the storage accounts delete params
func (o *StorageAccountsDeleteParams) WithTimeout(timeout time.Duration) *StorageAccountsDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the storage accounts delete params
func (o *StorageAccountsDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the storage accounts delete params
func (o *StorageAccountsDeleteParams) WithContext(ctx context.Context) *StorageAccountsDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the storage accounts delete params
func (o *StorageAccountsDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the storage accounts delete params
func (o *StorageAccountsDeleteParams) WithHTTPClient(client *http.Client) *StorageAccountsDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the storage accounts delete params
func (o *StorageAccountsDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountName adds the accountName to the storage accounts delete params
func (o *StorageAccountsDeleteParams) WithAccountName(accountName string) *StorageAccountsDeleteParams {
	o.SetAccountName(accountName)
	return o
}

// SetAccountName adds the accountName to the storage accounts delete params
func (o *StorageAccountsDeleteParams) SetAccountName(accountName string) {
	o.AccountName = accountName
}

// WithAPIVersion adds the aPIVersion to the storage accounts delete params
func (o *StorageAccountsDeleteParams) WithAPIVersion(aPIVersion string) *StorageAccountsDeleteParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the storage accounts delete params
func (o *StorageAccountsDeleteParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithResourceGroupName adds the resourceGroupName to the storage accounts delete params
func (o *StorageAccountsDeleteParams) WithResourceGroupName(resourceGroupName string) *StorageAccountsDeleteParams {
	o.SetResourceGroupName(resourceGroupName)
	return o
}

// SetResourceGroupName adds the resourceGroupName to the storage accounts delete params
func (o *StorageAccountsDeleteParams) SetResourceGroupName(resourceGroupName string) {
	o.ResourceGroupName = resourceGroupName
}

// WithSubscriptionID adds the subscriptionID to the storage accounts delete params
func (o *StorageAccountsDeleteParams) WithSubscriptionID(subscriptionID string) *StorageAccountsDeleteParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the storage accounts delete params
func (o *StorageAccountsDeleteParams) SetSubscriptionID(subscriptionID string) {
	o.SubscriptionID = subscriptionID
}

// WriteToRequest writes these params to a swagger request
func (o *StorageAccountsDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountName
	if err := r.SetPathParam("accountName", o.AccountName); err != nil {
		return err
	}

	// query param api-version
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if qAPIVersion != "" {
		if err := r.SetQueryParam("api-version", qAPIVersion); err != nil {
			return err
		}
	}

	// path param resourceGroupName
	if err := r.SetPathParam("resourceGroupName", o.ResourceGroupName); err != nil {
		return err
	}

	// path param subscriptionId
	if err := r.SetPathParam("subscriptionId", o.SubscriptionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
