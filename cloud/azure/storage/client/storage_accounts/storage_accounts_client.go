package storage_accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage accounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage accounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
StorageAccountsCheckNameAvailability Checks that the storage account name is valid and is not already in use.
*/
func (a *Client) StorageAccountsCheckNameAvailability(params *StorageAccountsCheckNameAvailabilityParams) (*StorageAccountsCheckNameAvailabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageAccountsCheckNameAvailabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageAccounts_CheckNameAvailability",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageAccountsCheckNameAvailabilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StorageAccountsCheckNameAvailabilityOK), nil

}

/*
StorageAccountsCreate Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
*/
func (a *Client) StorageAccountsCreate(params *StorageAccountsCreateParams) (*StorageAccountsCreateOK, *StorageAccountsCreateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageAccountsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageAccounts_Create",
		Method:             "PUT",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageAccountsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StorageAccountsCreateOK:
		return value, nil, nil
	case *StorageAccountsCreateAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
StorageAccountsDelete Deletes a storage account in Microsoft Azure.
*/
func (a *Client) StorageAccountsDelete(params *StorageAccountsDeleteParams) (*StorageAccountsDeleteOK, *StorageAccountsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageAccountsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageAccounts_Delete",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageAccountsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StorageAccountsDeleteOK:
		return value, nil, nil
	case *StorageAccountsDeleteNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
StorageAccountsGetProperties Returns the properties for the specified storage account including but not limited to name, SKU name, location, and account status. The ListKeys operation should be used to retrieve storage keys.
*/
func (a *Client) StorageAccountsGetProperties(params *StorageAccountsGetPropertiesParams) (*StorageAccountsGetPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageAccountsGetPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageAccounts_GetProperties",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageAccountsGetPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StorageAccountsGetPropertiesOK), nil

}

/*
StorageAccountsList Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.
*/
func (a *Client) StorageAccountsList(params *StorageAccountsListParams) (*StorageAccountsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageAccountsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageAccounts_List",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageAccountsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StorageAccountsListOK), nil

}

/*
StorageAccountsListAccountSAS List SAS credentials of a storage account.
*/
func (a *Client) StorageAccountsListAccountSAS(params *StorageAccountsListAccountSASParams) (*StorageAccountsListAccountSASOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageAccountsListAccountSASParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageAccounts_ListAccountSAS",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListAccountSas",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageAccountsListAccountSASReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StorageAccountsListAccountSASOK), nil

}

/*
StorageAccountsListByResourceGroup Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.
*/
func (a *Client) StorageAccountsListByResourceGroup(params *StorageAccountsListByResourceGroupParams) (*StorageAccountsListByResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageAccountsListByResourceGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageAccounts_ListByResourceGroup",
		Method:             "GET",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageAccountsListByResourceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StorageAccountsListByResourceGroupOK), nil

}

/*
StorageAccountsListKeys Lists the access keys for the specified storage account.
*/
func (a *Client) StorageAccountsListKeys(params *StorageAccountsListKeysParams) (*StorageAccountsListKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageAccountsListKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageAccounts_ListKeys",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageAccountsListKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StorageAccountsListKeysOK), nil

}

/*
StorageAccountsListServiceSAS List service SAS credentials of a specific resource.
*/
func (a *Client) StorageAccountsListServiceSAS(params *StorageAccountsListServiceSASParams) (*StorageAccountsListServiceSASOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageAccountsListServiceSASParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageAccounts_ListServiceSAS",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListServiceSas",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageAccountsListServiceSASReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StorageAccountsListServiceSASOK), nil

}

/*
StorageAccountsRegenerateKey Regenerates one of the access keys for the specified storage account.
*/
func (a *Client) StorageAccountsRegenerateKey(params *StorageAccountsRegenerateKeyParams) (*StorageAccountsRegenerateKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageAccountsRegenerateKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageAccounts_RegenerateKey",
		Method:             "POST",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageAccountsRegenerateKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StorageAccountsRegenerateKeyOK), nil

}

/*
StorageAccountsUpdate The update operation can be used to update the SKU, encryption, access tier, or tags for a storage account. It can also be used to map the account to a custom domain. Only one custom domain is supported per storage account; the replacement/change of custom domain is not supported. In order to replace an old custom domain, the old value must be cleared/unregistered before a new value can be set. The update of multiple properties is supported. This call does not change the storage keys for the account. If you want to change the storage account keys, use the regenerate keys operation. The location and name of the storage account cannot be changed after creation.
*/
func (a *Client) StorageAccountsUpdate(params *StorageAccountsUpdateParams) (*StorageAccountsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageAccountsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StorageAccounts_Update",
		Method:             "PATCH",
		PathPattern:        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageAccountsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StorageAccountsUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
