package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Encryption The encryption settings on the storage account.
// swagger:model Encryption
type Encryption struct {

	// The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage
	// Required: true
	KeySource *string `json:"keySource"`

	// List of services which support encryption.
	Services *EncryptionServices `json:"services,omitempty"`
}

// Validate validates this encryption
func (m *Encryption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeySource(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var encryptionTypeKeySourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Microsoft.Storage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		encryptionTypeKeySourcePropEnum = append(encryptionTypeKeySourcePropEnum, v)
	}
}

const (
	// EncryptionKeySourceMicrosoftStorage captures enum value "Microsoft.Storage"
	EncryptionKeySourceMicrosoftStorage string = "Microsoft.Storage"
)

// prop value enum
func (m *Encryption) validateKeySourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, encryptionTypeKeySourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Encryption) validateKeySource(formats strfmt.Registry) error {

	if err := validate.Required("keySource", "body", m.KeySource); err != nil {
		return err
	}

	// value enum
	if err := m.validateKeySourceEnum("keySource", "body", *m.KeySource); err != nil {
		return err
	}

	return nil
}

func (m *Encryption) validateServices(formats strfmt.Registry) error {

	if swag.IsZero(m.Services) { // not required
		return nil
	}

	if m.Services != nil {

		if err := m.Services.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("services")
			}
			return err
		}
	}

	return nil
}
