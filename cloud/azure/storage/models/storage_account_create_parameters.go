package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageAccountCreateParameters The parameters used when creating a storage account.
// swagger:model StorageAccountCreateParameters
type StorageAccountCreateParameters struct {

	// Required. Indicates the type of storage account.
	// Required: true
	Kind *string `json:"kind"`

	// Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo region is specified on update, the request will succeed.
	// Required: true
	Location *string `json:"location"`

	// properties
	Properties *StorageAccountPropertiesCreateParameters `json:"properties,omitempty"`

	// Required. Gets or sets the sku name.
	// Required: true
	Sku *Sku `json:"sku"`

	// Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters.
	Tags map[string]string `json:"tags,omitempty"`
}

// Validate validates this storage account create parameters
func (m *StorageAccountCreateParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSku(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageAccountCreateParametersTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Storage","BlobStorage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageAccountCreateParametersTypeKindPropEnum = append(storageAccountCreateParametersTypeKindPropEnum, v)
	}
}

const (
	// StorageAccountCreateParametersKindStorage captures enum value "Storage"
	StorageAccountCreateParametersKindStorage string = "Storage"
	// StorageAccountCreateParametersKindBlobStorage captures enum value "BlobStorage"
	StorageAccountCreateParametersKindBlobStorage string = "BlobStorage"
)

// prop value enum
func (m *StorageAccountCreateParameters) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageAccountCreateParametersTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageAccountCreateParameters) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", *m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *StorageAccountCreateParameters) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	return nil
}

func (m *StorageAccountCreateParameters) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {

		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *StorageAccountCreateParameters) validateSku(formats strfmt.Registry) error {

	if err := validate.Required("sku", "body", m.Sku); err != nil {
		return err
	}

	if m.Sku != nil {

		if err := m.Sku.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sku")
			}
			return err
		}
	}

	return nil
}
