package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceSasParameters The parameters to list service SAS credentials of a speicific resource.
// swagger:model ServiceSasParameters
type ServiceSasParameters struct {

	// The canonical path to the signed resource.
	// Required: true
	CanonicalizedResource *string `json:"canonicalizedResource"`

	// The end of partition key.
	EndPk string `json:"endPk,omitempty"`

	// The end of row key.
	EndRk string `json:"endRk,omitempty"`

	// The key to sign the account SAS token with.
	KeyToSign string `json:"keyToSign,omitempty"`

	// The response header override for cache control.
	Rscc string `json:"rscc,omitempty"`

	// The response header override for content disposition.
	Rscd string `json:"rscd,omitempty"`

	// The response header override for content encoding.
	Rsce string `json:"rsce,omitempty"`

	// The response header override for content language.
	Rscl string `json:"rscl,omitempty"`

	// The response header override for content type.
	Rsct string `json:"rsct,omitempty"`

	// The time at which the shared access signature becomes invalid.
	SignedExpiry strfmt.DateTime `json:"signedExpiry,omitempty"`

	// A unique value up to 64 characters in length that correlates to an access policy specified for the container, queue, or table.
	// Max Length: 64
	SignedIdentifier string `json:"signedIdentifier,omitempty"`

	// An IP address or a range of IP addresses from which to accept requests.
	SignedIP string `json:"signedIp,omitempty"`

	// The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
	SignedPermission string `json:"signedPermission,omitempty"`

	// The protocol permitted for a request made with the account SAS.
	SignedProtocol string `json:"signedProtocol,omitempty"`

	// The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).
	// Required: true
	SignedResource *string `json:"signedResource"`

	// The time at which the SAS becomes valid.
	SignedStart strfmt.DateTime `json:"signedStart,omitempty"`

	// The start of partition key.
	StartPk string `json:"startPk,omitempty"`

	// The start of row key.
	StartRk string `json:"startRk,omitempty"`
}

// Validate validates this service sas parameters
func (m *ServiceSasParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanonicalizedResource(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSignedIdentifier(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSignedPermission(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSignedProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSignedResource(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceSasParameters) validateCanonicalizedResource(formats strfmt.Registry) error {

	if err := validate.Required("canonicalizedResource", "body", m.CanonicalizedResource); err != nil {
		return err
	}

	return nil
}

func (m *ServiceSasParameters) validateSignedIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.SignedIdentifier) { // not required
		return nil
	}

	if err := validate.MaxLength("signedIdentifier", "body", string(m.SignedIdentifier), 64); err != nil {
		return err
	}

	return nil
}

var serviceSasParametersTypeSignedPermissionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["r","d","w","l","a","c","u","p"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceSasParametersTypeSignedPermissionPropEnum = append(serviceSasParametersTypeSignedPermissionPropEnum, v)
	}
}

const (
	// ServiceSasParametersSignedPermissionR captures enum value "r"
	ServiceSasParametersSignedPermissionR string = "r"
	// ServiceSasParametersSignedPermissionD captures enum value "d"
	ServiceSasParametersSignedPermissionD string = "d"
	// ServiceSasParametersSignedPermissionW captures enum value "w"
	ServiceSasParametersSignedPermissionW string = "w"
	// ServiceSasParametersSignedPermissionL captures enum value "l"
	ServiceSasParametersSignedPermissionL string = "l"
	// ServiceSasParametersSignedPermissionA captures enum value "a"
	ServiceSasParametersSignedPermissionA string = "a"
	// ServiceSasParametersSignedPermissionC captures enum value "c"
	ServiceSasParametersSignedPermissionC string = "c"
	// ServiceSasParametersSignedPermissionU captures enum value "u"
	ServiceSasParametersSignedPermissionU string = "u"
	// ServiceSasParametersSignedPermissionP captures enum value "p"
	ServiceSasParametersSignedPermissionP string = "p"
)

// prop value enum
func (m *ServiceSasParameters) validateSignedPermissionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceSasParametersTypeSignedPermissionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceSasParameters) validateSignedPermission(formats strfmt.Registry) error {

	if swag.IsZero(m.SignedPermission) { // not required
		return nil
	}

	// value enum
	if err := m.validateSignedPermissionEnum("signedPermission", "body", m.SignedPermission); err != nil {
		return err
	}

	return nil
}

var serviceSasParametersTypeSignedProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["https,http","https"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceSasParametersTypeSignedProtocolPropEnum = append(serviceSasParametersTypeSignedProtocolPropEnum, v)
	}
}

const (
	// ServiceSasParametersSignedProtocolHTTPSHTTP captures enum value "https,http"
	ServiceSasParametersSignedProtocolHTTPSHTTP string = "https,http"
	// ServiceSasParametersSignedProtocolHTTPS captures enum value "https"
	ServiceSasParametersSignedProtocolHTTPS string = "https"
)

// prop value enum
func (m *ServiceSasParameters) validateSignedProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceSasParametersTypeSignedProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceSasParameters) validateSignedProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.SignedProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateSignedProtocolEnum("signedProtocol", "body", m.SignedProtocol); err != nil {
		return err
	}

	return nil
}

var serviceSasParametersTypeSignedResourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["b","c","f","s"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceSasParametersTypeSignedResourcePropEnum = append(serviceSasParametersTypeSignedResourcePropEnum, v)
	}
}

const (
	// ServiceSasParametersSignedResourceB captures enum value "b"
	ServiceSasParametersSignedResourceB string = "b"
	// ServiceSasParametersSignedResourceC captures enum value "c"
	ServiceSasParametersSignedResourceC string = "c"
	// ServiceSasParametersSignedResourceF captures enum value "f"
	ServiceSasParametersSignedResourceF string = "f"
	// ServiceSasParametersSignedResourceS captures enum value "s"
	ServiceSasParametersSignedResourceS string = "s"
)

// prop value enum
func (m *ServiceSasParameters) validateSignedResourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceSasParametersTypeSignedResourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceSasParameters) validateSignedResource(formats strfmt.Registry) error {

	if err := validate.Required("signedResource", "body", m.SignedResource); err != nil {
		return err
	}

	// value enum
	if err := m.validateSignedResourceEnum("signedResource", "body", *m.SignedResource); err != nil {
		return err
	}

	return nil
}
