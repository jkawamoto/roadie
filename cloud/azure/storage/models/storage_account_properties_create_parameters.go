package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageAccountPropertiesCreateParameters The parameters used to create the storage account.
// swagger:model StorageAccountPropertiesCreateParameters
type StorageAccountPropertiesCreateParameters struct {

	// Required for storage accounts where kind = BlobStorage. The access tier used for billing.
	AccessTier string `json:"accessTier,omitempty"`

	// User domain assigned to the storage account. Name is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property.
	CustomDomain *CustomDomain `json:"customDomain,omitempty"`

	// Provides the encryption settings on the account. If left unspecified the account encryption settings will remain the same. The default setting is unencrypted.
	Encryption *Encryption `json:"encryption,omitempty"`

	// Allows https traffic only to storage service if sets to true.
	SupportsHTTPSTrafficOnly *bool `json:"supportsHttpsTrafficOnly,omitempty"`
}

// Validate validates this storage account properties create parameters
func (m *StorageAccountPropertiesCreateParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessTier(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCustomDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEncryption(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageAccountPropertiesCreateParametersTypeAccessTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Hot","Cool"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageAccountPropertiesCreateParametersTypeAccessTierPropEnum = append(storageAccountPropertiesCreateParametersTypeAccessTierPropEnum, v)
	}
}

const (
	// StorageAccountPropertiesCreateParametersAccessTierHot captures enum value "Hot"
	StorageAccountPropertiesCreateParametersAccessTierHot string = "Hot"
	// StorageAccountPropertiesCreateParametersAccessTierCool captures enum value "Cool"
	StorageAccountPropertiesCreateParametersAccessTierCool string = "Cool"
)

// prop value enum
func (m *StorageAccountPropertiesCreateParameters) validateAccessTierEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageAccountPropertiesCreateParametersTypeAccessTierPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageAccountPropertiesCreateParameters) validateAccessTier(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessTier) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessTierEnum("accessTier", "body", m.AccessTier); err != nil {
		return err
	}

	return nil
}

func (m *StorageAccountPropertiesCreateParameters) validateCustomDomain(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomDomain) { // not required
		return nil
	}

	if m.CustomDomain != nil {

		if err := m.CustomDomain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customDomain")
			}
			return err
		}
	}

	return nil
}

func (m *StorageAccountPropertiesCreateParameters) validateEncryption(formats strfmt.Registry) error {

	if swag.IsZero(m.Encryption) { // not required
		return nil
	}

	if m.Encryption != nil {

		if err := m.Encryption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryption")
			}
			return err
		}
	}

	return nil
}
