package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageAccount The storage account.
// swagger:model StorageAccount
type StorageAccount struct {
	Resource

	// Gets the Kind.
	// Read Only: true
	Kind string `json:"kind,omitempty"`

	// properties
	Properties *StorageAccountProperties `json:"properties,omitempty"`

	// Gets the SKU.
	// Read Only: true
	Sku *Sku `json:"sku,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageAccount) UnmarshalJSON(raw []byte) error {

	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageAccount) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage account
func (m *StorageAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSku(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageAccountTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Storage","BlobStorage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageAccountTypeKindPropEnum = append(storageAccountTypeKindPropEnum, v)
	}
}

const (
	// StorageAccountKindStorage captures enum value "Storage"
	StorageAccountKindStorage string = "Storage"
	// StorageAccountKindBlobStorage captures enum value "BlobStorage"
	StorageAccountKindBlobStorage string = "BlobStorage"
)

// prop value enum
func (m *StorageAccount) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageAccountTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageAccount) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *StorageAccount) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {

		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *StorageAccount) validateSku(formats strfmt.Registry) error {

	if swag.IsZero(m.Sku) { // not required
		return nil
	}

	if m.Sku != nil {

		if err := m.Sku.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sku")
			}
			return err
		}
	}

	return nil
}
