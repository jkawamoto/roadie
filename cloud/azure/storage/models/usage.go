package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Usage Describes Storage Resource Usage.
// swagger:model Usage
type Usage struct {

	// Gets the current count of the allocated resources in the subscription.
	// Read Only: true
	CurrentValue int32 `json:"currentValue,omitempty"`

	// Gets the maximum count of the resources that can be allocated in the subscription.
	// Read Only: true
	Limit int32 `json:"limit,omitempty"`

	// Gets the name of the type of usage.
	// Read Only: true
	Name *UsageName `json:"name,omitempty"`

	// Gets the unit of measurement.
	// Read Only: true
	Unit string `json:"unit,omitempty"`
}

// Validate validates this usage
func (m *Usage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Usage) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if m.Name != nil {

		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

var usageTypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Count","Bytes","Seconds","Percent","CountsPerSecond","BytesPerSecond"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		usageTypeUnitPropEnum = append(usageTypeUnitPropEnum, v)
	}
}

const (
	// UsageUnitCount captures enum value "Count"
	UsageUnitCount string = "Count"
	// UsageUnitBytes captures enum value "Bytes"
	UsageUnitBytes string = "Bytes"
	// UsageUnitSeconds captures enum value "Seconds"
	UsageUnitSeconds string = "Seconds"
	// UsageUnitPercent captures enum value "Percent"
	UsageUnitPercent string = "Percent"
	// UsageUnitCountsPerSecond captures enum value "CountsPerSecond"
	UsageUnitCountsPerSecond string = "CountsPerSecond"
	// UsageUnitBytesPerSecond captures enum value "BytesPerSecond"
	UsageUnitBytesPerSecond string = "BytesPerSecond"
)

// prop value enum
func (m *Usage) validateUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, usageTypeUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Usage) validateUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateUnitEnum("unit", "body", m.Unit); err != nil {
		return err
	}

	return nil
}
