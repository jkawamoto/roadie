package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// StorageAccountCheckNameAvailabilityParameters The parameters used to check the availabity of the storage account name.
// swagger:model StorageAccountCheckNameAvailabilityParameters
type StorageAccountCheckNameAvailabilityParameters struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this storage account check name availability parameters
func (m *StorageAccountCheckNameAvailabilityParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageAccountCheckNameAvailabilityParameters) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var storageAccountCheckNameAvailabilityParametersTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Microsoft.Storage/storageAccounts"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageAccountCheckNameAvailabilityParametersTypeTypePropEnum = append(storageAccountCheckNameAvailabilityParametersTypeTypePropEnum, v)
	}
}

const (
	// StorageAccountCheckNameAvailabilityParametersTypeMicrosoftStorageStorageAccounts captures enum value "Microsoft.Storage/storageAccounts"
	StorageAccountCheckNameAvailabilityParametersTypeMicrosoftStorageStorageAccounts string = "Microsoft.Storage/storageAccounts"
)

// prop value enum
func (m *StorageAccountCheckNameAvailabilityParameters) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageAccountCheckNameAvailabilityParametersTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageAccountCheckNameAvailabilityParameters) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}
