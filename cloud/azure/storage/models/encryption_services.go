package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// EncryptionServices A list of services that support encryption.
// swagger:model EncryptionServices
type EncryptionServices struct {

	// The encryption function of the blob storage service.
	Blob *EncryptionService `json:"blob,omitempty"`

	// The encryption function of the file storage service.
	File *EncryptionService `json:"file,omitempty"`

	// The encryption function of the queue storage service.
	// Read Only: true
	Queue *EncryptionService `json:"queue,omitempty"`

	// The encryption function of the table storage service.
	// Read Only: true
	Table *EncryptionService `json:"table,omitempty"`
}

// Validate validates this encryption services
func (m *EncryptionServices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlob(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQueue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTable(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EncryptionServices) validateBlob(formats strfmt.Registry) error {

	if swag.IsZero(m.Blob) { // not required
		return nil
	}

	if m.Blob != nil {

		if err := m.Blob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blob")
			}
			return err
		}
	}

	return nil
}

func (m *EncryptionServices) validateFile(formats strfmt.Registry) error {

	if swag.IsZero(m.File) { // not required
		return nil
	}

	if m.File != nil {

		if err := m.File.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

func (m *EncryptionServices) validateQueue(formats strfmt.Registry) error {

	if swag.IsZero(m.Queue) { // not required
		return nil
	}

	if m.Queue != nil {

		if err := m.Queue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue")
			}
			return err
		}
	}

	return nil
}

func (m *EncryptionServices) validateTable(formats strfmt.Registry) error {

	if swag.IsZero(m.Table) { // not required
		return nil
	}

	if m.Table != nil {

		if err := m.Table.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("table")
			}
			return err
		}
	}

	return nil
}
