package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountSasParameters The parameters to list SAS credentials of a storage account.
// swagger:model AccountSasParameters
type AccountSasParameters struct {

	// The key to sign the account SAS token with.
	KeyToSign string `json:"keyToSign,omitempty"`

	// The time at which the shared access signature becomes invalid.
	// Required: true
	SignedExpiry *strfmt.DateTime `json:"signedExpiry"`

	// An IP address or a range of IP addresses from which to accept requests.
	SignedIP string `json:"signedIp,omitempty"`

	// The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
	// Required: true
	SignedPermission *string `json:"signedPermission"`

	// The protocol permitted for a request made with the account SAS.
	SignedProtocol string `json:"signedProtocol,omitempty"`

	// The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
	// Required: true
	SignedResourceTypes *string `json:"signedResourceTypes"`

	// The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).
	// Required: true
	SignedServices *string `json:"signedServices"`

	// The time at which the SAS becomes valid.
	SignedStart strfmt.DateTime `json:"signedStart,omitempty"`
}

// Validate validates this account sas parameters
func (m *AccountSasParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSignedExpiry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSignedPermission(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSignedProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSignedResourceTypes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSignedServices(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountSasParameters) validateSignedExpiry(formats strfmt.Registry) error {

	if err := validate.Required("signedExpiry", "body", m.SignedExpiry); err != nil {
		return err
	}

	return nil
}

var accountSasParametersTypeSignedPermissionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["r","d","w","l","a","c","u","p"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountSasParametersTypeSignedPermissionPropEnum = append(accountSasParametersTypeSignedPermissionPropEnum, v)
	}
}

const (
	// AccountSasParametersSignedPermissionR captures enum value "r"
	AccountSasParametersSignedPermissionR string = "r"
	// AccountSasParametersSignedPermissionD captures enum value "d"
	AccountSasParametersSignedPermissionD string = "d"
	// AccountSasParametersSignedPermissionW captures enum value "w"
	AccountSasParametersSignedPermissionW string = "w"
	// AccountSasParametersSignedPermissionL captures enum value "l"
	AccountSasParametersSignedPermissionL string = "l"
	// AccountSasParametersSignedPermissionA captures enum value "a"
	AccountSasParametersSignedPermissionA string = "a"
	// AccountSasParametersSignedPermissionC captures enum value "c"
	AccountSasParametersSignedPermissionC string = "c"
	// AccountSasParametersSignedPermissionU captures enum value "u"
	AccountSasParametersSignedPermissionU string = "u"
	// AccountSasParametersSignedPermissionP captures enum value "p"
	AccountSasParametersSignedPermissionP string = "p"
)

// prop value enum
func (m *AccountSasParameters) validateSignedPermissionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountSasParametersTypeSignedPermissionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccountSasParameters) validateSignedPermission(formats strfmt.Registry) error {

	if err := validate.Required("signedPermission", "body", m.SignedPermission); err != nil {
		return err
	}

	// value enum
	if err := m.validateSignedPermissionEnum("signedPermission", "body", *m.SignedPermission); err != nil {
		return err
	}

	return nil
}

var accountSasParametersTypeSignedProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["https,http","https"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountSasParametersTypeSignedProtocolPropEnum = append(accountSasParametersTypeSignedProtocolPropEnum, v)
	}
}

const (
	// AccountSasParametersSignedProtocolHTTPSHTTP captures enum value "https,http"
	AccountSasParametersSignedProtocolHTTPSHTTP string = "https,http"
	// AccountSasParametersSignedProtocolHTTPS captures enum value "https"
	AccountSasParametersSignedProtocolHTTPS string = "https"
)

// prop value enum
func (m *AccountSasParameters) validateSignedProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountSasParametersTypeSignedProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccountSasParameters) validateSignedProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.SignedProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateSignedProtocolEnum("signedProtocol", "body", m.SignedProtocol); err != nil {
		return err
	}

	return nil
}

var accountSasParametersTypeSignedResourceTypesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["s","c","o"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountSasParametersTypeSignedResourceTypesPropEnum = append(accountSasParametersTypeSignedResourceTypesPropEnum, v)
	}
}

const (
	// AccountSasParametersSignedResourceTypesS captures enum value "s"
	AccountSasParametersSignedResourceTypesS string = "s"
	// AccountSasParametersSignedResourceTypesC captures enum value "c"
	AccountSasParametersSignedResourceTypesC string = "c"
	// AccountSasParametersSignedResourceTypesO captures enum value "o"
	AccountSasParametersSignedResourceTypesO string = "o"
)

// prop value enum
func (m *AccountSasParameters) validateSignedResourceTypesEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountSasParametersTypeSignedResourceTypesPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccountSasParameters) validateSignedResourceTypes(formats strfmt.Registry) error {

	if err := validate.Required("signedResourceTypes", "body", m.SignedResourceTypes); err != nil {
		return err
	}

	// value enum
	if err := m.validateSignedResourceTypesEnum("signedResourceTypes", "body", *m.SignedResourceTypes); err != nil {
		return err
	}

	return nil
}

var accountSasParametersTypeSignedServicesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["b","q","t","f"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountSasParametersTypeSignedServicesPropEnum = append(accountSasParametersTypeSignedServicesPropEnum, v)
	}
}

const (
	// AccountSasParametersSignedServicesB captures enum value "b"
	AccountSasParametersSignedServicesB string = "b"
	// AccountSasParametersSignedServicesQ captures enum value "q"
	AccountSasParametersSignedServicesQ string = "q"
	// AccountSasParametersSignedServicesT captures enum value "t"
	AccountSasParametersSignedServicesT string = "t"
	// AccountSasParametersSignedServicesF captures enum value "f"
	AccountSasParametersSignedServicesF string = "f"
)

// prop value enum
func (m *AccountSasParameters) validateSignedServicesEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountSasParametersTypeSignedServicesPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccountSasParameters) validateSignedServices(formats strfmt.Registry) error {

	if err := validate.Required("signedServices", "body", m.SignedServices); err != nil {
		return err
	}

	// value enum
	if err := m.validateSignedServicesEnum("signedServices", "body", *m.SignedServices); err != nil {
		return err
	}

	return nil
}
