package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Sku The SKU of the storage account.
// swagger:model Sku
type Sku struct {

	// Gets or sets the sku name. Required for account creation; optional for update. Note that in older versions, sku name was called accountType.
	// Required: true
	Name *string `json:"name"`

	// Gets the sku tier. This is based on the SKU name.
	// Read Only: true
	Tier string `json:"tier,omitempty"`
}

// Validate validates this sku
func (m *Sku) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTier(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var skuTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Standard_LRS","Standard_GRS","Standard_RAGRS","Standard_ZRS","Premium_LRS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		skuTypeNamePropEnum = append(skuTypeNamePropEnum, v)
	}
}

const (
	// SkuNameStandardLRS captures enum value "Standard_LRS"
	SkuNameStandardLRS string = "Standard_LRS"
	// SkuNameStandardGRS captures enum value "Standard_GRS"
	SkuNameStandardGRS string = "Standard_GRS"
	// SkuNameStandardRAGRS captures enum value "Standard_RAGRS"
	SkuNameStandardRAGRS string = "Standard_RAGRS"
	// SkuNameStandardZRS captures enum value "Standard_ZRS"
	SkuNameStandardZRS string = "Standard_ZRS"
	// SkuNamePremiumLRS captures enum value "Premium_LRS"
	SkuNamePremiumLRS string = "Premium_LRS"
)

// prop value enum
func (m *Sku) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, skuTypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Sku) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameEnum("name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

var skuTypeTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Standard","Premium"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		skuTypeTierPropEnum = append(skuTypeTierPropEnum, v)
	}
}

const (
	// SkuTierStandard captures enum value "Standard"
	SkuTierStandard string = "Standard"
	// SkuTierPremium captures enum value "Premium"
	SkuTierPremium string = "Premium"
)

// prop value enum
func (m *Sku) validateTierEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, skuTypeTierPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Sku) validateTier(formats strfmt.Registry) error {

	if swag.IsZero(m.Tier) { // not required
		return nil
	}

	// value enum
	if err := m.validateTierEnum("tier", "body", m.Tier); err != nil {
		return err
	}

	return nil
}
