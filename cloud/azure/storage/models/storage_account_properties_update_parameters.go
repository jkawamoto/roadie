package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageAccountPropertiesUpdateParameters The parameters used when updating a storage account.
// swagger:model StorageAccountPropertiesUpdateParameters
type StorageAccountPropertiesUpdateParameters struct {

	// Required for storage accounts where kind = BlobStorage. The access tier used for billing.
	AccessTier string `json:"accessTier,omitempty"`

	// Custom domain assigned to the storage account by the user. Name is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property.
	CustomDomain *CustomDomain `json:"customDomain,omitempty"`

	// Provides the encryption settings on the account. The default setting is unencrypted.
	Encryption *Encryption `json:"encryption,omitempty"`

	// Allows https traffic only to storage service if sets to true.
	SupportsHTTPSTrafficOnly *bool `json:"supportsHttpsTrafficOnly,omitempty"`
}

// Validate validates this storage account properties update parameters
func (m *StorageAccountPropertiesUpdateParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessTier(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCustomDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEncryption(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageAccountPropertiesUpdateParametersTypeAccessTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Hot","Cool"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageAccountPropertiesUpdateParametersTypeAccessTierPropEnum = append(storageAccountPropertiesUpdateParametersTypeAccessTierPropEnum, v)
	}
}

const (
	// StorageAccountPropertiesUpdateParametersAccessTierHot captures enum value "Hot"
	StorageAccountPropertiesUpdateParametersAccessTierHot string = "Hot"
	// StorageAccountPropertiesUpdateParametersAccessTierCool captures enum value "Cool"
	StorageAccountPropertiesUpdateParametersAccessTierCool string = "Cool"
)

// prop value enum
func (m *StorageAccountPropertiesUpdateParameters) validateAccessTierEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageAccountPropertiesUpdateParametersTypeAccessTierPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageAccountPropertiesUpdateParameters) validateAccessTier(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessTier) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessTierEnum("accessTier", "body", m.AccessTier); err != nil {
		return err
	}

	return nil
}

func (m *StorageAccountPropertiesUpdateParameters) validateCustomDomain(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomDomain) { // not required
		return nil
	}

	if m.CustomDomain != nil {

		if err := m.CustomDomain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customDomain")
			}
			return err
		}
	}

	return nil
}

func (m *StorageAccountPropertiesUpdateParameters) validateEncryption(formats strfmt.Registry) error {

	if swag.IsZero(m.Encryption) { // not required
		return nil
	}

	if m.Encryption != nil {

		if err := m.Encryption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryption")
			}
			return err
		}
	}

	return nil
}
