package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckNameAvailabilityResult The CheckNameAvailability operation response.
// swagger:model CheckNameAvailabilityResult
type CheckNameAvailabilityResult struct {

	// Gets an error message explaining the Reason value in more detail.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used.
	// Read Only: true
	NameAvailable *bool `json:"nameAvailable,omitempty"`

	// Gets the reason that a storage account name could not be used. The Reason element is only returned if NameAvailable is false.
	// Read Only: true
	Reason string `json:"reason,omitempty"`
}

// Validate validates this check name availability result
func (m *CheckNameAvailabilityResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReason(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var checkNameAvailabilityResultTypeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AccountNameInvalid","AlreadyExists"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		checkNameAvailabilityResultTypeReasonPropEnum = append(checkNameAvailabilityResultTypeReasonPropEnum, v)
	}
}

const (
	// CheckNameAvailabilityResultReasonAccountNameInvalid captures enum value "AccountNameInvalid"
	CheckNameAvailabilityResultReasonAccountNameInvalid string = "AccountNameInvalid"
	// CheckNameAvailabilityResultReasonAlreadyExists captures enum value "AlreadyExists"
	CheckNameAvailabilityResultReasonAlreadyExists string = "AlreadyExists"
)

// prop value enum
func (m *CheckNameAvailabilityResult) validateReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, checkNameAvailabilityResultTypeReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CheckNameAvailabilityResult) validateReason(formats strfmt.Registry) error {

	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	// value enum
	if err := m.validateReasonEnum("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}
