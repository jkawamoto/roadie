<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Roadie</title>
    <link>https://jkawamoto.github.io/roadie/index.xml</link>
    <description>Recent content on Roadie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 May 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jkawamoto.github.io/roadie/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Authentication Failed</title>
      <link>https://jkawamoto.github.io/roadie/auth/error/</link>
      <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/auth/error/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Authentication process has been failed. Please close this page and try it again.&lt;/li&gt;
&lt;li&gt;認証手続きに失敗しました．このページを閉じてアプリケーションに戻ってください．&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Authentication Success</title>
      <link>https://jkawamoto.github.io/roadie/auth/succeed/</link>
      <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/auth/succeed/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Authentication process has been done successfully. Please close this page.&lt;/li&gt;
&lt;li&gt;認証手続きが終了しました．このページを閉じてアプリケーションに戻ってください．&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Licenses</title>
      <link>https://jkawamoto.github.io/roadie/info/licenses/</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/info/licenses/</guid>
      <description>

&lt;p&gt;This software is released under the GPLv3.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Copyright (C) 2016-2017 Junpei Kawamoto

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;notices-for-libraries&#34;&gt;Notices for libraries&lt;/h2&gt;

&lt;p&gt;This software uses the following open source libraries:&lt;/p&gt;

&lt;h3 id=&#34;chalk-https-github-com-ttacon-chalk&#34;&gt;&lt;a href=&#34;https://github.com/ttacon/chalk&#34;&gt;chalk&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Copyright &amp;copy; 2014 Trey Tacon&lt;/p&gt;

&lt;p&gt;Licensed under the MIT License.&lt;/p&gt;

&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.&lt;/p&gt;

&lt;h3 id=&#34;cli-https-github-com-urfave-cli&#34;&gt;&lt;a href=&#34;https://github.com/urfave/cli&#34;&gt;cli&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Copyright &amp;copy; 2016 Jeremy Saenz &amp;amp; Contributors&lt;/p&gt;

&lt;p&gt;Licensed under the MIT License.&lt;/p&gt;

&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.&lt;/p&gt;

&lt;h3 id=&#34;google-apis-client-library-for-go-https-github-com-google-google-api-go-client&#34;&gt;&lt;a href=&#34;https://github.com/google/google-api-go-client&#34;&gt;Google APIs Client Library for Go&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Copyright &amp;copy; 2011 Google Inc. All rights reserved.&lt;/p&gt;

&lt;p&gt;Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.&lt;/li&gt;
&lt;li&gt;Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following disclaimer
in the documentation and/or other materials provided with the
distribution.&lt;/li&gt;
&lt;li&gt;Neither the name of Google Inc. nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
&amp;ldquo;AS IS&amp;rdquo; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt;

&lt;h3 id=&#34;google-cloud-for-go-https-github-com-googlecloudplatform-google-cloud-go&#34;&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/google-cloud-go&#34;&gt;Google Cloud for Go&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Copyright 2014 Google Inc. All Rights Reserved.&lt;/p&gt;

&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &amp;ldquo;License&amp;rdquo;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &amp;ldquo;AS IS&amp;rdquo; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.&lt;/p&gt;

&lt;h3 id=&#34;interact-https-github-com-deiwin-interact&#34;&gt;&lt;a href=&#34;https://github.com/deiwin/interact&#34;&gt;Interact&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Copyright &amp;copy; 2015 Deiwin Sarjas&lt;/p&gt;

&lt;p&gt;Licensed under the MIT License.&lt;/p&gt;

&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;

&lt;h3 id=&#34;spinner-https-github-com-briandowns-spinner&#34;&gt;&lt;a href=&#34;https://github.com/briandowns/spinner&#34;&gt;Spinner&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Copyright Brian Downs.&lt;/p&gt;

&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &amp;ldquo;License&amp;rdquo;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &amp;ldquo;AS IS&amp;rdquo; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.&lt;/p&gt;

&lt;h3 id=&#34;uitable-https-github-com-gosuri-uitable&#34;&gt;&lt;a href=&#34;https://github.com/gosuri/uitable&#34;&gt;uitable&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Copyright &amp;copy; 2015, Greg Osuri&lt;/p&gt;

&lt;p&gt;Licensed under the MIT License.&lt;/p&gt;

&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;

&lt;h3 id=&#34;pb-https-github-com-cheggaaa-pb&#34;&gt;&lt;a href=&#34;https://github.com/cheggaaa/pb&#34;&gt;pb&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Copyright &amp;copy; 2012-2015, Sergey Cherepanov
All rights reserved.&lt;/p&gt;

&lt;p&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Neither the name of the author nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &amp;ldquo;AS IS&amp;rdquo; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt;

&lt;h3 id=&#34;yaml-support-for-the-go-language-https-github-com-go-yaml-yaml&#34;&gt;&lt;a href=&#34;https://github.com/go-yaml/yaml&#34;&gt;YAML support for the Go language&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Copyright 2011-2016 Canonical Ltd.&lt;/p&gt;

&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &amp;ldquo;License&amp;rdquo;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &amp;ldquo;AS IS&amp;rdquo; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Description</title>
      <link>https://jkawamoto.github.io/roadie/description/</link>
      <pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/description/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/copyleft/gpl.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv3-blue.svg&#34; alt=&#34;GPLv3&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://travis-ci.org/jkawamoto/roadie&#34;&gt;&lt;img src=&#34;https://travis-ci.org/jkawamoto/roadie.svg?branch=master&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://codeclimate.com/github/jkawamoto/roadie&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/jkawamoto/roadie/badges/gpa.svg&#34; alt=&#34;Code Climate&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/jkawamoto/roadie/releases/tag/v0.3.9&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/release-0.3.9-brightgreen.svg&#34; alt=&#34;Release&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://qiita.com/jkawamoto/items/751558536a597a33ae2a&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/qiita-%E6%97%A5%E6%9C%AC%E8%AA%9E-brightgreen.svg&#34; alt=&#34;Japanese&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;roadie&lt;/code&gt; helps you to upload your source codes to the cloud, create and delete
instances, and manage outputs.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie run --local . --name analyze-wowah script.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;uploads your source codes in current directory, and run them in such a manner
that &lt;code&gt;script.yml&lt;/code&gt; specifies. The &lt;code&gt;script.yml&lt;/code&gt; is a simple YAML file like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt:
  - unrar
data:
  - http://mmnet.iis.sinica.edu.tw/dl/wowah/wowah.rar
run:
  - unrar x -r wowah.rar
  - analyze WoWAH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above &lt;code&gt;script.yml&lt;/code&gt; asks roadie to install apt package &lt;code&gt;unrar&lt;/code&gt; and
download a data file from such URL as the preparation. Then, it directs
to run those two commands; unrar the downloaded file, analyze the obtained
data files.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;roadie&lt;/code&gt; uploads results of such commands to a cloud storage after they finish.
You can access those results by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie result get analyze-wowah &amp;quot;*&amp;quot; -o ./res
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, &lt;code&gt;roadie&lt;/code&gt; downloads all result files into &lt;code&gt;./res&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Compiled binary files for some platforms are uploaded in
&lt;a href=&#34;https://github.com/jkawamoto/roadie/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For mac user, &lt;code&gt;roadie&lt;/code&gt; is available in &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ brew tap jkawamoto/roadie
$ brew install roadie
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;initialization&#34;&gt;Initialization&lt;/h2&gt;

&lt;p&gt;After installing &lt;code&gt;roadie&lt;/code&gt;, the following initialization is required in order to
authorize &lt;code&gt;roadie&lt;/code&gt; to access cloud services.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie init
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;This software except files in &lt;code&gt;docker&lt;/code&gt; folder is released under The GNU General Public License Version 3,
see &lt;a href=&#34;info/licenses/&#34;&gt;LICENSES&lt;/a&gt; for more detail.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://jkawamoto.github.io/roadie/documents/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/documents/configuration/</guid>
      <description>

&lt;p&gt;To update configuration of roadie, use &lt;code&gt;roadie config&lt;/code&gt; command.
It provides the following sub commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;project&lt;/strong&gt; shows and updates project ID of Google Cloud Platform,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;region&lt;/strong&gt; shows and updates region used to run scripts,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;machine&lt;/strong&gt; shows and updates machine type used to run scripts,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that every configurations are stored to &lt;code&gt;roadie.yml&lt;/code&gt;
in the current working directory by default.
You can also update configurations without this command by editing that file.&lt;/p&gt;

&lt;h3 id=&#34;project&#34;&gt;project&lt;/h3&gt;

&lt;p&gt;Project ID is an ID registered in Google Cloud Platform.
You can find your project ID &lt;a href=&#34;https://console.cloud.google.com/project&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To check the project ID currently set to roadie, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie config project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and to set another project ID &lt;code&gt;PROJECT&lt;/code&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie config project set PROJECT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Valid project ID is required to access Google Cloud Platform.&lt;/p&gt;

&lt;h3 id=&#34;region&#34;&gt;region&lt;/h3&gt;

&lt;p&gt;In Google Cloud Platform, the platform is divided into several zones
based on actual locations where virtual machine will run.
You can find current available zones by running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie config region list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, &lt;code&gt;us-central1-b&lt;/code&gt; is chosen.
To check current zone, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie config region
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and to set another &lt;code&gt;ZONE&lt;/code&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie config region set ZONE
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;machine&#34;&gt;machine&lt;/h3&gt;

&lt;p&gt;There are some options about machine type on which your program runs.
Each machine type has different number of virtual CPUs and RAM.
You can find available machine types by running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie config machine list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and &lt;a href=&#34;https://cloud.google.com/compute/pricing&#34;&gt;here&lt;/a&gt; is more information about
machine types and their pricing.
Available machine types might be depended to which zone you choose.
You should set zone before checking machine types.&lt;/p&gt;

&lt;p&gt;By default, &lt;code&gt;n1-standard-1&lt;/code&gt;, which has 1 vCPU and 3.75 GB RAM, is selected.
To check current machine type, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie config machine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and to set another &lt;code&gt;TYPE&lt;/code&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie config machine set TYPE
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Contents</title>
      <link>https://jkawamoto.github.io/roadie/documents/top/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/documents/top/</guid>
      <description>

&lt;p&gt;&lt;code&gt;roadie&lt;/code&gt; is a easy way to run your programs on &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud Platform&lt;/a&gt;.
It helps you to upload your source codes to the cloud, create and delete
instances, and manage outputs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;documents/installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;documents/configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;documents/execution&#34;&gt;Run your program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;documents/logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;documents/data&#34;&gt;Data handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;documents/queue&#34;&gt;Taks queue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;simple-example&#34;&gt;Simple example&lt;/h3&gt;

&lt;p&gt;Suppose your are in a directory which has your source codes and &lt;code&gt;script.yml&lt;/code&gt;,
then run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie run --local . --name analyze-wowah script.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;uploads your source codes in the current directory,
and run them in such a manner that &lt;code&gt;script.yml&lt;/code&gt; specifies.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;script.yml&lt;/code&gt; is a simple YAML file like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt:
  - unrar
data:
  - http://mmnet.iis.sinica.edu.tw/dl/wowah/wowah.rar
run:
  - unrar x -r wowah.rar
  - analyze WoWAH
upload:
  - *.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above &lt;code&gt;script.yml&lt;/code&gt; asks roadie to install apt package &lt;code&gt;unrar&lt;/code&gt; and
download a data file from such URL as the preparation. Then, it directs
to run those two commands; unrar the downloaded file, analyze the obtained
data files.&lt;/p&gt;

&lt;p&gt;You can check your program is still running or ends by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the program finishes,
&lt;code&gt;roadie&lt;/code&gt; uploads results of such commands to a cloud storage.
You can access those results by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie result get analyze-wowah &amp;quot;*&amp;quot; -o ./res
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;roadie&lt;/code&gt; will download all result files into &lt;code&gt;./res&lt;/code&gt; directory.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data</title>
      <link>https://jkawamoto.github.io/roadie/documents/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/documents/data/</guid>
      <description>

&lt;p&gt;roadie manages three kinds of data in a cloud storage;
source codes, input data, outputted results.
To access those data, roadie has commands &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;,
and &lt;code&gt;result&lt;/code&gt;, respectively.&lt;/p&gt;

&lt;h3 id=&#34;source-command&#34;&gt;source command&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;source&lt;/code&gt; command provides a way to access your source codes
uploaded by &lt;code&gt;roadie run&lt;/code&gt; command with &lt;code&gt;--local&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;To check source files uploaded, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie source list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and to delete some file named &lt;code&gt;FILENAME&lt;/code&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie source delete FILENAME
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;data-command&#34;&gt;data command&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;data&lt;/code&gt; command manages input data files which may be used in
&lt;code&gt;data&lt;/code&gt; section in your script file.&lt;/p&gt;

&lt;p&gt;To upload a data file &lt;code&gt;FILENAME&lt;/code&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie data put FILENAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To check uploaded files and their URL, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie data list --url
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The URLs shown by the above command, which start with &lt;code&gt;gs://&lt;/code&gt;,
can be used in &lt;code&gt;data&lt;/code&gt; section in your script file.&lt;/p&gt;

&lt;p&gt;To delete some file &lt;code&gt;FILENAME&lt;/code&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie data delete FILENAME
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;result-command&#34;&gt;result command&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;result&lt;/code&gt; command manages outputs from instances and downloads them to your PC.&lt;/p&gt;

&lt;p&gt;To check instance names which have results, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie result list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and to check file names which instance &lt;code&gt;INSTANCE&lt;/code&gt; has as its result, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie result INSTANCE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To download those files into directory &lt;code&gt;./res&lt;/code&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie result get INSTANCE &amp;quot;*&amp;quot; -o ./res
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Execution</title>
      <link>https://jkawamoto.github.io/roadie/documents/execution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/documents/execution/</guid>
      <description>

&lt;h3 id=&#34;execution-model&#34;&gt;Execution model&lt;/h3&gt;

&lt;p&gt;roadie runs your program on a container.
The image of the container is
&lt;a href=&#34;https://github.com/jkawamoto/roadie-gcp&#34;&gt;jkawamoto/roadie-gcp&lt;/a&gt;
which is based on &lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt;.
That means most of Ubuntu packages are available in roadie, too.
You can install such packages via &lt;code&gt;apt&lt;/code&gt; section in script file.&lt;/p&gt;

&lt;p&gt;On the running container, your program will be set in &lt;code&gt;/data&lt;/code&gt;,
and other data specified &lt;code&gt;data&lt;/code&gt; section in script file will also be set in
&lt;code&gt;/data&lt;/code&gt; by default.
If you provide your source codes as an archived file and
roadie reports an error that it couldn&amp;rsquo;t find your program,
make sure that your archive file does not create additional directory.&lt;/p&gt;

&lt;p&gt;For example, you provide your program &lt;code&gt;main&lt;/code&gt; in &lt;code&gt;archive.zip&lt;/code&gt; and
you expect your program will be set in &lt;code&gt;/data/main&lt;/code&gt;.
But, depending on a way to create such archive file, your program may be set
in &lt;code&gt;/data/archive/main&lt;/code&gt;.
For debugging, add &lt;code&gt;ls -la&lt;/code&gt; on top of the run section in your script.&lt;/p&gt;

&lt;p&gt;Your program has three ways to outputs; writing to &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt;, and
creating other files.&lt;/p&gt;

&lt;p&gt;All outputs written in &lt;code&gt;stdout&lt;/code&gt; are treated as official results.
They are stored to persistent storage,
i.e. &lt;a href=&#34;https://cloud.google.com/storage/&#34;&gt;Google Cloud Storage&lt;/a&gt;,
so that you can access them any time.
Each command in the &lt;code&gt;run&lt;/code&gt; section of your script makes one file to store
outputs written in &lt;code&gt;stdout&lt;/code&gt;.
More precisely, &lt;em&gt;i&lt;/em&gt;-th command creates &lt;code&gt;stdout{i}.txt&lt;/code&gt;,
where &lt;em&gt;i&lt;/em&gt; is a zero-origin integer.&lt;/p&gt;

&lt;p&gt;On the other hand, outputs written in &lt;code&gt;stderr&lt;/code&gt; are not stored in any persistent
disks but treated as prompt logs, which means you can check such logs while
your instance is still running.
Because outputs written in &lt;code&gt;stderr&lt;/code&gt; cause of network traffic, it isn&amp;rsquo;t
recommended to write huge messages there.&lt;/p&gt;

&lt;p&gt;By default, any other files created by your program will not be stored as
results.
To specify which files should be treated as results
and stored to persistent storage,
use &lt;code&gt;upload&lt;/code&gt; section in the script file.&lt;/p&gt;

&lt;h3 id=&#34;run-command&#34;&gt;run command&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;roadie run&lt;/code&gt; command creates an instance and runs your program on it.
This command requires one script file explained in the next section.
There are many option flags but one of the useful options is &lt;code&gt;--name&lt;/code&gt;,
which sets a given name to the creating instance.
So, suppose you will create an instance named &lt;code&gt;instance1&lt;/code&gt;
with script file &lt;code&gt;script.yml&lt;/code&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie run --name instance1 script.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t set any names, roadie makes some name.
After creating the instance, roadie shows the name of the instance.
Such name is used to check instance status, see logs,
and download computation results.&lt;/p&gt;

&lt;h3 id=&#34;script-file&#34;&gt;Script file&lt;/h3&gt;

&lt;p&gt;Script file is a YAML file which consists of five sections;
&lt;code&gt;apt&lt;/code&gt;, &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;upload&lt;/code&gt;.
Here is a simple example of the script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt:
  - unrar
source: https://github.com/abcdefg/some-program.git
data:
  - http://mmnet.iis.sinica.edu.tw/dl/wowah/wowah.rar
run:
  - unrar x -r wowah.rar
  - ./analyze WoWAH
upload:
  - *.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Roughly speaking, the above script means&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install apt package &lt;code&gt;unrar&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Clone source codes from a git repository,&lt;/li&gt;
&lt;li&gt;Download a data file from a certain URL.&lt;/li&gt;
&lt;li&gt;Execute two commands; expand the downloaded file and run an analyze program.&lt;/li&gt;
&lt;li&gt;Upload created file matching a glob pattern &lt;code&gt;*.png&lt;/code&gt;
in addition to outputs written in &lt;code&gt;stdout&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;apt&#34;&gt;apt&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;apt&lt;/code&gt; section takes a list of apt package names.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt:
  - python-numpy
  - python-scipy
  - python-matplotlib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above example installs three major python packages.
Note that, if you want to install apt packages after running some commands,
you can write normal &lt;code&gt;apt-get install&lt;/code&gt; command in your &lt;code&gt;run&lt;/code&gt; section.&lt;/p&gt;

&lt;h4 id=&#34;source&#34;&gt;source&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;source&lt;/code&gt; section takes one URL which points the location your program stored.
This URL can take several forms.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the URL ends with &lt;code&gt;.git&lt;/code&gt;, roadie treats it a Git repository URL.
roadie use &lt;code&gt;git clone&lt;/code&gt; to obtain your source codes.&lt;/li&gt;
&lt;li&gt;If the URL starts with &lt;code&gt;dropbox://&lt;/code&gt; instead of &lt;code&gt;http://&lt;/code&gt; and &lt;code&gt;https://&lt;/code&gt;,
roadie thinks your source codes are provided in public directory in
&lt;a href=&#34;https://www.dropbox.com/&#34;&gt;Dropbox&lt;/a&gt;.
You can make such URL easily by replacing &lt;code&gt;https://&lt;/code&gt; to &lt;code&gt;dropbox://&lt;/code&gt;
in your shared link made by Dropbox.&lt;/li&gt;
&lt;li&gt;If the URL starts with &lt;code&gt;gs://&lt;/code&gt;, which means your source codes are stored in
Google Cloud Storage, roadie downloads them.&lt;/li&gt;
&lt;li&gt;If the URL likes &lt;code&gt;roadie://&amp;lt;name&amp;gt;&lt;/code&gt;, which means your source codes are
maintained in &lt;code&gt;roadie&lt;/code&gt; and specifies to use as same source codes as ones
used in instance &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Otherwise, roadie downloads the URL via http or https.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In any cases, if the URL ends with &lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.tar&lt;/code&gt;, or &lt;code&gt;.tar.gz&lt;/code&gt;,
downloaded files are expanded by &lt;code&gt;unzip&lt;/code&gt; or &lt;code&gt;tar&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;source: https://github.com/jkawamoto/roadie.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;clones the Git repository.&lt;/p&gt;

&lt;p&gt;However, if your program is still work in progress,
it could be trouble to make an archive file and upload it,
or push your codes to some repository.
roadie has a function to make such archive file containing files in a directory
and upload it instead of you. See &lt;strong&gt;specify source codes on the fly&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;The downloaded source codes are stored in &lt;code&gt;/data&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;If your source codes are written in python
and they have &lt;code&gt;requirements.txt&lt;/code&gt; or &lt;code&gt;requirements.in&lt;/code&gt;,
those required packages will be installed automatically.&lt;/p&gt;

&lt;h4 id=&#34;data&#34;&gt;data&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;data&lt;/code&gt; section takes a list of URLs.
Those URL support, &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt;, &lt;code&gt;gs&lt;/code&gt;, and &lt;code&gt;dropbox&lt;/code&gt;.
As same as &lt;code&gt;source&lt;/code&gt; section, if the URL ends with &lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.tar&lt;/code&gt;, or &lt;code&gt;.tar.gz&lt;/code&gt;,
those files are expanded as expected.&lt;/p&gt;

&lt;p&gt;By default, downloaded files are stored in &lt;code&gt;/data&lt;/code&gt; directory,
which is same directory as source codes.
You can customize destinations by adding &lt;code&gt;:&lt;/code&gt; plus destination path to each URL.
For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;data:
  - https://www.sample.com/program.zip:/data/input
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;downloads &lt;code&gt;program.zip&lt;/code&gt; and stored files in the zip into &lt;code&gt;/data/input&lt;/code&gt;.
Here is another example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;data:
  - gs://your-project/dataset/some_data_v2.json:some_data.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;downloads &lt;code&gt;somr_data_v2.json&lt;/code&gt; into &lt;code&gt;/data&lt;/code&gt; from a bucket in
Google Cloud Storage, and rename it to &lt;code&gt;some_data.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this section, URL scheme &lt;code&gt;roadie://&lt;/code&gt; is also supported.
&lt;code&gt;roadie://somefile.dat&lt;/code&gt; means &lt;code&gt;gs://&amp;lt;your bucket&amp;gt;/.roadie/data/somefile.dat&lt;/code&gt;.
The place &lt;code&gt;gs://&amp;lt;your bucket&amp;gt;/.roadie/data/&lt;/code&gt; is the default place,
&lt;code&gt;roadie&lt;/code&gt; uploads your fils via &lt;code&gt;roadie data put&lt;/code&gt; command.&lt;/p&gt;

&lt;h4 id=&#34;run&#34;&gt;run&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;run&lt;/code&gt; section takes a list of commands.
You can write any commands such as running your program,
installing any packages,
downloading any files (you should use &lt;code&gt;data&lt;/code&gt; section, though), etc.&lt;/p&gt;

&lt;p&gt;Note that, you may need to start your command with &lt;code&gt;./&lt;/code&gt;
if the running commands are in your source codes and set in &lt;code&gt;/data&lt;/code&gt;.
roadie doesn&amp;rsquo;t add &lt;code&gt;/data&lt;/code&gt; to &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, if your program is written in &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node.js&lt;/a&gt;,
the first command may &lt;code&gt;npm install&lt;/code&gt;.
Of course, you need.js to install node in &lt;code&gt;apt&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;Each command listed in the &lt;code&gt;run&lt;/code&gt; section has a zero-origin number,
i,e, the first command has 0.
This number is used to store outputs written in &lt;code&gt;stdout&lt;/code&gt; and
the outputs written in &lt;code&gt;stdout&lt;/code&gt; from &lt;em&gt;i&lt;/em&gt;-th command are stored
in &lt;code&gt;stdout{i}.txt&lt;/code&gt; file.
Those files will be accessed via &lt;code&gt;roadie result&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;upload&#34;&gt;upload&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;upload&lt;/code&gt; section takes a list of
&lt;a href=&#34;https://en.wikipedia.org/wiki/Glob_(programming)&#34;&gt;glob&lt;/a&gt; patterns.
Files matching one of those patterns are treated of results
and uploaded to a cloud storage.
To access those uploaded files, use &lt;code&gt;roadie result&lt;/code&gt; command.&lt;/p&gt;

&lt;h3 id=&#34;specify-source-codes-on-the-fly&#34;&gt;Specify source codes on the fly&lt;/h3&gt;

&lt;p&gt;Sometimes, it is difficult to provide your source codes from the web,
such as Git repository, Dropbox, and some web site.
roadie helps to upload your source code from a local PC to a cloud storage,
which is a private place.
If you use this function, you can omit &lt;code&gt;source&lt;/code&gt; section in your script file.&lt;/p&gt;

&lt;h4 id=&#34;upload-source-codes-from-a-local-directory&#34;&gt;Upload source codes from a local directory&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;--local&lt;/code&gt; flag of &lt;code&gt;roadie run&lt;/code&gt; command takes a path of your source codes.
For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie run --local . --name instance-1 script.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;notifies roadie of the current path as the root path of your source codes.
roadie makes an archive file of the path and uploads it to a cloud storage.
Then, the created instance will use that file as the source codes.&lt;/p&gt;

&lt;p&gt;If you give a path of one file with &lt;code&gt;--local&lt;/code&gt; flag,
roadie uploads that file and the created instance will use it.&lt;/p&gt;

&lt;h4 id=&#34;previously-uploaded-files&#34;&gt;Previously uploaded files&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;--source&lt;/code&gt; flag of &lt;code&gt;roadie run&lt;/code&gt; command takes an instance name
which run previously.
If the previous instance created with &lt;code&gt;--local&lt;/code&gt; flag,
the created new instance will use same uploaded source file.
For example, you created an instance by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie run --local . --name instance-1 script.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and now you are creating another instance by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie run --source instance-1 --name instance2 script2.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the new instance named &lt;code&gt;instance-2&lt;/code&gt; uses same source codes as &lt;code&gt;instance-1&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://jkawamoto.github.io/roadie/documents/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/documents/installation/</guid>
      <description>

&lt;h3 id=&#34;install&#34;&gt;Install&lt;/h3&gt;

&lt;p&gt;Roadie&amp;rsquo;s compiled binary files for some platforms are found in Github&amp;rsquo;s
&lt;a href=&#34;https://github.com/jkawamoto/roadie/releases&#34;&gt;release page&lt;/a&gt;.
Download one of them according to your environment and put the binary into
a directory in your &lt;code&gt;$PATH&lt;/code&gt;, or put it as same directory as your current project.&lt;/p&gt;

&lt;p&gt;If you are a mac user, you can install &lt;code&gt;roadie&lt;/code&gt; via &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ brew tap jkawamoto/roadie
$ brew install roadie
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;initialization&#34;&gt;Initialization&lt;/h3&gt;

&lt;p&gt;Each project needs to initialize roadie and sets your &lt;em&gt;project ID&lt;/em&gt;.
Project ID is an ID registered in Google Cloud Platform.
You can find your project ID &lt;a href=&#34;https://console.cloud.google.com/project&#34;&gt;here&lt;/a&gt;.
Note that &lt;em&gt;project name&lt;/em&gt; is different from project ID.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although the configuration file is a text file and you can edit it,
roadie provides &lt;code&gt;config&lt;/code&gt; command to edit it interactively.
See &lt;a href=&#34;documents/configuration&#34;&gt;configuration page&lt;/a&gt; for more information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>https://jkawamoto.github.io/roadie/documents/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/documents/logging/</guid>
      <description>

&lt;p&gt;After running your program, it is helpful to check status of your program,
i.e. instance, and check logs.
roadie provides two commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;status&lt;/strong&gt; shows status of all instances and kill an instance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;log&lt;/strong&gt; shows logs from an instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;status&#34;&gt;status&lt;/h3&gt;

&lt;p&gt;Status command &lt;code&gt;roadie status&lt;/code&gt; shows your instances are running or have ended.
If your instance has already ended and you also deleted all result data
from the instance, such instance name will be omitted to print.
To print all instance status including such deleted instances, use &lt;code&gt;--all&lt;/code&gt; flag.
However, status of old instances will be deleted after a certain period of time.&lt;/p&gt;

&lt;p&gt;The another property of status command is to kill some instance.
To kill instance &lt;code&gt;INSTANCE&lt;/code&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie status kill INSTANCE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you kill an instance, outputs from the instance might not be stored.&lt;/p&gt;

&lt;h3 id=&#34;log&#34;&gt;log&lt;/h3&gt;

&lt;p&gt;Log command prints log messages from an instance.
To see log messages from instance &lt;code&gt;INSTANCE&lt;/code&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie log INSTANCE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The log messages consist of logs about preprocess and post process,
and outputs your programs write in standard err (&lt;code&gt;stderr&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;roadie&amp;rsquo;s execution model treats outputs written in standard output (&lt;code&gt;stdout&lt;/code&gt;)
and &lt;code&gt;stderr&lt;/code&gt; in different way.
Outputs written in &lt;code&gt;stdout&lt;/code&gt; are uploaded to a bucket as parts of results
from your program.
You can see and download such outputs by &lt;code&gt;roadie result&lt;/code&gt; command but
you cannot check them while your instance is running.&lt;/p&gt;

&lt;p&gt;On the other hand, outputs written in &lt;code&gt;stderr&lt;/code&gt; are not stored in any persistent
disks but treated as prompt logs, which means you can check such logs while
your instance is still running.
Because outputs written in &lt;code&gt;stderr&lt;/code&gt; cause of network traffic, it isn&amp;rsquo;t
recommended to write huge messages there.&lt;/p&gt;

&lt;h4 id=&#34;options&#34;&gt;options&lt;/h4&gt;

&lt;p&gt;Log command has two option flags; &lt;code&gt;--no-timestamp&lt;/code&gt; and &lt;code&gt;--follow&lt;/code&gt;.
If &lt;code&gt;--no-timestamp&lt;/code&gt; flag is set, roadie omits to print time stamps.
If &lt;code&gt;--follow&lt;/code&gt; flag is set, roadie will not end and keep waiting new logs coming. To stop it, use &lt;code&gt;control + c&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Queue</title>
      <link>https://jkawamoto.github.io/roadie/documents/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/documents/queue/</guid>
      <description>

&lt;p&gt;Roadie supports queue to keep a bunch of script.
Enqueued scripts are run sequentially by default,
but you can add instances working with the queue.&lt;/p&gt;

&lt;h3 id=&#34;add-new-script-to-a-queue&#34;&gt;Add new script to a queue&lt;/h3&gt;

&lt;p&gt;Enqueue a script to a queue, use &lt;code&gt;roadie run&lt;/code&gt; command with &lt;code&gt;--queue&lt;/code&gt; flag.
The &lt;code&gt;--queue&lt;/code&gt; flag takes a queue name and the given script will be enqueued
the queue.
If there are such queues, it will be created.
If there are no instances working with the queue, one instance will be created.
The other flags in &lt;code&gt;roadie run&lt;/code&gt; command are as same as the case of starting
script without queue.&lt;/p&gt;

&lt;h4 id=&#34;example&#34;&gt;example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie run --local . --name instance-1 --queue queue-1 script.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above command enqueues &lt;code&gt;script.yml&lt;/code&gt; to a queue &lt;code&gt;queue-1&lt;/code&gt;.
The script is named &lt;code&gt;instance-1&lt;/code&gt; so that you can refer results and logs with the
name.&lt;/p&gt;

&lt;p&gt;If there are no instances working with the queue, one instance will be created.&lt;/p&gt;

&lt;h3 id=&#34;queue-management&#34;&gt;Queue management&lt;/h3&gt;

&lt;p&gt;To find existing queues, use &lt;code&gt;roadie queue list&lt;/code&gt; command.
On the other hand, to find enqueued scripts in a queue,
use &lt;code&gt;roadie queue show &amp;lt;queue name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to stop executing a queue, &lt;code&gt;roadie queue stop &amp;lt;queue name&amp;gt;&lt;/code&gt; do it.
But scripts already running won&amp;rsquo;t be stopped.
To restart stopped queue, use &lt;code&gt;roadie queue restart &amp;lt;queue name&amp;gt;&lt;/code&gt;.
It restarts the queue and creates one instance to handle scripts.&lt;/p&gt;

&lt;h3 id=&#34;instance-management&#34;&gt;Instance management&lt;/h3&gt;

&lt;p&gt;By default, scripts in a queue are handled by one instance.
You can add other instances to handle any queue.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;roadie queue instance add --instances N &amp;lt;queue name&amp;gt;&lt;/code&gt; command adds &lt;code&gt;N&lt;/code&gt;
instances to the given named queue. If you omit &lt;code&gt;--instances&lt;/code&gt; flag,
just one instance will be added.
This command also support &lt;code&gt;--disk-size&lt;/code&gt; flag as same as &lt;code&gt;roadie run&lt;/code&gt; command.
You can modify disk size of instances according to your script.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;roadie queue instance list &amp;lt;queue name&amp;gt;&lt;/code&gt; shows instances working with the given
named queue.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>インストールと初期設定</title>
      <link>https://jkawamoto.github.io/roadie/documents-ja/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/documents-ja/installation/</guid>
      <description>

&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;roadie&lt;/code&gt; のコンパイル済みバイナリは，GitHub の
&lt;a href=&#34;https://github.com/jkawamoto/roadie/releases&#34;&gt;リリースページ&lt;/a&gt;
から取得できます．
アーカイブを解凍して得られた実行ファイルをパスの通ったところへ置いてください．
一時的に試してみる場合は，ソースコードのあるディレクトリに置くだけでも良いです．&lt;/p&gt;

&lt;p&gt;また，mac の場合は &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; でもインストールできます．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ brew tap jkawamoto/roadie
$ brew install roadie
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;初期設定&#34;&gt;初期設定&lt;/h3&gt;

&lt;p&gt;Google Cloud Platform では，プロジェクトという単位でリソースを管理しています．
&lt;code&gt;roadie&lt;/code&gt; を利用する前に，どのプロジェクトを利用するか &lt;code&gt;roadie&lt;/code&gt; に設定する必要があります．
なお，利用可能なプロジェクト ID は &lt;a href=&#34;https://console.cloud.google.com/project&#34;&gt;ここ&lt;/a&gt;
から調べることができます．
&lt;strong&gt;プロジェクト名&lt;/strong&gt; ではなく &lt;strong&gt;プロジェクト ID&lt;/strong&gt; を使うことに注意してください．&lt;/p&gt;

&lt;p&gt;&lt;code&gt;roadie&lt;/code&gt; の初期設定には，次のコマンドを利用します．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初期設定では，上記のプロジェクト ID の他，データの保存先やプログラムを実行するリージョンや
仮想マシンのデフォルトなどを設定します．&lt;/p&gt;

&lt;p&gt;設定ファイルは，&lt;code&gt;roadie init&lt;/code&gt; を実行したディレクトリの &lt;code&gt;roadie.yml&lt;/code&gt; です．
テキスト形式なので後から編集できます．
また，&lt;code&gt;roadie config&lt;/code&gt; コマンドで対話的に変更することもできます．
詳しくは &lt;a href=&#34;documents-ja/configuration&#34;&gt;設定について&lt;/a&gt; のページをご覧ください．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>キュー</title>
      <link>https://jkawamoto.github.io/roadie/documents-ja/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/documents-ja/queue/</guid>
      <description>

&lt;p&gt;Roadie はキューを用いたタスク処理にも対応しています．
デフォルトでは，キューに入れられたタスクは一つのインタンスによって処理されますが，
必要に応じてインスタンスを追加することもできます．&lt;/p&gt;

&lt;h3 id=&#34;キューにタスクを追加する&#34;&gt;キューにタスクを追加する&lt;/h3&gt;

&lt;p&gt;タスクの追加は，&lt;code&gt;roadie run&lt;/code&gt; コマンドに &lt;code&gt;--queue&lt;/code&gt; フラグを追加することで行います．
&lt;code&gt;--queue&lt;/code&gt; フラグには，タスクを追加するキューの名前を指定します．
存在しないキューの名前を指定した場合は，新しいキューが作成されます．
キューはタスクがすべて処理されると削除されます．&lt;/p&gt;

&lt;p&gt;また，キューを処理しているインスタンスが無い場合，新しいインスタンスが一台作成されます．&lt;/p&gt;

&lt;h4 id=&#34;例&#34;&gt;例&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie run --local . --name task-1 --queue queue-1 script.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のコマンドでは，&lt;code&gt;script.yml&lt;/code&gt; を &lt;code&gt;queue-1&lt;/code&gt; に追加します．
&lt;code&gt;script.yml&lt;/code&gt; を処理するために，カレントディレクトリ以下をアップロードすることなど，
他のオプションは通常の &lt;code&gt;roadie run&lt;/code&gt; コマンドと同様です．&lt;/p&gt;

&lt;p&gt;このスクリプトには，&lt;code&gt;task-1&lt;/code&gt; という名前を付けていますので，
この名前を使って出力の取得やログの閲覧が可能です．&lt;/p&gt;

&lt;h3 id=&#34;キューの管理&#34;&gt;キューの管理&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;roadie queue list&lt;/code&gt; コマンドは現在存在しているキューの一覧を表示します．
また，&lt;code&gt;roadie queue show &amp;lt;queue name&amp;gt;&lt;/code&gt; コマンドは，&lt;code&gt;&amp;lt;queue name&amp;gt;&lt;/code&gt; キューに
入っているタスクの名前一覧を表示します．&lt;/p&gt;

&lt;p&gt;キューの処理を一時停止させるには，&lt;code&gt;roadie queue stop &amp;lt;queue name&amp;gt;&lt;/code&gt; コマンドを使用します．
このコマンドは未実行のスクリプト処理を停止させますが，
すでに実行中のスクリプトに関しては終了まで実行されます．&lt;/p&gt;

&lt;p&gt;一時停止したキューを再実行するためには，
&lt;code&gt;roadie queue restart &amp;lt;queue name&amp;gt;&lt;/code&gt; コマンドを使用します．
このコマンドは，キューの実行のために新しいインスタンスを一台作成します．&lt;/p&gt;

&lt;h3 id=&#34;インスタンスの管理&#34;&gt;インスタンスの管理&lt;/h3&gt;

&lt;p&gt;デフォルトでは，キューのタスクは一台のインスタンスで処理されます．
複数のインスタンスで処理したい場合，インスタンスの追加を行う必要があります．&lt;/p&gt;

&lt;p&gt;&lt;code&gt;roadie queue instance add --instances N &amp;lt;queue name&amp;gt;&lt;/code&gt; コマンドは，
&lt;code&gt;N&lt;/code&gt; 台のインスタンスを &lt;code&gt;&amp;lt;queue name&amp;gt;&lt;/code&gt; キューの処理のために作成します．
&lt;code&gt;--instance&lt;/code&gt; フラグを省略した場合は一台追加されます．
このコマンドは &lt;code&gt;--disk-size&lt;/code&gt; フラグもサポートしており，
必要であれば作成されるインスタンスのディスクサイズをカスタマイズできます．&lt;/p&gt;

&lt;p&gt;現在，あるキューの処理のために稼働しているインスタンス数を調べる場合，
&lt;code&gt;roadie queue instance list &amp;lt;queue name&amp;gt;&lt;/code&gt; コマンドを使用できます．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ステータスとログ</title>
      <link>https://jkawamoto.github.io/roadie/documents-ja/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/documents-ja/logging/</guid>
      <description>

&lt;p&gt;実行したプログラムが問題なく動作しているか確認するためには，
ステータスのチェックやログの確認が便利です．
&lt;code&gt;roadie&lt;/code&gt; は次の二つのコマンドを提供しています．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;status&lt;/strong&gt; は仮想マシンステータスの確認と停止を行います．&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;log&lt;/strong&gt; はログの表示を行います．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;status-コマンド&#34;&gt;status コマンド&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;roadie status&lt;/code&gt; コマンドは，各仮想マシンが実行中か終了済みかを表示します．
もし，仮想マシンインスタンスが終了済みで計算結果も削除されている場合，
&lt;code&gt;status&lt;/code&gt; コマンドでは非表示になります．
計算結果の削除済みインスタンスに関する情報も取得するには &lt;code&gt;--all&lt;/code&gt; フラッグを付けてください．&lt;/p&gt;

&lt;p&gt;なお，ステータス情報は一定期間が過ぎたのち Google Cloud Platform によって
完全に削除されます．
この場合，&lt;code&gt;--all&lt;/code&gt; フラッグを使用しても表示されなくなります．&lt;/p&gt;

&lt;p&gt;&lt;code&gt;status&lt;/code&gt; コマンドの別の機能は，インスタンスを途中で削除することです．
&lt;code&gt;INSTANCE&lt;/code&gt; というインスタンスを何らかの理由で途中削除する場合，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie status kill INSTANCE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行してください．&lt;/p&gt;

&lt;p&gt;実行途中にインスタンスを削除した場合，計算結果はクラウドストレージに保存されないことがあります．&lt;/p&gt;

&lt;h3 id=&#34;log-コマンド&#34;&gt;log コマンド&lt;/h3&gt;

&lt;p&gt;ログコマンドは，各インスタンスのログ出力を取得します．
&lt;code&gt;INSTANCE&lt;/code&gt; というインスタンスのログを取得するには，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie log INSTANCE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行してください．&lt;/p&gt;

&lt;p&gt;ログメッセージには，事前準備，事後プロセスの進捗に加えて，
各コマンドが標準エラー出力 &lt;code&gt;stderr&lt;/code&gt; に書き出したメッセージも含まれます．&lt;/p&gt;

&lt;p&gt;&lt;code&gt;roadie&lt;/code&gt; の実行モデルでは，標準出力 &lt;code&gt;stdout&lt;/code&gt; と標準エラー出力 &lt;code&gt;stderr&lt;/code&gt; は
別々の意味を持ちます．
標準出力に書き出されたメッセージは，
プログラムの実行結果としてクラウドストレージに保存されます．
これらのメッセージはプログラムの実行中に外部から取得することはできませんが，
永続的に管理されます．
各出力を取得するには &lt;code&gt;roadie result&lt;/code&gt; コマンドを使用します．&lt;/p&gt;

&lt;p&gt;一方，標準エラー出力に書き出されたメッセージは，永続的なクラウドストレージには保存されません．
その代わり，&lt;code&gt;log&lt;/code&gt; コマンドを用いてインスタンスの実行中に外部から確認することができます．
標準エラー出力への書き込みは，その都度通信を発生させるため，
巨大なデータの書き込みは避けた方が良いでしょう．&lt;/p&gt;

&lt;h4 id=&#34;オプション&#34;&gt;オプション&lt;/h4&gt;

&lt;p&gt;ログコマンドには幾つかのオプションがあります．&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--no-timestamp&lt;/code&gt; フラッグが付けられた場合，タイムスタンプが省略されます．
&lt;code&gt;--follow&lt;/code&gt; フラッグが付けられた場合，&lt;code&gt;roadie&lt;/code&gt; コマンドは新たなログの到着を待ち続けます．
このフラッグを使用した場合，&lt;code&gt;roadie&lt;/code&gt; コマンドは自動では終了しなくなります．
終了させる場合には &lt;code&gt;control + c&lt;/code&gt; を使用してください．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ドキュメント</title>
      <link>https://jkawamoto.github.io/roadie/documents-ja/top/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jkawamoto.github.io/roadie/documents-ja/top/</guid>
      <description>

&lt;p&gt;&lt;code&gt;roadie&lt;/code&gt; は &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud Platform&lt;/a&gt;
でプログラムを実行する手助けをします．
具体的には，クラウドへソースコードをアップロードし，仮想マシンの作成・削除，
そしてプログラムの出力結果の管理を行います．&lt;/p&gt;

&lt;p&gt;&lt;code&gt;roadie&lt;/code&gt; を使うことで，Google Cloud Platform の詳しい仕組みを知らなくても，
また仮想マシンにログインして作業することなく簡単にクラウド環境でプログラムを実行することができます．&lt;/p&gt;

&lt;h3 id=&#34;項目&#34;&gt;項目&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;documents-ja/installation&#34;&gt;インストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;documents-ja/configuration&#34;&gt;設定変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;documents-ja/execution&#34;&gt;プログラムの実行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;documents-ja/logging&#34;&gt;ステータスとログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;documents-ja/data&#34;&gt;ファイルの管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;documents-ja/queue&#34;&gt;タスクキュー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;簡単な使用例&#34;&gt;簡単な使用例&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;roadie&lt;/code&gt; では，&lt;a href=&#34;https://ja.wikipedia.org/wiki/YAML&#34;&gt;YAML&lt;/a&gt; 形式のスクリプトファイル
を使って，クラウドで実行する手順を指定します．
このスクリプトファイルが &lt;code&gt;script.yml&lt;/code&gt; だとすると，
次のようにしてプログラムをクラウドで実行させることができます．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie run --local . --name analyze-wowah script.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドでは，&lt;code&gt;--local .&lt;/code&gt; によって現在のディレクトリにあるソースコードを
クラウドにアップロードするよう指定しています．
また，後ほど参照するために &lt;code&gt;analyze-wowah&lt;/code&gt; という名前を付けています．&lt;/p&gt;

&lt;p&gt;ここで実行した &lt;code&gt;script.yml&lt;/code&gt; は，次のようなフォーマットになっています．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apt:
  - unrar
data:
  - http://mmnet.iis.sinica.edu.tw/dl/wowah/wowah.rar
run:
  - unrar x -r wowah.rar
  - ./analyze WoWAH
upload:
  - *.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このスクリプトファイルでは，次のことを指定しています．&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;プログラムの実行に必要なパッケージとして &lt;code&gt;unrar&lt;/code&gt; パッケージをインストールする．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mmnet.iis.sinica.edu.tw/dl/wowah/wowah.rar&#34;&gt;http://mmnet.iis.sinica.edu.tw/dl/wowah/wowah.rar&lt;/a&gt;
から解析対象のデータファイルをダウンロードする．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unrar&lt;/code&gt; を使って取得した RAR ファイルを解凍する．&lt;/li&gt;
&lt;li&gt;アップロードしたソースコードに含まれている &lt;code&gt;analyze&lt;/code&gt; コマンドを使って解析を行う．&lt;/li&gt;
&lt;li&gt;&lt;code&gt;analyze&lt;/code&gt; コマンドが出力した &lt;code&gt;*.png&lt;/code&gt; ファイルをクラウドへアップロードする．&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上の手順が無事終了すると，&lt;code&gt;roadie&lt;/code&gt; は作成した仮想マシンを削除します．
そのため，仮想マシンの停止を忘れて課金が継続されることはありません．&lt;/p&gt;

&lt;p&gt;作成した仮想マシンの状態は，次のコマンドで確認することができます．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プログラムが終了し，アップロードされた出力結果を取得するには，
次のコマンドを利用します．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ roadie result get analyze-wowah &amp;quot;*&amp;quot; -o ./res
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドは，先ほど名前を付けた &lt;code&gt;analyze-wowah&lt;/code&gt; の出力のうち，
&amp;ldquo;*&amp;rdquo; にマッチする，つまりすべてのファイルを &lt;code&gt;./res&lt;/code&gt; ディレクトリにコピーします．&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>