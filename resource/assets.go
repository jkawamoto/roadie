// Code generated by go-bindata.
// sources:
// assets/startup.sh
// assets/worker.sh
// DO NOT EDIT!

package resource

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xd1\x6e\xdb\x46\x10\x7c\xbf\xaf\x98\x42\x01\x6c\x03\x26\x69\x27\x40\x0b\xd8\x4e\x00\xd6\x90\x12\xb5\x8e\x64\x50\x12\x02\x23\xcd\xc3\x91\x5c\x92\x57\x93\xb7\xec\xdd\x51\x82\x20\xeb\xdf\x8b\x23\x25\xbb\xf1\x43\x03\xe4\xed\xb8\xdc\x1d\xce\xcc\xce\x71\xf4\x4b\x94\x2a\x1d\xa5\xd2\x56\x62\x24\x46\xb0\x4e\x1a\xd7\xb5\xb0\x99\x51\xad\x0b\xfb\xda\x2d\xb7\x5b\xa3\xca\xca\xe1\x34\x3b\xc3\xdb\x8b\xcb\x5f\x83\xb7\x17\x97\xbf\xe1\x8f\x4e\xb7\xa4\xf0\xa7\xdc\xc8\x86\x1d\xf7\xbd\xcb\x4a\x59\x14\xaa\x26\x28\x8b\x56\x1a\x07\x2e\x90\xb0\xcc\x15\x0d\x60\xc3\xd9\xbf\x2d\x0c\x11\x2c\x17\x6e\x23\x0d\x5d\x61\xcb\x1d\x32\xa9\x61\x28\x57\xd6\x19\x95\x76\x8e\xa0\x1c\xa4\xce\x23\x36\x68\x38\x57\xc5\x56\x8c\x7c\xa9\xd3\x39\x19\xb8\x8a\xe0\xc8\x34\xd6\x7f\xc2\x3f\x7c\x9c\xad\xf0\x91\x34\x19\x59\xe3\xbe\x4b\x6b\x95\xe1\x4e\x65\xa4\x2d\x41\x5a\xb4\xbe\x62\x2b\xca\x91\x7a\x18\x3f\x30\xf1\x0c\x16\x07\x06\x98\x70\xa7\x73\xe9\x14\xeb\x73\x90\x72\x15\x19\xac\xc9\x58\xc5\x1a\xef\x8e\x9f\x38\xe0\x9d\x83\x8d\x18\xe1\x54\x3a\x4f\xdb\x80\x5b\x3f\x76\x06\xa9\xb7\xa8\xa5\x7b\x99\x7c\xad\xf9\x45\x5a\x0e\xa5\x7b\xc8\x8a\x5b\x82\xab\xa4\xf3\xca\x36\xaa\xae\x91\x12\x3a\x4b\x45\x57\x9f\x8b\x11\xd2\xce\xe1\xcb\x74\xf9\x69\xbe\x5a\x22\x9e\x3d\xe0\x4b\x9c\x24\xf1\x6c\xf9\x70\x8d\x8d\x72\x15\x77\x0e\xb4\xa6\x01\x49\x35\x6d\xad\x28\xc7\x46\x1a\x23\xb5\xdb\x82\x0b\x31\xc2\xe7\x71\x72\xfb\x29\x9e\x2d\xe3\xdf\xa7\x77\xd3\xe5\x03\xd8\x60\x32\x5d\xce\xc6\x8b\x05\x26\xf3\x04\x31\xee\xe3\x64\x39\xbd\x5d\xdd\xc5\x09\xee\x57\xc9\xfd\x7c\x31\x0e\x81\x05\x79\x52\x24\x46\xff\xe7\x6a\xd1\xef\xc5\x10\x72\x72\x52\xd5\x76\x50\xfb\xc0\x1d\x6c\xc5\x5d\x9d\xa3\x92\x6b\x82\xa1\x8c\xd4\x9a\x72\x48\x64\xdc\x6e\x7f\xbc\x2d\x31\x82\xac\x59\x97\xbd\x42\x4c\x98\x53\x69\x42\x60\x5a\x40\xb3\x3b\x87\x25\xc2\x4d\xe5\x5c\x7b\x15\x45\x9b\xcd\x26\x2c\x75\x17\xb2\x29\xa3\x7a\x98\xb6\xd1\x07\xcf\xe3\x98\xc5\x21\xc8\x43\xae\x2d\x52\x76\x15\x8a\xba\x23\xed\x72\x9f\x2c\x48\x94\xca\xfb\xd7\x1a\x2e\x8d\x6c\xfc\x64\x96\x23\x32\xcc\xce\x43\x2c\xfc\x18\x6a\x2e\x4b\xa5\xcb\x50\xa8\x02\x5f\xbf\x22\xd0\x78\x73\x9a\x73\xf6\x48\x06\xad\x45\x20\xf1\x84\xd2\x50\x7b\x04\x3e\xc3\xb7\x6f\xd7\x5e\xa3\x16\xc0\xa1\xcf\x34\x08\x8a\x63\x83\x28\x94\xf0\xde\x29\x9f\x81\x37\xa7\x96\xfe\xc1\xe5\xc5\xd9\x35\x72\xfe\xcf\x40\xa7\x11\xe4\x08\x02\x2d\x1b\x7a\xa6\x1c\x10\x4e\xa6\xb3\xc5\x32\x9e\xdd\x8e\xdf\xef\x76\xe1\x4c\x36\xb4\xdf\x9f\xf4\xf5\xd5\x62\x9c\xcc\xe2\xcf\xe3\xf7\xa6\x8f\xdb\x09\xfe\x12\x00\x10\xac\x11\xad\xa5\x89\x6a\x95\x46\x03\xf6\xd5\xab\x67\xfc\xfd\x78\xb8\xc2\x87\x42\x50\x32\x97\x35\x05\x47\xba\x80\xad\x89\x5a\xbc\xbb\xb0\x02\xf8\x09\x13\x80\xd4\x90\x7c\x14\x40\xa1\x44\xce\x9a\xc4\x0b\xa0\xbf\x1f\xdd\x10\xe0\x61\x57\x22\x93\x0e\x37\x37\xe3\xf9\x04\x1f\xbc\x0d\xe1\xb6\xa9\xc5\x6e\x17\x2e\xfa\xb7\xfb\xbd\x18\xcf\x27\xe2\xb5\x7f\xbb\x5d\x98\x90\x33\xdb\xfd\xfe\xe8\xe3\x0f\x68\x3e\x9b\xf7\x8a\xe8\x77\xfb\x7a\x6e\x1a\x98\x7f\xbf\x1c\x75\x5c\xce\x73\x97\x3f\x4d\x1b\x59\x1e\x8e\xf3\xfe\xaf\x60\xf7\x7b\xdc\x1c\x75\xe0\xe9\xe9\x60\x45\xef\xc2\xbf\x01\x00\x00\xff\xff\x7d\x34\xfc\x3c\x7e\x05\x00\x00")

func assetsStartupShBytes() ([]byte, error) {
	return bindataRead(
		_assetsStartupSh,
		"assets/startup.sh",
	)
}

func assetsStartupSh() (*asset, error) {
	bytes, err := assetsStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsWorkerSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\x5f\x6f\xdb\x36\x14\xc5\xdf\xf9\x29\xce\xe0\x02\x49\x00\x4b\x4a\xd7\xa1\x0f\xc9\x3a\x40\xcb\xec\xd6\x5b\xe2\x78\xb6\xd3\x22\xe8\x8a\x80\x12\xaf\x24\x36\x32\xa9\xf2\x8f\x55\xd7\xf3\x77\x1f\x28\xd9\x4d\xd6\x05\x1b\xb0\x37\xe9\xf2\xfe\x39\x87\xfc\x91\x83\xef\x92\x4c\xaa\x24\xe3\xb6\x62\x03\x36\x80\x75\xdc\x38\xdf\xc0\xe6\x46\x36\x0e\x85\x36\xf8\xe4\xc9\x13\x5a\x6d\xee\xc9\xc4\x5d\xd2\x85\x6e\x36\x46\x96\x95\xc3\x71\x7e\x82\xef\x4f\x9f\xbf\xc4\xaf\x5e\x35\x24\xf1\x1b\x6f\xf9\x4a\x3b\xdd\xa5\x2d\x2b\x69\x51\xc8\x9a\x20\x2d\x1a\x6e\x1c\x74\x81\xb9\xe6\x42\x52\xdf\xa7\xff\x0e\xab\x85\x21\x82\xd5\x85\x6b\xb9\xa1\x33\x6c\xb4\x47\xce\x15\x0c\x09\x69\x9d\x91\x99\x77\x04\xe9\xc0\x95\x48\xb4\xc1\x4a\x0b\x59\x6c\xd8\x20\x84\xbc\x12\x64\xe0\x2a\x82\x23\xb3\xb2\x61\x44\xf8\x79\x3d\xbd\xc1\x6b\x52\x64\x78\x8d\x99\xcf\x6a\x99\xe3\x52\xe6\xa4\x2c\x81\x5b\x34\x21\x62\x2b\x12\xc8\x42\x9b\x50\x30\x0e\x0a\x16\x7b\x05\x18\x6b\xaf\x04\x77\x52\xab\x21\x48\xba\x8a\x0c\xd6\x64\xac\xd4\x0a\x2f\x0e\x23\xf6\xfd\x86\xd0\x86\x0d\x70\xcc\x5d\x90\x6d\xa0\x9b\x50\x76\x02\xae\x36\xa8\xb9\x7b\xa8\xfc\xd6\xf3\x83\x35\x01\xa9\xba\x96\x95\x6e\x08\xae\xe2\x2e\x38\x6b\x65\x5d\x23\x23\x78\x4b\x85\xaf\x87\x6c\x80\xcc\x3b\xbc\x9b\x2c\xdf\x5c\xdf\x2c\x91\x4e\x6f\xf1\x2e\x9d\xcf\xd3\xe9\xf2\xf6\x1c\xad\x74\x95\xf6\x0e\xb4\xa6\xbe\x93\x5c\x35\xb5\x24\x81\x96\x1b\xc3\x95\xdb\x40\x17\x6c\x80\xab\xd1\xfc\xe2\x4d\x3a\x5d\xa6\x3f\x4f\x2e\x27\xcb\x5b\x68\x83\xf1\x64\x39\x1d\x2d\x16\x18\x5f\xcf\x91\x62\x96\xce\x97\x93\x8b\x9b\xcb\x74\x8e\xd9\xcd\x7c\x76\xbd\x18\xc5\xc0\x82\x82\x28\x62\x83\x7f\xdb\xd5\xa2\x3b\x17\x43\x10\xe4\xb8\xac\x6d\xef\xf6\x56\x7b\xd8\x4a\xfb\x5a\xa0\xe2\x6b\x82\xa1\x9c\xe4\x9a\x04\x38\x72\xdd\x6c\xfe\xfb\xb4\xd8\x00\xbc\xd6\xaa\xec\x1c\x62\xac\x75\xc6\x4d\x0c\x4c\x0a\x28\xed\x86\xb0\x44\xf8\xb1\x72\xae\x39\x4b\x92\xb6\x6d\xe3\x52\xf9\x58\x9b\x32\xa9\xfb\x6a\x9b\xfc\x14\x74\x1c\x58\xdc\x43\xdd\x31\x6e\x51\xd4\x9e\x94\x13\x9d\xf2\x5a\x97\xa5\x54\xe5\x30\x10\x16\x14\xa9\x43\x52\x07\x7f\xb4\xe2\x8a\x97\x1d\xfd\x48\x0b\xb7\xe7\x6d\x1f\x44\x21\x55\x60\xc9\xc2\x71\x7b\x6f\x87\x70\x8f\x47\x55\xde\x09\xdd\x2a\xdb\x55\xbc\xbd\x0a\x6a\x72\x81\xc4\x68\xed\x82\xac\x45\x98\x72\x98\x1e\x33\x59\xe0\xfd\x7b\x44\x0a\xcf\x8e\x85\xce\xef\xc9\xa0\xb1\x88\x38\xfe\x44\x69\xa8\x39\x28\x3e\xc1\x87\x0f\xe7\x9d\x4a\x06\xec\xf3\xcc\x0a\x51\x71\x48\x60\x85\x64\xc1\x95\x0c\x5c\x3d\x3b\xb6\xf4\x09\xcf\x4f\x4f\xce\x21\xf4\xa3\x02\xaf\x10\x09\x44\x91\xe2\x2b\xfa\xba\x17\x7f\x30\x00\x88\x08\x47\x93\xe9\x62\x99\x4e\x2f\x46\xaf\xb6\xdb\x78\xa2\xac\xe3\x2a\xa7\x29\x5f\xd1\x6e\x77\xd4\xad\xdf\x2c\x46\xf3\x69\x7a\x35\x7a\x65\x3a\xa0\x8f\x0e\xa5\x6b\x24\x6b\x6e\x92\x5a\x66\x49\x3f\xe9\xec\x9b\x7f\x7c\xbc\xdf\x3f\x12\xfb\x40\x54\x6a\x5d\xd6\x14\x1d\xc4\x03\xb6\x26\x6a\xf0\xe2\xd4\x32\xe0\x7f\x6c\x09\x90\x19\xe2\xf7\x0c\x28\x24\x13\x5a\x11\x7b\x68\xc8\x06\x98\x19\x6a\xc2\x1d\xdf\xdf\xc4\xdf\xbb\xe7\xed\xea\x70\xc2\x86\xb8\xd0\xaa\xde\x60\x3c\xb9\x1c\x75\x06\x8f\x7a\x87\xd1\xdf\x50\xb8\xdb\x6e\xe3\xb7\xfd\xbd\xde\xed\xee\x6a\xa9\xfc\xe7\x3b\xbe\x12\x2f\x7f\x38\x62\x6d\x49\x0e\x81\x49\x7b\x96\x24\xa5\x74\x95\xcf\xe2\x5c\xaf\x92\x07\xdf\x4f\x35\x4c\x0c\xd5\xc4\x03\xb2\x81\x97\x5a\x73\x91\xac\x1f\xcf\x48\x9e\x6d\x0f\x8a\x76\xb1\xe3\x26\x2e\xbf\x30\xc7\x0d\xa2\x2f\x9f\xd7\x05\x9e\x58\xcc\xc5\xe3\x68\x30\x3e\xf7\xfd\xdb\xd0\xb3\xc9\xe2\x27\x75\x60\xbb\x8d\x67\x46\x7f\xa4\xdc\x4d\x7e\xd9\xed\xc2\x6f\x7f\xec\x1d\xae\x7b\x9c\xd9\x63\x88\x24\xfe\xe1\xac\xcc\x9b\xaf\xe8\xb3\xbf\x02\x00\x00\xff\xff\xbc\x4d\xf2\xaa\x63\x06\x00\x00")

func assetsWorkerShBytes() ([]byte, error) {
	return bindataRead(
		_assetsWorkerSh,
		"assets/worker.sh",
	)
}

func assetsWorkerSh() (*asset, error) {
	bytes, err := assetsWorkerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/worker.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/startup.sh": assetsStartupSh,
	"assets/worker.sh": assetsWorkerSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"startup.sh": &bintree{assetsStartupSh, map[string]*bintree{}},
		"worker.sh": &bintree{assetsWorkerSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

