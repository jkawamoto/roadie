// Code generated by go-bindata.
// sources:
// assets/fluentd.service
// assets/roadie.service
// assets/worker.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFluentdService = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\xd1\x6e\xdb\x46\x10\x7c\xe7\x57\x0c\xa0\x07\x27\x80\x25\x26\x29\xd0\x02\x6e\x55\x80\x71\xa5\x44\xad\x4d\x0b\x24\x05\xc3\x08\xfc\x70\x22\x97\xe4\x35\xc7\x3b\xf6\x6e\x4f\x2c\x11\xe4\xdf\x8b\xa3\x68\x17\x8d\x81\xf4\x8d\xb7\x9c\xdd\x9d\x99\xdd\x5d\x44\x0b\xd4\xca\x93\xe6\x6a\xe5\xc8\x9e\x64\x49\xd1\x02\x05\x75\xbd\x12\x4c\x30\x35\xe6\x28\xbc\x96\x8c\x8a\x6a\xa9\x25\x4b\xa3\x51\x1b\xfb\x94\x19\x85\x2a\xd7\xa6\x1f\xad\x6c\x5a\xc6\xab\xf2\x35\xde\xbd\x79\xfb\xe3\xf2\xdd\x9b\xb7\x3f\xe1\x77\xaf\x7b\x92\xf8\x43\x0c\xa2\x33\x6c\x26\x6c\xd1\x4a\x87\x5a\x2a\x82\x74\xe8\x85\xe5\xd0\x28\x33\xa2\x92\xb4\x9a\x00\xe7\xef\xf0\xb7\xb6\x44\x70\xa6\xe6\x41\x58\xba\xc2\x68\x3c\x4a\xa1\x61\xa9\x92\x8e\xad\x3c\x7a\x26\x48\x86\xd0\x55\x6c\x2c\x3a\x53\xc9\x7a\x8c\x16\x21\xe4\x75\x45\x16\xdc\x12\x98\x6c\xe7\x42\x8b\xf0\xf8\x90\x1e\xf0\x81\x34\x59\xa1\xb0\xf7\x47\x25\x4b\xdc\xc8\x92\xb4\x23\x08\x87\x3e\x44\x5c\x4b\x15\x8e\xa1\x4c\x48\xd8\x06\x06\xf9\xcc\x00\x5b\xe3\x75\x25\x82\x03\x97\x20\xc9\x2d\x59\x9c\xc8\xba\xe0\xc8\x0f\x4f\x2d\xe6\x7a\x97\x30\x36\x5a\xe0\x95\xe0\x40\xdb\xc2\xf4\x21\xed\x35\x84\x1e\x11\xdc\x7d\xce\xfc\x56\xf3\xbf\xd2\x2a\x48\x3d\x95\x6c\x4d\x4f\xe0\x56\x70\x50\x36\x48\xa5\x70\x24\x78\x47\xb5\x57\x97\xd1\x02\x47\xcf\xb8\xdf\x15\x1f\xef\x0e\x05\x92\xf4\x01\xf7\x49\x96\x25\x69\xf1\xf0\x33\x06\xc9\xad\xf1\x0c\x3a\xd1\xb9\x92\xec\x7a\x25\xa9\xc2\x20\xac\x15\x9a\x47\x98\x3a\x5a\xe0\x76\x93\x5d\x7f\x4c\xd2\x22\x79\xbf\xbb\xd9\x15\x0f\x30\x16\xdb\x5d\x91\x6e\xf2\x1c\xdb\xbb\x0c\x09\xf6\x49\x56\xec\xae\x0f\x37\x49\x86\xfd\x21\xdb\xdf\xe5\x9b\x15\x90\x53\x20\x15\x36\xe6\x3b\xae\xd6\xd3\x5c\x2c\xa1\x22\x16\x52\xb9\xb3\xda\x07\xe3\xe1\x5a\xe3\x55\x85\x56\x9c\x08\x96\x4a\x92\x27\xaa\x20\x50\x9a\x7e\xfc\xff\x69\x45\x0b\x08\x65\x74\x33\x29\x7c\x5a\x1e\x60\x57\x43\x1b\xbe\x84\x23\xc2\x2f\x2d\x73\x7f\x15\xc7\xc3\x30\xac\x1a\xed\x57\xc6\x36\xb1\x3a\x67\xbb\xf8\xd7\xc0\xe3\xd3\x41\x4b\x7e\x8c\x7e\x23\x57\x5a\x39\x8d\x67\xbd\x3d\xef\x34\x6e\x4c\x83\x5b\xa1\x45\x43\x1d\x69\x46\x3e\x1f\x47\x46\x7f\x79\x69\xc9\xad\x2b\x53\x7e\x26\xfb\x7c\x34\xd1\xa7\x19\xf1\x18\x6d\xfe\xa6\x32\x67\x61\x79\x6f\x69\xbd\x8c\xbd\xb3\xf1\x51\xea\xf8\x9c\x00\xc7\xa6\x7f\x3e\x9c\xef\x43\x6d\xf7\x12\xb8\x7e\x01\xf2\x1a\xcb\xa5\x16\x1d\x3d\x81\xb1\x24\x5c\xec\xd2\xbc\x48\xd2\xeb\xcd\xfa\xcb\x97\x55\x2a\x3a\xfa\xfa\xf5\x62\x8a\x1f\xf2\x4d\x96\x26\xb7\x9b\xb5\x9d\x1c\xbb\xc0\xf2\x84\xf8\x24\x6c\xac\xe4\x71\x2e\x79\xf5\xcd\x1b\x7f\x7e\x9e\x8f\x77\x0e\x2c\x1b\x63\x1a\x45\xcb\xb9\xdf\x55\x45\xa7\x99\xa0\xe9\x5f\xf0\xfb\x8f\xde\x8c\xdc\x24\x42\xa8\x41\x8c\x2e\x2a\xc6\x9e\xd6\x2e\x6c\x64\x30\x70\xa7\x1d\x0b\xa5\x1e\xa3\x7b\xa1\x99\xaa\xf7\xe3\xba\xf3\x8a\xe5\xd2\x3b\xb2\x2b\x16\xb6\x21\x8e\xfe\x09\x00\x00\xff\xff\x57\x73\x4d\x37\xb0\x04\x00\x00")

func assetsFluentdServiceBytes() ([]byte, error) {
	return bindataRead(
		_assetsFluentdService,
		"assets/fluentd.service",
	)
}

func assetsFluentdService() (*asset, error) {
	bytes, err := assetsFluentdServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/fluentd.service", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRoadieService = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x5d\x6f\xe3\x36\x10\x7c\xd7\xaf\x18\xc4\x2f\x77\x40\x24\x5d\xae\x40\x0b\xa4\x75\x01\x5f\x9a\x0f\xb7\x39\xc7\x90\x65\x04\xc1\x21\x0f\xb4\xb4\x92\x88\x52\xa4\x4a\x2e\xad\x0a\xc6\xfd\xf7\x82\xb2\x92\x00\x67\xf4\xee\x4d\x5a\xce\x0e\x67\x76\x96\xb3\x68\x06\x6b\x44\x29\x29\x71\x64\xf7\xb2\xa0\x68\x86\x9c\xda\x4e\x09\x26\x98\x0a\x53\x15\x5e\x4b\x46\x49\x95\xd4\x92\xa5\xd1\xa8\x8c\x9d\x1a\xe3\xba\xe8\xa2\xc0\x73\x65\xba\xc1\xca\xba\x61\xbc\x2b\xde\xe3\xe3\x87\x8b\x9f\xe3\x8f\x1f\x2e\x7e\xc1\x9f\x5e\x77\x24\xf1\x97\xe8\x45\x6b\xd8\x8c\xd8\xbc\x91\x0e\x95\x54\x04\xe9\xd0\x09\xcb\xe1\xae\xec\x28\x64\x04\x1c\xbf\xc3\x69\x65\x89\xe0\x4c\xc5\xbd\xb0\x74\x89\xc1\x78\x14\x42\xc3\x52\x29\x1d\x5b\xb9\xf3\x4c\x90\x0c\xa1\xcb\xd4\x58\xb4\xa6\x94\xd5\x10\xcd\x42\xc9\xeb\x92\x2c\xb8\x21\x30\xd9\xd6\x85\x2b\xc2\xcf\xed\x6a\x8b\x5b\xd2\x64\x85\xc2\xda\xef\x94\x2c\x70\x2f\x0b\xd2\x8e\x20\x1c\xba\x50\x71\x0d\x95\xd8\x05\x9a\xd0\x70\x13\x14\x6c\x26\x05\xb8\x31\x5e\x97\x22\x0c\xe1\x1c\x24\xb9\x21\x8b\x3d\x59\x17\x86\xf2\xd3\xcb\x15\x13\xdf\x39\x8c\x8d\x66\x78\x27\x38\xc8\xb6\x30\x5d\x68\x7b\x0f\xa1\x07\x84\x01\xbf\x76\x7e\xeb\xf9\xcd\x5a\x09\xa9\x47\xca\xc6\x74\x04\x6e\x04\x07\x67\xbd\x54\x0a\x3b\x82\x77\x54\x79\x75\x1e\xcd\xb0\xf3\x8c\xc7\x65\x7e\xf7\xb0\xcd\xb1\x58\x3d\xe1\x71\x91\x65\x8b\x55\xfe\xf4\x2b\x7a\xc9\x8d\xf1\x0c\xda\xd3\x91\x49\xb6\x9d\x92\x54\xa2\x17\xd6\x0a\xcd\x03\x4c\x15\xcd\xf0\xf9\x3a\xbb\xba\x5b\xac\xf2\xc5\xa7\xe5\xfd\x32\x7f\x82\xb1\xb8\x59\xe6\xab\xeb\xcd\x06\x37\x0f\x19\x16\x58\x2f\xb2\x7c\x79\xb5\xbd\x5f\x64\x58\x6f\xb3\xf5\xc3\xe6\x3a\x01\x36\x14\x44\x85\xa5\xf9\xce\x54\xab\x31\x17\x4b\x28\x89\x85\x54\xee\xe8\xf6\xc9\x78\xb8\xc6\x78\x55\xa2\x11\x7b\x82\xa5\x82\xe4\x9e\x4a\x08\x14\xa6\x1b\x7e\x9c\x56\x34\x83\x50\x46\xd7\xa3\xc3\x97\xe5\x01\x96\x15\xb4\xe1\x73\x38\x22\xfc\xd6\x30\x77\x97\x69\xda\xf7\x7d\x52\x6b\x9f\x18\x5b\xa7\xea\xd8\xed\xd2\xdf\x83\x8e\x2f\x5b\x2d\xf9\x39\xfa\x83\x5c\x61\xe5\x18\xcf\x7c\x8a\x61\x33\x16\x70\xfd\x2f\x15\x3e\xd4\xa3\x8c\xfe\xf1\xd2\x92\x9b\x57\xca\x93\xe6\xf2\xf5\xc5\x44\x5f\x36\xc7\xaf\xe7\x28\xa0\x37\x2c\x2c\xaf\x2d\xcd\xe3\xd4\x3b\x9b\xee\xa4\x4e\x4b\x53\xfc\x4d\x16\x8e\x4d\x87\xc3\x21\x59\x89\x96\xbe\x7e\xfd\x01\xd8\xb6\xff\x07\x7d\x45\x16\xde\x2a\xc4\x06\xa9\x35\x86\xd3\xa3\x83\x64\x68\x15\xce\x26\xdf\x2d\xb1\x28\x05\x8b\xa4\x36\xa6\x56\x94\x48\xcd\x64\xb5\x50\x69\x61\xda\xce\x33\x7d\x9e\xce\xd3\xfd\x45\x2a\xb5\x63\xa1\x0b\x4a\x05\x4f\xbb\xe7\x26\xca\x33\xc4\x77\x38\x7b\xc1\xc6\x37\x4a\xec\x8d\xbd\xc4\xed\xc8\x79\xf6\xa6\x6d\x7e\x62\xc1\x6b\xc4\x12\x71\xac\x45\x4b\x6f\x6e\x10\xef\x4f\x24\x5f\x9e\x78\x38\x1c\x92\x65\x2b\xea\x80\x3f\x1c\x92\x87\x31\x1b\x17\x9a\x8b\x53\xbf\x93\x06\xd3\x9d\x48\xf8\x66\xe4\x19\xb9\x51\xa9\x50\xbd\x18\x5c\x94\x0f\x1d\xcd\x5d\x78\x10\x21\xc5\x65\x98\x80\x52\xcf\xd1\xa3\xd0\x4c\xe5\xa7\x61\xde\x7a\xc5\x32\xf6\x8e\x6c\xc2\xc2\xd6\xc4\xd1\x7f\x01\x00\x00\xff\xff\x56\x5e\x6f\x4a\x31\x05\x00\x00")

func assetsRoadieServiceBytes() ([]byte, error) {
	return bindataRead(
		_assetsRoadieService,
		"assets/roadie.service",
	)
}

func assetsRoadieService() (*asset, error) {
	bytes, err := assetsRoadieServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/roadie.service", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsWorkerSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\x6f\x6f\xdb\x36\x10\xc6\xdf\xf3\x53\x3c\x83\x0b\x24\x01\x2c\x29\x69\x87\x0e\x48\xd6\x01\x5a\xe6\xb4\xde\x12\xc7\xb3\x9d\x16\x41\x57\x04\xb4\x78\x92\xd8\xc8\xa4\xca\x3f\x56\x5d\xcf\xdf\x7d\xa0\x64\x35\x59\x17\x6c\xc0\xde\x49\x24\xef\xee\x79\x78\xbf\xe3\xe0\xbb\x64\x29\x55\xb2\xe4\xb6\x64\x03\x36\x80\x75\xdc\x38\x5f\xc3\x66\x46\xd6\x0e\xb9\x36\xf8\xe4\xc9\x13\x1a\x6d\xee\xc9\xc4\xed\xa1\x73\x5d\x6f\x8c\x2c\x4a\x87\xc3\xec\x08\xcf\x8f\x4f\x5e\x46\xcf\x8f\x4f\x7e\xc0\xaf\x5e\xd5\x24\xf1\x1b\x6f\xf8\x4a\x3b\xdd\x9e\x5d\x94\xd2\x22\x97\x15\x41\x5a\xd4\xdc\x38\xe8\x1c\x33\xcd\x85\xa4\x2e\x59\xf7\x1d\x76\x73\x43\x04\xab\x73\xd7\x70\x43\xa7\xd8\x68\x8f\x8c\x2b\x18\x12\xd2\x3a\x23\x97\xde\x11\xa4\x03\x57\x22\xd1\x06\x2b\x2d\x64\xbe\x61\x83\xb0\xe4\x95\x20\x03\x57\x12\x1c\x99\x95\x0d\x25\xc2\xcf\xeb\xc9\x0d\x5e\x93\x22\xc3\x2b\x4c\xfd\xb2\x92\x19\x2e\x65\x46\xca\x12\xb8\x45\x1d\x56\x6c\x49\x02\xcb\x90\x26\x04\x5c\x04\x05\xf3\xbd\x02\x5c\x68\xaf\x04\x77\x52\xab\x21\x48\xba\x92\x0c\xd6\x64\xac\xd4\x0a\x2f\xfa\x12\xfb\x7c\x43\x68\xc3\x06\x38\xe4\x2e\xc8\x36\xd0\x75\x08\x3b\x02\x57\x1b\x54\xdc\x3d\x44\x7e\xeb\xf9\xc1\x9a\x80\x54\x6d\xca\x52\xd7\x04\x57\x72\x17\x9c\x35\xb2\xaa\xb0\x24\x78\x4b\xb9\xaf\x86\x6c\x80\xa5\x77\x78\x37\x5e\xbc\xb9\xbe\x59\x20\x9d\xdc\xe2\x5d\x3a\x9b\xa5\x93\xc5\xed\x19\x1a\xe9\x4a\xed\x1d\x68\x4d\x5d\x26\xb9\xaa\x2b\x49\x02\x0d\x37\x86\x2b\xb7\x81\xce\xd9\x00\x57\xa3\xd9\xf9\x9b\x74\xb2\x48\x7f\x1e\x5f\x8e\x17\xb7\xd0\x06\x17\xe3\xc5\x64\x34\x9f\xe3\xe2\x7a\x86\x14\xd3\x74\xb6\x18\x9f\xdf\x5c\xa6\x33\x4c\x6f\x66\xd3\xeb\xf9\x28\x06\xe6\x14\x44\x11\x1b\xfc\xdb\xad\xe6\x6d\x5f\x0c\x41\x90\xe3\xb2\xb2\x9d\xdb\x5b\xed\x61\x4b\xed\x2b\x81\x92\xaf\x09\x86\x32\x92\x6b\x12\xe0\xc8\x74\xbd\xf9\xef\x6e\xb1\x01\x78\xa5\x55\xd1\x3a\xec\xe1\x01\xc6\x39\x94\x76\x43\x58\x22\xfc\x58\x3a\x57\x9f\x26\x49\xd3\x34\x71\xa1\x7c\xac\x4d\x91\x54\x5d\xb4\x4d\x7e\x0a\x3a\x7a\x16\xf7\x64\xb7\xa0\x5b\xe4\x95\x27\xe5\x44\xab\xbc\xd2\x45\x21\x55\x31\x0c\x84\x05\x45\xaa\x3f\xd4\x4e\x40\xb4\xe2\x8a\x17\xed\x08\x20\xcd\xdd\x9e\xb7\xfd\x22\x72\xa9\x02\x4b\x16\x8e\xdb\x7b\x3b\x84\x7b\x5c\xaa\xf4\x4e\xe8\x46\xd9\x36\xe2\xed\x55\x50\x93\x09\x24\x46\x6b\x17\x64\xcd\x43\x95\xbe\x7a\xcc\x64\x8e\xf7\xef\x11\x29\x3c\x3b\x14\x3a\xbb\x27\x83\xda\x22\xe2\xf8\x13\x85\xa1\xba\x57\x7c\x84\x0f\x1f\xce\x5a\x95\x0c\xd8\x9f\x33\x2b\x44\x79\x7f\x80\xe5\x92\x05\x57\x32\x70\xf5\xec\xd0\xd2\x27\x9c\x1c\x1f\x9d\x41\xe8\x47\x01\x5e\x21\x12\x88\x22\xc5\x57\xf4\xf5\x2e\xfe\x60\x00\x10\x11\x0e\xc6\x93\xf9\x22\x9d\x9c\x8f\x5e\x6d\xb7\xf1\x58\x59\xc7\x55\x46\x13\xbe\xa2\xdd\xee\xa0\xdd\xbf\x99\x8f\x66\x93\xf4\x6a\xf4\xca\xb4\x3d\x39\xe8\x43\xd7\x48\xd6\xdc\x24\x95\x5c\x26\x5d\xa5\xd3\x6f\xfe\xf1\xf1\x7e\xff\x48\xec\x17\xa2\x42\xeb\xa2\xa2\xa8\x17\x0f\xd8\x8a\xa8\xc6\x8b\x63\xcb\x80\xff\x71\x25\xc0\xd2\x10\xbf\x67\x40\x2e\x99\xd0\x8a\xd8\x43\x42\x36\xc0\xd4\x50\x1d\x66\x7c\x3f\x89\xbf\xb7\x6f\xdc\x55\xdf\x61\x43\x5c\x68\x55\x6d\x70\x31\xbe\x1c\xb5\x06\x0f\x3a\x87\xd1\xdf\x50\xb8\xdb\x6e\xe3\xb7\xdd\x5c\xef\x76\x77\x95\x54\xfe\xf3\x1d\x5f\x89\x97\xdf\x1f\xb0\xa6\x20\x87\xc0\xa4\x3d\x4d\x92\x42\xba\xd2\x2f\xe3\x4c\xaf\x92\x07\xdf\x4f\x25\x4c\x0c\x55\xc4\x03\xb2\x81\x97\x4a\x73\x91\xac\x1f\xd7\x48\x9e\x6d\x7b\x45\xbb\xd8\x71\x13\x17\x5f\x98\xe3\x06\xd1\x97\xcf\xeb\x1c\x4f\x6c\x66\xe2\xf1\x6a\x30\x3e\xf3\xdd\xdb\xd0\xb1\xc9\xe2\x27\x75\x60\xbb\x8d\xa7\x46\x7f\xa4\xcc\x8d\x7f\xd9\xed\xc2\x6f\xd7\xf6\x16\xd7\x3d\xce\xec\x31\x44\x12\xff\x70\x56\x64\xf5\x57\xf4\xd9\x5f\x01\x00\x00\xff\xff\x98\x12\x29\x9c\x68\x06\x00\x00")

func assetsWorkerShBytes() ([]byte, error) {
	return bindataRead(
		_assetsWorkerSh,
		"assets/worker.sh",
	)
}

func assetsWorkerSh() (*asset, error) {
	bytes, err := assetsWorkerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/worker.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/fluentd.service": assetsFluentdService,
	"assets/roadie.service": assetsRoadieService,
	"assets/worker.sh": assetsWorkerSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"fluentd.service": &bintree{assetsFluentdService, map[string]*bintree{}},
		"roadie.service": &bintree{assetsRoadieService, map[string]*bintree{}},
		"worker.sh": &bintree{assetsWorkerSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

