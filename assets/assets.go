// Code generated by go-bindata.
// sources:
// assets/startup.sh
// assets/worker.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x61\x6f\xdb\x36\x14\xfc\xce\x5f\x71\x83\x0b\x24\x01\x22\x2b\x69\x81\x0d\x48\xd2\x02\x5a\x60\xb7\xde\x52\x3b\x90\x6d\x14\x41\xd7\x0f\x94\xf8\x24\x71\xa1\x48\x8d\xa4\x6c\x18\x8e\xff\xfb\x40\xc9\x4a\xd6\x7c\x58\x81\x7e\xa3\x9e\xde\x3b\xdd\xdd\x3b\x6a\xf4\x4b\x9c\x49\x1d\x67\xdc\x55\x6c\xc4\x46\x70\x9e\x5b\xdf\x36\x70\xb9\x95\x8d\x1f\x77\xb5\x5b\xd3\xec\xac\x2c\x2b\x8f\xd3\xfc\x0c\x6f\x2f\x2e\x7f\x8d\xde\x5e\x5c\xfe\x86\x3f\x5a\xdd\x90\xc4\x9f\x7c\xcb\x6b\xe3\x4d\xd7\xbb\xaa\xa4\x43\x21\x15\x41\x3a\x34\xdc\x7a\x98\x02\xa9\xe1\x42\x52\x0f\xd6\x9f\xc3\xdb\xc2\x12\xc1\x99\xc2\x6f\xb9\xa5\x2b\xec\x4c\x8b\x9c\x6b\x58\x12\xd2\x79\x2b\xb3\xd6\x13\xa4\x07\xd7\x22\x36\x16\xb5\x11\xb2\xd8\xb1\x51\x28\xb5\x5a\x90\x85\xaf\x08\x9e\x6c\xed\xc2\x27\xc2\xc3\xc7\xf9\x1a\x1f\x49\x93\xe5\x0a\xf7\x6d\xa6\x64\x8e\x3b\x99\x93\x76\x04\xee\xd0\x84\x8a\xab\x48\x20\x0b\x30\x61\x60\x1a\x18\x2c\x8f\x0c\x30\x35\xad\x16\xdc\x4b\xa3\xcf\x41\xd2\x57\x64\xb1\x21\xeb\xa4\xd1\x78\x37\x7c\xe2\x88\x77\x0e\x63\xd9\x08\xa7\xdc\x07\xda\x16\xa6\x09\x63\x67\xe0\x7a\x07\xc5\xfd\xcb\xe4\x6b\xcd\x2f\xd2\x04\xa4\xee\x20\x2b\xd3\x10\x7c\xc5\x7d\x50\xb6\x95\x4a\x21\x23\xb4\x8e\x8a\x56\x9d\xb3\x11\xb2\xd6\xe3\xcb\x6c\xf5\x69\xb1\x5e\x21\x99\x3f\xe0\x4b\x92\xa6\xc9\x7c\xf5\x70\x8d\xad\xf4\x95\x69\x3d\x68\x43\x3d\x92\xac\x1b\x25\x49\x60\xcb\xad\xe5\xda\xef\x60\x0a\x36\xc2\xe7\x49\x7a\xfb\x29\x99\xaf\x92\xdf\x67\x77\xb3\xd5\x03\x8c\xc5\x74\xb6\x9a\x4f\x96\x4b\x4c\x17\x29\x12\xdc\x27\xe9\x6a\x76\xbb\xbe\x4b\x52\xdc\xaf\xd3\xfb\xc5\x72\x32\x06\x96\x14\x48\x11\x1b\xfd\x9f\xab\x45\xb7\x17\x4b\x10\xe4\xb9\x54\xae\x57\xfb\x60\x5a\xb8\xca\xb4\x4a\xa0\xe2\x1b\x82\xa5\x9c\xe4\x86\x04\x38\x72\xd3\xec\x7e\xbc\x2d\x36\x02\x57\x46\x97\x9d\xc2\x21\x3c\xc0\xac\x80\x36\xfe\x1c\x8e\x08\x37\x95\xf7\xcd\x55\x1c\x6f\xb7\xdb\x71\xa9\xdb\xb1\xb1\x65\xac\xfa\x69\x17\x7f\x08\x3c\x86\x2c\xf6\x41\xee\x73\xed\x90\x19\x5f\xa1\x50\x2d\x69\x2f\x42\xb2\xc0\x51\xca\xe0\x5f\x63\x4d\x69\x79\x1d\x26\x73\x81\xd8\x1a\xe3\x03\xc4\x32\x8c\x41\x99\xb2\x94\xba\x1c\x33\x59\xe0\xeb\x57\x44\x1a\x6f\x4e\x85\xc9\x1f\xc9\xa2\x71\x88\x38\x9e\x50\x5a\x6a\x06\xe0\x33\x7c\xfb\x76\x1d\x34\x6a\x06\x1c\xfb\x6c\x8d\xa8\x18\x1a\x58\x21\x59\xf0\x4e\x86\x0c\xbc\x39\x75\xf4\x0f\x2e\x2f\xce\xae\x21\xcc\x7f\x06\x5a\x8d\x48\x20\x8a\x34\xaf\xe9\x99\x72\x44\x38\x99\xcd\x97\xab\x64\x7e\x3b\x79\xbf\xdf\x8f\xe7\xbc\xa6\xc3\xe1\xa4\xab\xaf\x97\x93\x74\x9e\x7c\x9e\xbc\xb7\x9d\x63\x27\xf8\x8b\x01\x40\xb4\x41\xbc\xe1\x36\x56\x32\x8b\x7b\xec\xab\x57\xcf\xf8\xfb\xf1\x78\x85\x8f\x85\xa8\x34\xa6\x54\x14\x0d\x74\x01\xa7\x88\x1a\xbc\xbb\x70\x0c\xf8\x09\x13\x80\xcc\x12\x7f\x64\x40\x21\x99\x30\x9a\xd8\x0b\x60\xb8\x1f\x6d\x1f\xe0\x7e\x57\x2c\xe7\x1e\x37\x37\x93\xc5\x14\x1f\x82\x0d\xe3\x5d\xad\xd8\x7e\x3f\x5e\x76\x6f\x0f\x07\x36\x59\x4c\xd9\x6b\xff\xf6\xfb\x71\x4a\xde\xee\x0e\x87\xc1\xc7\x1f\xd0\x7c\x36\xef\x15\xd1\xef\xf6\xf5\xdc\xd4\x33\xff\x7e\x39\x72\x58\xce\x73\x57\x38\xcd\x6a\x5e\x1e\x8f\x8b\xee\xaf\xe0\x0e\x07\xdc\x0c\x3a\xf0\xf4\x74\xb4\xa2\x73\xe1\xdf\x00\x00\x00\xff\xff\x00\x8a\x15\xeb\x7e\x05\x00\x00")

func assetsStartupShBytes() ([]byte, error) {
	return bindataRead(
		_assetsStartupSh,
		"assets/startup.sh",
	)
}

func assetsStartupSh() (*asset, error) {
	bytes, err := assetsStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsWorkerSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\x6f\x6f\xdb\x36\x10\xc6\xdf\xf3\x53\x3c\x83\x0b\x24\x01\x2c\x29\x69\x87\x0e\x48\xd6\x01\x5a\xe6\xb4\xde\x12\xc7\xb3\x9d\x16\x41\x57\x04\xb4\x78\x92\xd8\xc8\xa4\xca\x3f\x56\x5d\xcf\xdf\x7d\xa0\x64\x35\x59\x17\x6c\xc0\xde\x49\x24\xef\xee\x79\x78\xbf\xe3\xe0\xbb\x64\x29\x55\xb2\xe4\xb6\x64\x03\x36\x80\x75\xdc\x38\x5f\xc3\x66\x46\xd6\x0e\xb9\x36\xf8\xe4\xc9\x13\x1a\x6d\xee\xc9\xc4\xed\xa1\x73\x5d\x6f\x8c\x2c\x4a\x87\xc3\xec\x08\xcf\x8f\x4f\x5e\x46\xcf\x8f\x4f\x7e\xc0\xaf\x5e\xd5\x24\xf1\x1b\x6f\xf8\x4a\x3b\xdd\x9e\x5d\x94\xd2\x22\x97\x15\x41\x5a\xd4\xdc\x38\xe8\x1c\x33\xcd\x85\xa4\x2e\x59\xf7\x1d\x76\x73\x43\x04\xab\x73\xd7\x70\x43\xa7\xd8\x68\x8f\x8c\x2b\x18\x12\xd2\x3a\x23\x97\xde\x11\xa4\x03\x57\x22\xd1\x06\x2b\x2d\x64\xbe\x61\x83\xb0\xe4\x95\x20\x03\x57\x12\x1c\x99\x95\x0d\x25\xc2\xcf\xeb\xc9\x0d\x5e\x93\x22\xc3\x2b\x4c\xfd\xb2\x92\x19\x2e\x65\x46\xca\x12\xb8\x45\x1d\x56\x6c\x49\x02\xcb\x90\x26\x04\x5c\x04\x05\xf3\xbd\x02\x5c\x68\xaf\x04\x77\x52\xab\x21\x48\xba\x92\x0c\xd6\x64\xac\xd4\x0a\x2f\xfa\x12\xfb\x7c\x43\x68\xc3\x06\x38\xe4\x2e\xc8\x36\xd0\x75\x08\x3b\x02\x57\x1b\x54\xdc\x3d\x44\x7e\xeb\xf9\xc1\x9a\x80\x54\x6d\xca\x52\xd7\x04\x57\x72\x17\x9c\x35\xb2\xaa\xb0\x24\x78\x4b\xb9\xaf\x86\x6c\x80\xa5\x77\x78\x37\x5e\xbc\xb9\xbe\x59\x20\x9d\xdc\xe2\x5d\x3a\x9b\xa5\x93\xc5\xed\x19\x1a\xe9\x4a\xed\x1d\x68\x4d\x5d\x26\xb9\xaa\x2b\x49\x02\x0d\x37\x86\x2b\xb7\x81\xce\xd9\x00\x57\xa3\xd9\xf9\x9b\x74\xb2\x48\x7f\x1e\x5f\x8e\x17\xb7\xd0\x06\x17\xe3\xc5\x64\x34\x9f\xe3\xe2\x7a\x86\x14\xd3\x74\xb6\x18\x9f\xdf\x5c\xa6\x33\x4c\x6f\x66\xd3\xeb\xf9\x28\x06\xe6\x14\x44\x11\x1b\xfc\xdb\xad\xe6\x6d\x5f\x0c\x41\x90\xe3\xb2\xb2\x9d\xdb\x5b\xed\x61\x4b\xed\x2b\x81\x92\xaf\x09\x86\x32\x92\x6b\x12\xe0\xc8\x74\xbd\xf9\xef\x6e\xb1\x01\x78\xa5\x55\xd1\x3a\xec\xe1\x01\xc6\x39\x94\x76\x43\x58\x22\xfc\x58\x3a\x57\x9f\x26\x49\xd3\x34\x71\xa1\x7c\xac\x4d\x91\x54\x5d\xb4\x4d\x7e\x0a\x3a\x7a\x16\xf7\x64\xb7\xa0\x5b\xe4\x95\x27\xe5\x44\xab\xbc\xd2\x45\x21\x55\x31\x0c\x84\x05\x45\xaa\x3f\xd4\x4e\x40\xb4\xe2\x8a\x17\xed\x08\x20\xcd\xdd\x9e\xb7\xfd\x22\x72\xa9\x02\x4b\x16\x8e\xdb\x7b\x3b\x84\x7b\x5c\xaa\xf4\x4e\xe8\x46\xd9\x36\xe2\xed\x55\x50\x93\x09\x24\x46\x6b\x17\x64\xcd\x43\x95\xbe\x7a\xcc\x64\x8e\xf7\xef\x11\x29\x3c\x3b\x14\x3a\xbb\x27\x83\xda\x22\xe2\xf8\x13\x85\xa1\xba\x57\x7c\x84\x0f\x1f\xce\x5a\x95\x0c\xd8\x9f\x33\x2b\x44\x79\x7f\x80\xe5\x92\x05\x57\x32\x70\xf5\xec\xd0\xd2\x27\x9c\x1c\x1f\x9d\x41\xe8\x47\x01\x5e\x21\x12\x88\x22\xc5\x57\xf4\xf5\x2e\xfe\x60\x00\x10\x11\x0e\xc6\x93\xf9\x22\x9d\x9c\x8f\x5e\x6d\xb7\xf1\x58\x59\xc7\x55\x46\x13\xbe\xa2\xdd\xee\xa0\xdd\xbf\x99\x8f\x66\x93\xf4\x6a\xf4\xca\xb4\x3d\x39\xe8\x43\xd7\x48\xd6\xdc\x24\x95\x5c\x26\x5d\xa5\xd3\x6f\xfe\xf1\xf1\x7e\xff\x48\xec\x17\xa2\x42\xeb\xa2\xa2\xa8\x17\x0f\xd8\x8a\xa8\xc6\x8b\x63\xcb\x80\xff\x71\x25\xc0\xd2\x10\xbf\x67\x40\x2e\x99\xd0\x8a\xd8\x43\x42\x36\xc0\xd4\x50\x1d\x66\x7c\x3f\x89\xbf\xb7\x6f\xdc\x55\xdf\x61\x43\x5c\x68\x55\x6d\x70\x31\xbe\x1c\xb5\x06\x0f\x3a\x87\xd1\xdf\x50\xb8\xdb\x6e\xe3\xb7\xdd\x5c\xef\x76\x77\x95\x54\xfe\xf3\x1d\x5f\x89\x97\xdf\x1f\xb0\xa6\x20\x87\xc0\xa4\x3d\x4d\x92\x42\xba\xd2\x2f\xe3\x4c\xaf\x92\x07\xdf\x4f\x25\x4c\x0c\x55\xc4\x03\xb2\x81\x97\x4a\x73\x91\xac\x1f\xd7\x48\x9e\x6d\x7b\x45\xbb\xd8\x71\x13\x17\x5f\x98\xe3\x06\xd1\x97\xcf\xeb\x1c\x4f\x6c\x66\xe2\xf1\x6a\x30\x3e\xf3\xdd\xdb\xd0\xb1\xc9\xe2\x27\x75\x60\xbb\x8d\xa7\x46\x7f\xa4\xcc\x8d\x7f\xd9\xed\xc2\x6f\xd7\xf6\x16\xd7\x3d\xce\xec\x31\x44\x12\xff\x70\x56\x64\xf5\x57\xf4\xd9\x5f\x01\x00\x00\xff\xff\x98\x12\x29\x9c\x68\x06\x00\x00")

func assetsWorkerShBytes() ([]byte, error) {
	return bindataRead(
		_assetsWorkerSh,
		"assets/worker.sh",
	)
}

func assetsWorkerSh() (*asset, error) {
	bytes, err := assetsWorkerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/worker.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/startup.sh": assetsStartupSh,
	"assets/worker.sh": assetsWorkerSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"startup.sh": &bintree{assetsStartupSh, map[string]*bintree{}},
		"worker.sh": &bintree{assetsWorkerSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

