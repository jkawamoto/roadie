// Code generated by go-bindata.
// sources:
// assets/fluentd.service
// assets/logcast.service
// assets/queue.service
// assets/roadie.service
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFluentdService = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x5d\x6f\xdb\x46\x10\x7c\xe7\xaf\x18\x40\x0f\x4e\x00\x8b\xb2\xd5\x8f\x00\x6e\x55\x80\x71\xa5\x44\xad\x2d\x0b\x24\x05\xc3\x08\xfc\x70\x22\x97\xe4\x35\xc7\x3b\xf6\x6e\x4f\x2c\x11\xe4\xbf\x17\x47\xc9\x0e\x9a\x00\x6e\xfb\x42\x90\xcb\x9d\xd9\xd9\xd9\xdd\x49\x34\x41\xa5\x3c\x69\x2e\x63\x47\xf6\x20\x0b\x8a\x26\xc8\xa9\xed\x94\x60\x82\xa9\x70\x8a\xc2\x6b\xc9\x28\xa9\x92\x5a\xb2\x34\x1a\x95\xb1\x4f\xc8\x28\xb0\x5c\x9b\x6e\xb0\xb2\x6e\x18\xaf\x8a\xd7\x98\x5f\x5c\xfe\x38\x9d\x5f\x5c\xbe\xc1\x6f\x5e\x77\x24\xf1\xbb\xe8\x45\x6b\xd8\x8c\xb9\x79\x23\x1d\x2a\xa9\x08\xd2\xa1\x13\x96\x43\xa1\xd4\x88\x52\x52\x3c\x26\x1c\xdf\xc3\xdf\xca\x12\xc1\x99\x8a\x7b\x61\xe9\x0a\x83\xf1\x28\x84\x86\xa5\x52\x3a\xb6\x72\xef\x99\x20\x19\x42\x97\x33\x63\xd1\x9a\x52\x56\x43\x34\x09\x21\xaf\x4b\xb2\xe0\x86\xc0\x64\x5b\x17\x4a\x84\x8f\x77\x9b\x1d\xde\x91\x26\x2b\x14\xb6\x7e\xaf\x64\x81\x1b\x59\x90\x76\x04\xe1\xd0\x85\x88\x6b\xa8\xc4\x3e\xd0\x04\xc0\x2a\x28\xc8\x4e\x0a\xb0\x32\x5e\x97\x22\x38\x70\x0e\x92\xdc\x90\xc5\x81\xac\x0b\x8e\x7c\xf7\x54\xe2\xc4\x77\x0e\x63\xa3\x09\x5e\x09\x0e\xb2\x2d\x4c\x17\x60\xaf\x21\xf4\x80\xe0\xee\x33\xf2\xeb\x9e\xbf\xb4\x56\x42\xea\x91\xb2\x31\x1d\x81\x1b\xc1\xa1\xb3\x5e\x2a\x85\x3d\xc1\x3b\xaa\xbc\x3a\x8f\x26\xd8\x7b\xc6\xfd\x3a\x7f\x7f\xb7\xcb\x91\x6c\x1e\x70\x9f\xa4\x69\xb2\xc9\x1f\x7e\x42\x2f\xb9\x31\x9e\x41\x07\x3a\x32\xc9\xb6\x53\x92\x4a\xf4\xc2\x5a\xa1\x79\x80\xa9\xa2\x09\x6e\x97\xe9\xf5\xfb\x64\x93\x27\x6f\xd7\x37\xeb\xfc\x01\xc6\x62\xb5\xce\x37\xcb\x2c\xc3\xea\x2e\x45\x82\x6d\x92\xe6\xeb\xeb\xdd\x4d\x92\x62\xbb\x4b\xb7\x77\xd9\x32\x06\x32\x0a\xa2\xc2\xc6\xbc\xe0\x6a\x35\xce\xc5\x12\x4a\x62\x21\x95\x3b\x76\xfb\x60\x3c\x5c\x63\xbc\x2a\xd1\x88\x03\xc1\x52\x41\xf2\x40\x25\x04\x0a\xd3\x0d\xff\x3e\xad\x68\x02\xa1\x8c\xae\xc7\x0e\x9f\x96\x07\x58\x57\xd0\x86\xcf\xe1\x88\xf0\x73\xc3\xdc\x5d\xcd\x66\x7d\xdf\xc7\xb5\xf6\xb1\xb1\xf5\x4c\x1d\xd1\x6e\xf6\x4b\xd0\xf1\x61\xa7\x25\x3f\x46\xbf\x92\x2b\xac\x1c\xc7\xb3\x58\x1d\x77\x1a\x37\xa6\xc6\xad\xd0\xa2\xa6\x96\x34\x23\x3b\x1d\x47\x4a\x7f\x7a\x69\xc9\x2d\x4a\x53\x7c\x24\xfb\x7c\x34\x49\xc5\x64\xbf\x0e\x46\x1f\x4e\xb0\xc7\x68\xf9\x17\x15\x19\x0b\xcb\x5b\x4b\x8b\xe9\xcc\x3b\x3b\xdb\x4b\x3d\x3b\x02\xe0\xd8\x74\xcf\xd7\xf4\x72\xaa\x6d\xff\x63\x62\xe7\x95\xc2\x1f\x1f\x4f\x77\x77\x8a\x4e\x6b\x63\x6a\x45\xd3\x13\xc5\x55\x49\x87\x2f\x34\x8b\x6f\x6a\x79\x8d\xe9\x54\x8b\x96\x9e\x6a\x62\x4a\x38\x5b\x6f\xb2\x3c\xd9\x5c\x2f\x17\x9f\x3e\xc5\x1b\xd1\xd2\xe7\xcf\x67\x63\x7c\x97\x2d\xd3\x4d\x72\xbb\x5c\xd8\x71\x1a\x67\x98\x76\xb8\x9c\xbf\x89\x2f\xe2\x8b\xf8\xf2\x6a\xfe\xfd\x7c\xfe\xc3\xf1\xf9\x3f\x64\x99\xee\x1b\x55\xff\x30\x2b\x25\x37\x4a\x17\xaa\x17\x83\x8b\xf2\xa1\xa3\x85\x0b\x3b\x1e\xdc\x5f\x6b\xc7\x42\xa9\xc7\xe8\x5e\x68\xa6\xf2\xed\xb0\x68\xbd\x62\x39\xf5\x8e\x6c\xcc\xc2\xd6\xc4\xd1\xdf\x01\x00\x00\xff\xff\x85\xdf\x1d\x83\x02\x05\x00\x00")

func assetsFluentdServiceBytes() ([]byte, error) {
	return bindataRead(
		_assetsFluentdService,
		"assets/fluentd.service",
	)
}

func assetsFluentdService() (*asset, error) {
	bytes, err := assetsFluentdServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/fluentd.service", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsLogcastService = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x6f\xdb\x46\x10\xbd\xef\xaf\x78\x88\x2e\x09\x60\x51\xb6\xfa\x11\x20\xad\x0a\x30\xae\x95\xa8\x75\x65\x83\xa2\x60\x18\x81\x0f\x23\x72\x28\x6e\xb0\xda\x65\x77\x67\xc5\x12\x69\xfe\x7b\xb1\xfa\x48\x5a\x1f\x9a\x03\x81\xdd\xe1\xcc\x9b\xf7\x66\xde\x8e\xd4\x08\xc6\x6d\x2b\x0a\x92\x05\xf6\x7b\x5d\xb1\x1a\xa1\xe4\x5d\x67\x48\x18\xae\xc1\x29\x8a\x68\xb5\xa0\xe6\x46\x5b\x2d\xda\x59\x34\xce\xa7\xaf\x27\x5f\x6b\xbb\x4d\x20\xd8\x71\x08\xb4\x65\x88\xc3\xdc\x44\xb6\x52\x67\x2a\x35\xb8\x76\xdd\xe0\xf5\xb6\x15\xbc\xac\x5e\x61\x7a\x79\xf5\xe3\x78\x7a\x79\xf5\x1a\xbf\x45\xdb\xb1\xc6\xef\xd4\xd3\xce\x89\x3b\xe4\x96\xad\x0e\x68\xb4\x61\xe8\x80\x8e\xbc\x24\x0e\x85\xa3\x5a\xf3\x11\xec\x78\x4e\x7f\x1b\xcf\x8c\xe0\x1a\xe9\xc9\xf3\x1b\x0c\x2e\xa2\x22\x0b\xcf\xb5\x0e\xe2\xf5\x26\x0a\x43\x0b\xc8\xd6\x13\xe7\xb1\x73\xb5\x6e\x06\x35\x4a\xa1\x68\x6b\xf6\x90\x96\x21\xec\x77\x21\xb5\x48\x97\x77\xcb\x35\xde\xb1\x65\x4f\x06\xf7\x71\x63\x74\x85\x5b\x5d\xb1\x0d\x0c\x0a\xe8\x52\x24\xb4\x5c\x63\x93\x60\x52\xc1\x3c\x31\x58\x9d\x18\x60\xee\xa2\xad\x29\x0d\xe7\x02\xac\xa5\x65\x8f\x3d\xfb\x90\x86\xf5\xdd\xb9\xc5\x09\xef\x02\xce\xab\x11\x5e\x92\x24\xda\x1e\xae\x4b\x65\xaf\x40\x76\x40\x1a\xfc\x97\xca\xe7\x9a\xbf\x4a\xab\xa1\xed\x01\xb2\x75\x1d\x43\x5a\x92\xa4\xac\xd7\xc6\x60\xc3\x88\x81\x9b\x68\x2e\xd4\x08\x9b\x28\x78\x58\x94\xef\xef\xd6\x25\xf2\xe5\x23\x1e\xf2\xa2\xc8\x97\xe5\xe3\x4f\xe8\xb5\xb4\x2e\x0a\x78\xcf\x47\x24\xbd\xeb\x8c\xe6\x1a\x3d\x79\x4f\x56\x06\xb8\x46\x8d\xf0\xc7\x4d\x71\xfd\x3e\x5f\x96\xf9\xdb\xc5\xed\xa2\x7c\x84\xf3\x98\x2f\xca\xe5\xcd\x6a\x85\xf9\x5d\x81\x1c\xf7\x79\x51\x2e\xae\xd7\xb7\x79\x81\xfb\x75\x71\x7f\xb7\xba\xc9\x80\x15\x27\x52\xc9\x4c\xff\x33\xd5\xe6\xb0\x17\xcf\xa8\x59\x48\x9b\x70\x54\xfb\xe8\x22\x42\xeb\xa2\xa9\xd1\xd2\x9e\xe1\xb9\x62\xbd\xe7\x1a\x84\xca\x75\xc3\xb7\xb7\xa5\x46\x20\xe3\xec\xf6\xa0\xf0\x6c\x1e\x60\xd1\xc0\x3a\xb9\x40\x60\xc6\xcf\xad\x48\xf7\x66\x32\xe9\xfb\x3e\xdb\xda\x98\x39\xbf\x9d\x98\x63\x75\x98\xfc\x92\x78\x7c\x58\x5b\x2d\x4f\xea\x57\x0e\x95\xd7\x87\xf5\xcc\xe6\x47\xbb\xe3\xf6\xab\xd7\xc3\xbf\xcc\xae\x0a\xfe\x33\x6a\xcf\x61\xd6\x9c\xdc\x7f\x7e\x3b\x9f\x3e\x65\xab\xe3\xf1\xf3\x67\x95\x37\xc2\xfe\x79\x8a\x52\x1f\x4e\x19\x4f\xea\xe6\x2f\xae\x56\x42\x5e\x66\x93\x8d\xb6\x93\x0d\x85\x16\xe3\x0a\x2f\x26\x31\xf8\x43\xe4\xa3\x8b\xde\x92\xa9\xc4\x60\x1c\xff\x03\x8e\xb1\xc3\xc7\xe0\x2c\xc6\x0d\xfe\xc6\x97\x02\x5b\x91\xe0\x6a\xfa\x3a\xbb\xcc\x2e\xb3\x2b\x4c\xbf\x9f\x4e\x7f\x78\xa1\x0a\x0e\x87\x2e\x64\x7a\x1a\xc2\xf9\xba\xe2\x6a\x36\x0d\x5c\xa9\x72\xe8\x78\x16\x92\x27\x12\xbb\x85\x0d\x42\xc6\x3c\xa9\x07\xb2\xc2\xf5\xdb\x61\xb6\x8b\x46\xf4\x38\x06\xf6\x99\x90\xdf\xb2\xa8\x7f\x02\x00\x00\xff\xff\x29\x58\xe3\x7d\x4d\x04\x00\x00")

func assetsLogcastServiceBytes() ([]byte, error) {
	return bindataRead(
		_assetsLogcastService,
		"assets/logcast.service",
	)
}

func assetsLogcastService() (*asset, error) {
	bytes, err := assetsLogcastServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/logcast.service", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsQueueService = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x61\x6f\xdb\x46\x0c\xfd\xae\x5f\xf1\x00\x7f\x69\x81\x48\x6a\xba\xa1\x03\xb2\x79\x80\x9b\x25\xad\xb7\xd4\xc9\x64\x79\x41\x50\x04\xc1\x59\xa2\xac\xdb\x4e\x77\x2a\x8f\x67\xc5\x0d\xf2\xdf\x87\x93\xdd\x76\xd8\xb2\xf6\x9b\xc4\xe3\x7b\x7c\x24\x1f\x27\xc9\x04\x1f\x02\x05\xca\x3c\xf1\x56\x57\x94\x4c\x50\x52\xd7\x1b\x25\x04\xd7\xe0\x10\x45\xb0\x5a\x50\x53\xa3\xad\x16\xed\x2c\x1a\xc7\x60\xa7\x6a\x4d\xe9\x08\x4f\x3b\x65\xd5\x86\x38\x89\x84\xa7\xae\xdf\xb1\xde\xb4\x82\x67\xd5\x73\xbc\x7c\x71\xfc\x2a\x7d\xf9\xe2\xf8\x07\xfc\x1a\x6c\x4f\x1a\xbf\xa9\x41\x75\x4e\xdc\x98\x5b\xb6\xda\xa3\xd1\x86\xa0\x3d\x7a\xc5\x12\xab\x16\x23\x73\x36\x26\xec\xbf\xe3\x6b\xc3\x44\xf0\xae\x91\x41\x31\x9d\x60\xe7\x02\x2a\x65\xc1\x54\x6b\x2f\xac\xd7\x41\x08\x5a\xa0\x6c\x9d\x3b\x46\xe7\x6a\xdd\xec\x92\x49\x0c\x05\x5b\x13\x43\x5a\x82\x10\x77\x3e\x96\x88\x3f\x6f\x16\x2b\xbc\x21\x4b\xac\x0c\xae\xc2\xda\xe8\x0a\x17\xba\x22\xeb\x09\xca\xa3\x8f\x11\xdf\x52\x8d\x75\xa4\x89\x80\xf3\xa8\x60\x79\x50\x80\x73\x17\x6c\xad\xe2\x38\x8e\x40\x5a\x5a\x62\x6c\x89\x7d\x1c\xcf\x77\x9f\x4a\x1c\xf8\x8e\xe0\x38\x99\xe0\x99\x92\x28\x9b\xe1\xfa\x08\x7b\x0e\x65\x77\x88\xa3\xfe\x8c\xfc\x77\xcf\x5f\x5a\xab\xa1\xed\x48\xd9\xba\x9e\x20\xad\x92\xd8\xd9\xa0\x8d\xc1\x9a\x10\x3c\x35\xc1\x1c\x25\x13\xac\x83\xe0\x7a\x5e\xbe\xbd\x5c\x95\x98\x2d\x6e\x70\x3d\x2b\x8a\xd9\xa2\xbc\xf9\x11\x83\x96\xd6\x05\x01\x6d\x69\xcf\xa4\xbb\xde\x68\xaa\x31\x28\x66\x65\x65\x07\xd7\x24\x13\xbc\x3b\x2b\x4e\xdf\xce\x16\xe5\xec\xf5\xfc\x62\x5e\xde\xc0\x31\xce\xe7\xe5\xe2\x6c\xb9\xc4\xf9\x65\x81\x19\xae\x66\x45\x39\x3f\x5d\x5d\xcc\x0a\x5c\xad\x8a\xab\xcb\xe5\x59\x06\x2c\x29\x8a\x8a\xf6\xf9\xca\x54\x9b\x71\x2f\x4c\xa8\x49\x94\x36\x7e\xdf\xed\x8d\x0b\xf0\xad\x0b\xa6\x46\xab\xb6\x04\xa6\x8a\xf4\x96\x6a\x28\x54\xae\xdf\x7d\x7b\x5b\xc9\x04\xca\x38\xbb\x19\x3b\xfc\x64\x1e\x60\xde\xc0\x3a\x39\x82\x27\xc2\x4f\xad\x48\x7f\x92\xe7\xc3\x30\x64\x1b\x1b\x32\xc7\x9b\xdc\xec\xd1\x3e\xff\x39\xea\x78\xbf\xb2\x5a\x6e\x93\x5f\xc8\x57\xac\xc7\xf5\x4c\x0f\x6b\xf8\x3d\x1a\x1c\xef\xf6\x06\xc7\xf2\x70\x27\x05\x7d\x08\x9a\xc9\x4f\x1b\x13\xc8\x4a\xfd\xf9\x80\x66\x8d\x10\xff\x27\x9a\xbc\x3f\x00\x6f\x93\xb3\x7b\xaa\x96\xa2\x58\xae\x98\xa6\x79\xf0\x9c\xaf\xb5\xcd\xab\xc0\x06\xe9\xc5\x25\xa2\x52\x7f\x92\xe7\x1b\x2d\x6d\x58\x67\x95\xeb\xf2\x3f\xff\x3a\x9c\x4c\xfe\xd4\xcd\xe5\x4c\x86\x54\x6c\xa4\x76\x83\x35\x4e\xd5\xf9\xf6\xe1\x21\xfb\x63\xef\xa8\xc7\xc7\x27\x41\x77\xff\xcc\xb8\x33\xda\x86\xfb\x3b\xd5\xd5\xaf\xbe\xcf\x44\x71\xb6\xf9\xf8\x3f\x2a\x45\x31\xd2\x8f\xf7\xdb\xe6\xc9\xeb\xff\x16\x29\xd2\x53\xe4\xec\x9c\x20\x4d\xa3\xaf\xfb\xb4\x72\x5d\xef\x2c\x59\xf1\x38\xfe\x52\x72\x3a\x26\x3d\xa9\x1b\x0f\x0f\xd9\xb8\x90\x85\xea\xe8\xf1\x31\x29\xc8\x8f\x08\x65\x06\xb5\xf3\x49\xb9\xeb\x69\xea\xa3\xb1\xe3\xc8\xe7\xd6\x8b\x32\xe6\x36\xb9\x56\x56\xa8\x7e\xbd\x9b\x76\xc1\x88\x4e\x83\x27\x8e\x92\x36\x24\xc9\xdf\x01\x00\x00\xff\xff\x01\x9d\x45\xb6\x02\x05\x00\x00")

func assetsQueueServiceBytes() ([]byte, error) {
	return bindataRead(
		_assetsQueueService,
		"assets/queue.service",
	)
}

func assetsQueueService() (*asset, error) {
	bytes, err := assetsQueueServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/queue.service", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRoadieService = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xd1\x6e\xdb\x46\x10\x7c\xe7\x57\x0c\xac\x97\x04\x30\xc5\x38\x05\x5a\xc0\xad\x0a\x28\xae\x65\xab\x75\x64\x41\xa2\x60\x18\x86\x1f\x4e\xe4\x52\x3c\xf4\x78\xc7\xee\xed\x49\x25\x82\xfc\x7b\x71\x14\x6d\x03\x11\xd0\xe4\xed\xb8\x37\x33\x37\xb3\xbb\x1c\x25\x23\xb0\x53\xa5\xa6\xb1\x27\xde\xeb\x82\x92\x11\x72\x6a\x5a\xa3\x84\xe0\x2a\x0c\x55\x04\xab\x05\x25\x55\xda\x6a\xd1\xce\xa2\x72\x3c\x10\xd3\x5d\xd1\x26\x51\xe7\xca\xb5\x1d\xeb\x5d\x2d\x78\x57\xbc\xc7\xc7\x0f\x17\x3f\xa7\x1f\x3f\x5c\xfc\x82\x3f\x83\x6d\x49\xe3\x2f\x75\x50\x8d\x13\xd7\x63\xf3\x5a\x7b\x54\xda\x10\xb4\x47\xab\x58\xe2\x5b\xab\xa3\x91\x1e\x70\x3c\xc7\xdb\x8a\x89\xe0\x5d\x25\x07\xc5\x74\x89\xce\x05\x14\xca\x82\xa9\xd4\x5e\x58\x6f\x83\x10\xb4\x40\xd9\x32\x73\x8c\xc6\x95\xba\xea\x92\x51\x2c\x05\x5b\x12\x43\x6a\x82\x10\x37\x3e\x3e\x11\x3f\x6e\x16\x1b\xdc\x90\x25\x56\x06\xcb\xb0\x35\xba\xc0\x9d\x2e\xc8\x7a\x82\xf2\x68\x63\xc5\xd7\x54\x62\x1b\x65\x22\x61\x16\x1d\xac\x07\x07\x98\xb9\x60\x4b\x15\x9b\x70\x0e\xd2\x52\x13\x63\x4f\xec\x63\x53\x7e\x7a\x79\x62\xd0\x3b\x87\xe3\x64\x84\x77\x4a\xa2\x6d\x86\x6b\x23\xed\x3d\x94\xed\x10\x1b\xfc\xca\xfc\x36\xf3\x5b\xb4\x12\xda\xf6\x92\xb5\x6b\x09\x52\x2b\x89\xc9\x0e\xda\x18\x6c\x09\xc1\x53\x15\xcc\x79\x32\xc2\x36\x08\x1e\xe6\xf9\xed\xfd\x26\xc7\x74\xf1\x88\x87\xe9\x6a\x35\x5d\xe4\x8f\xbf\xe2\xa0\xa5\x76\x41\x40\x7b\x3a\x2a\xe9\xa6\x35\x9a\x4a\x1c\x14\xb3\xb2\xd2\xc1\x55\xc9\x08\x9f\xaf\x57\x57\xb7\xd3\x45\x3e\xfd\x34\xbf\x9b\xe7\x8f\x70\x8c\xd9\x3c\x5f\x5c\xaf\xd7\x98\xdd\xaf\x30\xc5\x72\xba\xca\xe7\x57\x9b\xbb\xe9\x0a\xcb\xcd\x6a\x79\xbf\xbe\x1e\x03\x6b\x8a\xa6\xe2\xd2\xfc\x4f\x57\xab\x7e\x2e\x4c\x28\x49\x94\x36\xfe\x98\xf6\xd1\x05\xf8\xda\x05\x53\xa2\x56\x7b\x02\x53\x41\x7a\x4f\x25\x14\x0a\xd7\x76\xdf\x9f\x56\x32\x82\x32\xce\xee\xfa\x84\x2f\xcb\x03\xcc\x2b\x58\x27\xe7\xf0\x44\xf8\xad\x16\x69\x2f\xb3\xec\x70\x38\x8c\x77\x36\x8c\x1d\xef\x32\x73\x64\xfb\xec\xf7\xe8\xe3\x69\x63\xb5\x3c\x27\x7f\x90\x2f\x58\xf7\xe3\x99\x0c\x63\x58\xf7\x05\x5c\xff\x4b\x45\x88\xf5\x64\x45\xff\x04\xcd\xe4\x27\x95\x09\x64\xa5\x7c\xfd\x63\xa6\x95\x10\x9f\x54\x93\xa7\xf5\xf1\xf4\x9c\x44\x8d\xb5\x28\x96\x25\xd3\x24\xcd\x82\xe7\x6c\xab\x6d\x56\xba\xe2\x6f\x62\x78\x71\x2d\xbe\x7c\x19\x2f\x54\x43\x5f\xbf\x7e\x07\xcc\xcd\x0f\x43\xdb\x60\x4c\x04\xcf\x1b\xb5\x3b\x41\xbf\x82\x8b\xc0\x06\xa9\x43\xc6\xce\x49\x76\xec\xc2\xb8\x6b\x0c\xce\x86\xde\x35\x24\xaa\x54\xa2\xc6\x3b\xe7\x76\x86\xc6\xda\x0a\xb1\x55\x26\x2b\x5c\xd3\x06\xa1\xcf\xc3\x7d\xb6\xbf\xc8\xb4\xf5\xa2\x6c\x41\x99\x92\x61\x7f\xfd\x20\x79\x86\xf4\x16\x67\x2f\xd8\x74\x66\xd4\xde\xf1\x25\x6e\x7a\xcd\xb3\x37\x6f\x93\x93\xc0\xc1\x22\xd5\x48\x53\xab\x1a\x7a\xcb\x8e\x74\x7f\x62\xf9\xf2\x24\xc3\x5b\xfa\x78\xbc\xef\xe7\xeb\x23\xb9\x38\x21\x0f\x16\x5c\x7b\xe2\xe0\x9b\xf9\xe4\x5d\x4b\x13\x67\xc9\xd7\x4e\x92\xe4\x69\x1e\x23\x1b\xf3\x9c\x3c\x28\x2b\x54\x7e\xea\x26\x4d\x30\xa2\xd3\xe0\x89\xc7\xa2\x78\x47\x92\xfc\x17\x00\x00\xff\xff\xce\x42\x74\x69\x66\x05\x00\x00")

func assetsRoadieServiceBytes() ([]byte, error) {
	return bindataRead(
		_assetsRoadieService,
		"assets/roadie.service",
	)
}

func assetsRoadieService() (*asset, error) {
	bytes, err := assetsRoadieServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/roadie.service", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/fluentd.service": assetsFluentdService,
	"assets/logcast.service": assetsLogcastService,
	"assets/queue.service": assetsQueueService,
	"assets/roadie.service": assetsRoadieService,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"fluentd.service": &bintree{assetsFluentdService, map[string]*bintree{}},
		"logcast.service": &bintree{assetsLogcastService, map[string]*bintree{}},
		"queue.service": &bintree{assetsQueueService, map[string]*bintree{}},
		"roadie.service": &bintree{assetsRoadieService, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

