// Code generated by go-bindata.
// sources:
// assets/fluentd.service
// assets/logcast.service
// assets/queue.service
// assets/roadie.service
// assets/worker.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFluentdService = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x53\x4d\x6f\xdb\x46\x10\xbd\xf3\x57\x3c\x40\x07\x27\x80\x49\xda\xea\x47\x00\xb5\x2a\xc0\xb8\x52\xa2\xd6\x96\x05\x8a\x82\x61\x18\x3e\xac\xc8\xa1\xb8\xcd\x72\x97\xdd\x9d\x95\x2a\x04\xf9\xef\xc5\x52\xb4\x83\x3a\x40\x9a\x9e\x7a\x11\xb4\xc3\x79\x6f\xde\x9b\x8f\x51\x34\x42\xad\x3c\x69\xae\x12\x47\x76\x2f\x4b\x8a\x46\x28\xa8\xed\x94\x60\x82\xa9\x31\x44\xe1\xb5\x64\x54\x54\x4b\x2d\x59\x1a\x8d\xda\xd8\x27\x64\x14\x58\xae\x4c\x77\xb4\x72\xd7\x30\x5e\x95\xaf\x31\xbe\xb8\xfc\x31\x1e\x5f\x5c\xbe\xc1\x6f\x5e\x77\x24\xf1\xbb\x38\x88\xd6\xb0\xe9\x73\x8b\x46\x3a\xd4\x52\x11\xa4\x43\x27\x2c\x87\x42\xb9\x11\x95\xa4\xa4\x4f\x38\xfd\x0f\x5f\x6b\x4b\x04\x67\x6a\x3e\x08\x4b\x13\x1c\x8d\x47\x29\x34\x2c\x55\xd2\xb1\x95\x5b\xcf\x04\xc9\x10\xba\x4a\x8d\x45\x6b\x2a\x59\x1f\xa3\x51\x08\x79\x5d\x91\x05\x37\x04\x26\xdb\xba\x50\x22\x3c\xde\x2d\x37\x78\x47\x9a\xac\x50\x58\xf9\xad\x92\x25\xae\x65\x49\xda\x11\x84\x43\x17\x22\xae\xa1\x0a\xdb\x40\x13\x00\xf3\xa0\x60\x3d\x28\xc0\xdc\x78\x5d\x89\xd0\x81\x73\x90\xe4\x86\x2c\xf6\x64\x5d\xe8\xc8\x77\x4f\x25\x06\xbe\x73\x18\x1b\x8d\xf0\x4a\x70\x90\x6d\x61\xba\x00\x7b\x0d\xa1\x8f\x08\xdd\x7d\x46\xbe\xf4\xfc\xd9\x5a\x05\xa9\x7b\xca\xc6\x74\x04\x6e\x04\x07\x67\x07\xa9\x14\xb6\x04\xef\xa8\xf6\xea\x3c\x1a\x61\xeb\x19\x77\x8b\xe2\xfd\xed\xa6\x40\xb6\xbc\xc7\x5d\x96\xe7\xd9\xb2\xb8\xff\x09\x07\xc9\x8d\xf1\x0c\xda\xd3\x89\x49\xb6\x9d\x92\x54\xe1\x20\xac\x15\x9a\x8f\x30\x75\x34\xc2\xcd\x2c\xbf\x7a\x9f\x2d\x8b\xec\xed\xe2\x7a\x51\xdc\xc3\x58\xcc\x17\xc5\x72\xb6\x5e\x63\x7e\x9b\x23\xc3\x2a\xcb\x8b\xc5\xd5\xe6\x3a\xcb\xb1\xda\xe4\xab\xdb\xf5\x2c\x01\xd6\x14\x44\x85\x8d\xf9\x4a\x57\xeb\x7e\x2e\x96\x50\x11\x0b\xa9\xdc\xc9\xed\xbd\xf1\x70\x8d\xf1\xaa\x42\x23\xf6\x04\x4b\x25\xc9\x3d\x55\x10\x28\x4d\x77\xfc\xf7\x69\x45\x23\x08\x65\xf4\xae\x77\xf8\xb4\x3c\xc0\xa2\x86\x36\x7c\x0e\x47\x84\x9f\x1b\xe6\x6e\x92\xa6\x87\xc3\x21\xd9\x69\x9f\x18\xbb\x4b\xd5\x09\xed\xd2\x5f\x82\x8e\x87\x8d\x96\xfc\x18\xfd\x4a\xae\xb4\xb2\x1f\xcf\x74\x7e\xda\x69\x5c\x9b\x1d\x6e\x84\x16\x3b\x6a\x49\x33\xd6\xc3\x71\xe4\xf4\xa7\x97\x96\xdc\xb4\x32\xe5\x07\xb2\xcf\x47\x93\xd5\x4c\xf6\x45\x10\x51\xf4\x30\xe0\x1e\xa3\xd9\x5f\x54\xae\x59\x58\x5e\x59\x9a\xc6\xa9\x77\x36\xdd\x4a\x9d\x9e\x10\x70\x6c\xba\xe7\x73\xfa\x7a\xaa\x6d\xbf\x31\xb1\xf3\x4a\xe1\x8f\x0f\xc3\xe1\x0d\xd1\x78\x67\xcc\x4e\x51\x3c\x50\x4c\x2a\xda\x7f\xa6\x99\x7e\x51\xcb\x6b\xc4\xb1\x16\x2d\x3d\xd5\x44\x4c\x38\x5b\x2c\xd7\x45\xb6\xbc\x9a\x4d\x3f\x7e\x4c\x96\xa2\xa5\x4f\x9f\xce\xfa\xf8\x66\x3d\xcb\x97\xd9\xcd\x6c\x6a\xfb\x71\x9c\x21\xee\x70\x39\x7e\x93\x5c\x24\x17\xc9\xe5\x64\xfc\xfd\x78\xfc\xc3\xe9\xf7\x9b\x64\x8d\xfe\x07\x5d\xf1\x1e\xe9\x5e\xd8\x54\xc9\xed\x50\x6b\xf2\xe2\xfd\x1f\x3a\x6a\xba\x2f\x84\xff\x63\xce\x39\xb9\xde\x9d\x50\x07\x71\x74\x51\x71\xec\x68\xea\xc2\x7d\x52\x14\x3d\x2c\xb4\x63\xa1\xd4\x63\x74\x27\x34\x53\xf5\xf6\x38\x6d\xbd\x62\x19\x7b\x47\x36\x61\x61\x77\xc4\xd1\xdf\x01\x00\x00\xff\xff\xc5\x57\x73\x12\xbe\x05\x00\x00")

func assetsFluentdServiceBytes() ([]byte, error) {
	return bindataRead(
		_assetsFluentdService,
		"assets/fluentd.service",
	)
}

func assetsFluentdService() (*asset, error) {
	bytes, err := assetsFluentdServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/fluentd.service", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsLogcastService = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x5d\x6f\xe3\x36\x10\x7c\xe7\xaf\x18\x9c\x5f\xee\x80\x58\x4e\xdc\x8f\x03\xae\x75\x01\x5d\x1a\xdf\xb9\x4d\x9d\x40\x96\x11\x04\x87\x3c\xd0\xd2\xca\xe2\x81\x26\xd5\xe5\xd2\xaa\x80\xfe\xf8\x82\x56\x7c\x29\xf2\xd0\x3e\x08\x20\x57\x9c\xd9\x99\xe5\x70\xa2\x26\xb0\x7e\x5f\xe9\x20\x59\x20\x3e\x9a\x8a\xd4\x04\x25\x1d\x3a\xab\x85\xe0\x1b\x3c\x57\x11\x9d\x11\xd4\xd4\x18\x67\xc4\x78\x87\xc6\x73\xfa\x7a\xcd\xb5\x71\xfb\x44\x82\x03\x85\xa0\xf7\x04\xf1\x58\xda\x48\x4e\xea\x4c\xa5\x06\xd7\xbe\x1b\xd8\xec\x5b\xc1\xdb\xea\x1d\xe6\x97\x57\x3f\x4e\xe7\x97\x57\xef\xf1\x5b\x74\x1d\x19\xfc\xae\x7b\x7d\xf0\xe2\x4f\x67\xcb\xd6\x04\x34\xc6\x12\x4c\x40\xa7\x59\x92\x86\xc2\xeb\xda\xd0\x48\x36\xae\xd3\xdf\x86\x89\x10\x7c\x23\xbd\x66\xfa\x80\xc1\x47\x54\xda\x81\xa9\x36\x41\xd8\xec\xa2\x10\x8c\x40\xbb\x7a\xe6\x19\x07\x5f\x9b\x66\x50\x93\x54\x8a\xae\x26\x86\xb4\x04\x21\x3e\x84\xd4\x22\x6d\x3e\xad\xb7\xf8\x44\x8e\x58\x5b\xdc\xc7\x9d\x35\x15\x6e\x4d\x45\x2e\x10\x74\x40\x97\x2a\xa1\xa5\x1a\xbb\x44\x93\x00\xcb\xa4\x60\xf3\xac\x00\x4b\x1f\x5d\xad\xd3\x70\x2e\x40\x46\x5a\x62\x1c\x89\x43\x1a\xd6\x77\xe7\x16\xcf\x7c\x17\xf0\xac\x26\x78\xab\x25\xc9\x66\xf8\x2e\xc1\xde\x41\xbb\x01\x69\xf0\xdf\x90\xaf\x3d\xbf\x58\xab\x61\xdc\x89\xb2\xf5\x1d\x41\x5a\x2d\xc9\x59\x6f\xac\xc5\x8e\x10\x03\x35\xd1\x5e\xa8\x09\x76\x51\xf0\xb0\x2a\x3f\xdf\x6d\x4b\xe4\xeb\x47\x3c\xe4\x45\x91\xaf\xcb\xc7\x9f\xd0\x1b\x69\x7d\x14\xd0\x91\x46\x26\x73\xe8\xac\xa1\x1a\xbd\x66\xd6\x4e\x06\xf8\x46\x4d\xf0\xc7\x4d\x71\xfd\x39\x5f\x97\xf9\xc7\xd5\xed\xaa\x7c\x84\x67\x2c\x57\xe5\xfa\x66\xb3\xc1\xf2\xae\x40\x8e\xfb\xbc\x28\x57\xd7\xdb\xdb\xbc\xc0\xfd\xb6\xb8\xbf\xdb\xdc\x64\xc0\x86\x92\xa8\x14\xa6\xff\x98\x6a\x73\xba\x17\x26\xd4\x24\xda\xd8\x30\xba\x7d\xf4\x11\xa1\xf5\xd1\xd6\x68\xf5\x91\xc0\x54\x91\x39\x52\x0d\x8d\xca\x77\xc3\xff\xdf\x96\x9a\x40\x5b\xef\xf6\x27\x87\xe7\xf0\x00\xab\x06\xce\xcb\x05\x02\x11\x7e\x6e\x45\xba\x0f\xb3\x59\xdf\xf7\xd9\xde\xc5\xcc\xf3\x7e\x66\x47\x74\x98\xfd\x92\x74\x7c\xd9\x3a\x23\x4f\xea\x57\x0a\x15\x9b\xd3\xf5\x2c\x96\x63\xdc\x71\xfb\x92\xf5\xf0\xaf\xb0\xab\x82\xfe\x8c\x86\x29\x2c\x9a\xe7\xf4\x9f\xdf\x0e\x8f\x12\xce\x0f\x2c\x6f\x84\xf8\xf5\x21\xa5\xbe\x6c\xc6\xd5\x93\xba\xf9\x8b\xaa\x8d\x68\x96\xc5\x6c\x67\xdc\x6c\xa7\x43\x8b\x69\x85\x37\xb3\x18\xf8\x54\xf9\xea\x23\x3b\x6d\x2b\xb1\x98\xc6\x57\xf4\x98\x7a\x7c\x0d\xde\x61\xda\xe0\x6f\x7c\x83\xb8\x4a\x0b\xae\xe6\xef\xb3\xcb\xec\x32\xbb\xc2\xfc\xfb\xf9\xfc\x87\x37\xaa\xa0\x70\xea\xa3\x6d\xaf\x87\x70\xde\x6e\xa8\x5a\xcc\x03\x55\xaa\x1c\x3a\x5a\x84\x94\x8b\xa4\x6f\xe5\x82\x68\x6b\x9f\xd4\x83\x76\x42\xf5\xc7\x61\x71\x88\x56\xcc\x34\x06\xe2\x4c\x34\xef\x49\xd4\x3f\x01\x00\x00\xff\xff\x8d\xe5\x17\x75\x51\x04\x00\x00")

func assetsLogcastServiceBytes() ([]byte, error) {
	return bindataRead(
		_assetsLogcastService,
		"assets/logcast.service",
	)
}

func assetsLogcastService() (*asset, error) {
	bytes, err := assetsLogcastServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/logcast.service", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsQueueService = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x5d\x6f\xdb\x36\x14\x7d\xd7\xaf\x38\x80\x5f\x5a\x20\x92\x9a\x6e\xe8\x80\x6c\x1e\xe0\xe6\xa3\xf5\x96\xd9\x86\x2c\x2f\x08\x8a\x20\xa0\xc5\x2b\x8b\x1d\x45\xaa\xe4\xa5\x15\x37\xf0\x7f\x1f\x28\xbb\xed\x30\x78\xeb\x1b\x79\x79\xcf\xb9\xe7\x7e\x71\x94\x8c\xf0\x29\x50\xa0\xcc\x93\xdb\xaa\x8a\x92\x11\x4a\x6a\x3b\x2d\x98\x60\x6b\x1c\xad\x08\x46\x31\x24\xd5\xca\x28\x56\xd6\xa0\xb6\x0e\xce\x0a\xa9\x28\x1d\xe0\x69\x2b\x8c\xd8\x90\x4b\x22\xe1\xa5\xed\x76\x4e\x6d\x1a\xc6\x8b\xea\x25\x5e\xbf\x3a\x7f\x93\xbe\x7e\x75\xfe\x13\x7e\x0b\xa6\x23\x85\xdf\x45\x2f\x5a\xcb\x76\xf0\x2d\x1b\xe5\x51\x2b\x4d\x50\x1e\x9d\x70\x1c\xa3\x16\x03\x73\x36\x38\x1c\xce\xf1\xb5\x76\x44\xf0\xb6\xe6\x5e\x38\xba\xc0\xce\x06\x54\xc2\xc0\x91\x54\x9e\x9d\x5a\x07\x26\x28\x86\x30\x32\xb7\x0e\xad\x95\xaa\xde\x25\xa3\x68\x0a\x46\x92\x03\x37\x04\x26\xd7\xfa\x18\x22\x5e\xde\xcd\x56\x78\x47\x86\x9c\xd0\x58\x84\xb5\x56\x15\x6e\x55\x45\xc6\x13\x84\x47\x17\x2d\xbe\x21\x89\x75\xa4\x89\x80\x9b\xa8\x60\x79\x54\x80\x1b\x1b\x8c\x14\xb1\x1c\x67\x20\xc5\x0d\x39\x6c\xc9\xf9\x58\x9e\x1f\xbe\x84\x38\xf2\x9d\xc1\xba\x64\x84\x17\x82\xa3\x6c\x07\xdb\x45\xd8\x4b\x08\xb3\x43\x2c\xf5\x57\xe4\xbf\x73\xfe\x96\x9a\x84\x32\x03\x65\x63\x3b\x02\x37\x82\x63\x66\xbd\xd2\x1a\x6b\x42\xf0\x54\x07\x7d\x96\x8c\xb0\x0e\x8c\xbb\x69\xf9\x7e\xbe\x2a\x31\x99\xdd\xe3\x6e\x52\x14\x93\x59\x79\xff\x33\x7a\xc5\x8d\x0d\x0c\xda\xd2\x81\x49\xb5\x9d\x56\x24\xd1\x0b\xe7\x84\xe1\x1d\x6c\x9d\x8c\xf0\xc7\x75\x71\xf9\x7e\x32\x2b\x27\x6f\xa7\xb7\xd3\xf2\x1e\xd6\xe1\x66\x5a\xce\xae\x97\x4b\xdc\xcc\x0b\x4c\xb0\x98\x14\xe5\xf4\x72\x75\x3b\x29\xb0\x58\x15\x8b\xf9\xf2\x3a\x03\x96\x14\x45\xc5\xf1\xf9\x9f\xaa\xd6\x43\x5f\x1c\x41\x12\x0b\xa5\xfd\x21\xdb\x7b\x1b\xe0\x1b\x1b\xb4\x44\x23\xb6\x04\x47\x15\xa9\x2d\x49\x08\x54\xb6\xdb\x7d\xbf\x5b\xc9\x08\x42\x5b\xb3\x19\x32\xfc\x32\x3c\xc0\xb4\x86\xb1\x7c\x06\x4f\x84\x5f\x1a\xe6\xee\x22\xcf\xfb\xbe\xcf\x36\x26\x64\xd6\x6d\x72\x7d\x40\xfb\xfc\xd7\xa8\xe3\xc3\xca\x28\x7e\x48\xae\xc8\x57\x4e\x0d\xed\x19\x1f\xdb\xb0\x1c\x0c\xb8\x7e\xa2\x2a\x44\x7b\x52\xd0\xa7\xa0\x1c\xf9\x71\xad\x03\x19\x96\x5f\x77\x27\xf9\xb0\x3c\x9c\x1e\x92\xe8\xbd\x64\xe1\x78\xe1\x68\x9c\x07\xef\xf2\xb5\x32\x79\x15\x9c\x46\x3a\x47\x54\xe3\x2f\xf2\x7c\xa3\xb8\x09\xeb\xac\xb2\x6d\xfe\xf1\xaf\xe3\x5a\xe4\xa7\xf6\x2a\x77\xa4\x49\x44\xb1\xd2\xf6\x46\x5b\x21\xf3\xed\xf3\x73\xf6\xe7\x61\x6a\xf6\xfb\x93\xa0\xc7\x7f\x7a\x3c\x6a\x65\xc2\xd3\xa3\x68\xe5\x9b\x1f\x33\x16\x2e\xdb\x7c\xfe\x0f\x91\x2c\x1c\xd2\xcf\x4f\xdb\xfa\xe4\x86\x7f\x8f\x14\x69\x85\xdc\x59\xcb\x48\xd3\x38\xbb\x5d\x5a\xd9\xb6\xb3\x86\x0c\x7b\x9c\x7f\x0b\x39\x1e\x9c\x4e\xea\xc6\xf3\x73\xb6\x70\xf6\x23\x55\x3c\xbd\xda\xef\xe3\x75\x26\x5a\xda\xef\xe3\x7f\x31\xbf\x9a\x5f\x9c\x14\x06\xc5\x9e\x74\x0d\xdf\x04\x8e\x45\x3a\x8c\xb8\xf1\x2c\x4c\x35\x7c\x0c\xca\xc3\x05\x63\x94\xd9\x20\x2e\x5a\x41\x7e\xd0\x21\x74\x2f\x76\x3e\x29\x77\x1d\x8d\x7d\x5c\x89\xd8\xc7\x69\xc4\x69\xfd\x90\xdc\x09\xc3\x24\xdf\xee\xc6\x6d\xd0\xac\xd2\xe0\xc9\xc5\x44\x37\xc4\xc9\xdf\x01\x00\x00\xff\xff\xcb\x75\x4b\xcf\x3c\x05\x00\x00")

func assetsQueueServiceBytes() ([]byte, error) {
	return bindataRead(
		_assetsQueueService,
		"assets/queue.service",
	)
}

func assetsQueueService() (*asset, error) {
	bytes, err := assetsQueueServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/queue.service", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRoadieService = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xd1\x6e\xdb\x46\x10\x7c\xe7\x57\x0c\xac\x97\x04\x30\xc5\x38\x05\x5a\xc0\xad\x0a\x28\xae\x65\xab\x75\x64\x41\xa2\x60\x18\x86\x1f\x4e\xe4\x52\x3c\xf4\x78\xc7\xee\xed\x49\x25\x82\xfc\x7b\x71\x14\x6d\x03\x11\xd0\xe4\xed\xb8\x37\x33\x37\xb3\xbb\x1c\x25\x23\xb0\x53\xa5\xa6\xb1\x27\xde\xeb\x82\x92\x11\x72\x6a\x5a\xa3\x84\xe0\x2a\x0c\x55\x04\xab\x05\x25\x55\xda\x6a\xd1\xce\xa2\x72\x3c\x10\xd3\x5d\xd1\x26\x51\xe7\xca\xb5\x1d\xeb\x5d\x2d\x78\x57\xbc\xc7\xc7\x0f\x17\x3f\xa7\x1f\x3f\x5c\xfc\x82\x3f\x83\x6d\x49\xe3\x2f\x75\x50\x8d\x13\xd7\x63\xf3\x5a\x7b\x54\xda\x10\xb4\x47\xab\x58\xe2\x5b\xab\xa3\x91\x1e\x70\x3c\xc7\xdb\x8a\x89\xe0\x5d\x25\x07\xc5\x74\x89\xce\x05\x14\xca\x82\xa9\xd4\x5e\x58\x6f\x83\x10\xb4\x40\xd9\x32\x73\x8c\xc6\x95\xba\xea\x92\x51\x2c\x05\x5b\x12\x43\x6a\x82\x10\x37\x3e\x3e\x11\x3f\x6e\x16\x1b\xdc\x90\x25\x56\x06\xcb\xb0\x35\xba\xc0\x9d\x2e\xc8\x7a\x82\xf2\x68\x63\xc5\xd7\x54\x62\x1b\x65\x22\x61\x16\x1d\xac\x07\x07\x98\xb9\x60\x4b\x15\x9b\x70\x0e\xd2\x52\x13\x63\x4f\xec\x63\x53\x7e\x7a\x79\x62\xd0\x3b\x87\xe3\x64\x84\x77\x4a\xa2\x6d\x86\x6b\x23\xed\x3d\x94\xed\x10\x1b\xfc\xca\xfc\x36\xf3\x5b\xb4\x12\xda\xf6\x92\xb5\x6b\x09\x52\x2b\x89\xc9\x0e\xda\x18\x6c\x09\xc1\x53\x15\xcc\x79\x32\xc2\x36\x08\x1e\xe6\xf9\xed\xfd\x26\xc7\x74\xf1\x88\x87\xe9\x6a\x35\x5d\xe4\x8f\xbf\xe2\xa0\xa5\x76\x41\x40\x7b\x3a\x2a\xe9\xa6\x35\x9a\x4a\x1c\x14\xb3\xb2\xd2\xc1\x55\xc9\x08\x9f\xaf\x57\x57\xb7\xd3\x45\x3e\xfd\x34\xbf\x9b\xe7\x8f\x70\x8c\xd9\x3c\x5f\x5c\xaf\xd7\x98\xdd\xaf\x30\xc5\x72\xba\xca\xe7\x57\x9b\xbb\xe9\x0a\xcb\xcd\x6a\x79\xbf\xbe\x1e\x03\x6b\x8a\xa6\xe2\xd2\xfc\x4f\x57\xab\x7e\x2e\x4c\x28\x49\x94\x36\xfe\x98\xf6\xd1\x05\xf8\xda\x05\x53\xa2\x56\x7b\x02\x53\x41\x7a\x4f\x25\x14\x0a\xd7\x76\xdf\x9f\x56\x32\x82\x32\xce\xee\xfa\x84\x2f\xcb\x03\xcc\x2b\x58\x27\xe7\xf0\x44\xf8\xad\x16\x69\x2f\xb3\xec\x70\x38\x8c\x77\x36\x8c\x1d\xef\x32\x73\x64\xfb\xec\xf7\xe8\xe3\x69\x63\xb5\x3c\x27\x7f\x90\x2f\x58\xf7\xe3\x99\x0c\x63\x58\xf7\x05\x5c\xff\x4b\x45\x88\xf5\x64\x45\xff\x04\xcd\xe4\x27\x95\x09\x64\xa5\x7c\xfd\x63\xa6\x95\x10\x9f\x54\x93\xa7\xf5\xf1\xf4\x9c\x44\x8d\xb5\x28\x96\x25\xd3\x24\xcd\x82\xe7\x6c\xab\x6d\x56\xba\xe2\x6f\x62\x78\x71\x2d\xbe\x7c\x19\x2f\x54\x43\x5f\xbf\x7e\x07\xcc\xcd\x0f\x43\xdb\x60\x4c\x04\xcf\x1b\xb5\x3b\x41\xbf\x82\x8b\xc0\x06\xa9\x43\xc6\xce\x49\x76\xec\xc2\xb8\x6b\x0c\xce\x86\xde\x35\x24\xaa\x54\xa2\xc6\x3b\xe7\x76\x86\xc6\xda\x0a\xb1\x55\x26\x2b\x5c\xd3\x06\xa1\xcf\xc3\x7d\xb6\xbf\xc8\xb4\xf5\xa2\x6c\x41\x99\x92\x61\x7f\xfd\x20\x79\x86\xf4\x16\x67\x2f\xd8\x74\x66\xd4\xde\xf1\x25\x6e\x7a\xcd\xb3\x37\x6f\x93\x93\xc0\xc1\x22\xd5\x48\x53\xab\x1a\x7a\xcb\x8e\x74\x7f\x62\xf9\xf2\x24\xc3\x5b\xfa\x78\xbc\xef\xe7\xeb\x23\xb9\x38\x21\x0f\x16\x5c\x7b\xe2\xe0\x9b\xf9\xe4\x5d\x4b\x13\x67\xc9\xd7\x4e\x92\xe4\x69\x1e\x23\x1b\xf3\x9c\x3c\x28\x2b\x54\x7e\xea\x26\x4d\x30\xa2\xd3\xe0\x89\xc7\xa2\x78\x47\x92\xfc\x17\x00\x00\xff\xff\xce\x42\x74\x69\x66\x05\x00\x00")

func assetsRoadieServiceBytes() ([]byte, error) {
	return bindataRead(
		_assetsRoadieService,
		"assets/roadie.service",
	)
}

func assetsRoadieService() (*asset, error) {
	bytes, err := assetsRoadieServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/roadie.service", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsWorkerSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\x6f\x6f\xdb\x36\x10\xc6\xdf\xf3\x53\x3c\x83\x0b\x24\x01\x2c\x29\x69\x87\x0e\x48\xd6\x01\x5a\xe6\xb4\xde\x12\xc7\xb3\x9d\x16\x41\x57\x04\xb4\x78\x92\xd8\xc8\xa4\xca\x3f\x56\x5d\xcf\xdf\x7d\xa0\x64\x35\x59\x17\x6c\xc0\xde\x49\x24\xef\xee\x79\x78\xbf\xe3\xe0\xbb\x64\x29\x55\xb2\xe4\xb6\x64\x03\x36\x80\x75\xdc\x38\x5f\xc3\x66\x46\xd6\x0e\xb9\x36\xf8\xe4\xc9\x13\x1a\x6d\xee\xc9\xc4\xed\xa1\x73\x5d\x6f\x8c\x2c\x4a\x87\xc3\xec\x08\xcf\x8f\x4f\x5e\x46\xcf\x8f\x4f\x7e\xc0\xaf\x5e\xd5\x24\xf1\x1b\x6f\xf8\x4a\x3b\xdd\x9e\x5d\x94\xd2\x22\x97\x15\x41\x5a\xd4\xdc\x38\xe8\x1c\x33\xcd\x85\xa4\x2e\x59\xf7\x1d\x76\x73\x43\x04\xab\x73\xd7\x70\x43\xa7\xd8\x68\x8f\x8c\x2b\x18\x12\xd2\x3a\x23\x97\xde\x11\xa4\x03\x57\x22\xd1\x06\x2b\x2d\x64\xbe\x61\x83\xb0\xe4\x95\x20\x03\x57\x12\x1c\x99\x95\x0d\x25\xc2\xcf\xeb\xc9\x0d\x5e\x93\x22\xc3\x2b\x4c\xfd\xb2\x92\x19\x2e\x65\x46\xca\x12\xb8\x45\x1d\x56\x6c\x49\x02\xcb\x90\x26\x04\x5c\x04\x05\xf3\xbd\x02\x5c\x68\xaf\x04\x77\x52\xab\x21\x48\xba\x92\x0c\xd6\x64\xac\xd4\x0a\x2f\xfa\x12\xfb\x7c\x43\x68\xc3\x06\x38\xe4\x2e\xc8\x36\xd0\x75\x08\x3b\x02\x57\x1b\x54\xdc\x3d\x44\x7e\xeb\xf9\xc1\x9a\x80\x54\x6d\xca\x52\xd7\x04\x57\x72\x17\x9c\x35\xb2\xaa\xb0\x24\x78\x4b\xb9\xaf\x86\x6c\x80\xa5\x77\x78\x37\x5e\xbc\xb9\xbe\x59\x20\x9d\xdc\xe2\x5d\x3a\x9b\xa5\x93\xc5\xed\x19\x1a\xe9\x4a\xed\x1d\x68\x4d\x5d\x26\xb9\xaa\x2b\x49\x02\x0d\x37\x86\x2b\xb7\x81\xce\xd9\x00\x57\xa3\xd9\xf9\x9b\x74\xb2\x48\x7f\x1e\x5f\x8e\x17\xb7\xd0\x06\x17\xe3\xc5\x64\x34\x9f\xe3\xe2\x7a\x86\x14\xd3\x74\xb6\x18\x9f\xdf\x5c\xa6\x33\x4c\x6f\x66\xd3\xeb\xf9\x28\x06\xe6\x14\x44\x11\x1b\xfc\xdb\xad\xe6\x6d\x5f\x0c\x41\x90\xe3\xb2\xb2\x9d\xdb\x5b\xed\x61\x4b\xed\x2b\x81\x92\xaf\x09\x86\x32\x92\x6b\x12\xe0\xc8\x74\xbd\xf9\xef\x6e\xb1\x01\x78\xa5\x55\xd1\x3a\xec\xe1\x01\xc6\x39\x94\x76\x43\x58\x22\xfc\x58\x3a\x57\x9f\x26\x49\xd3\x34\x71\xa1\x7c\xac\x4d\x91\x54\x5d\xb4\x4d\x7e\x0a\x3a\x7a\x16\xf7\x64\xb7\xa0\x5b\xe4\x95\x27\xe5\x44\xab\xbc\xd2\x45\x21\x55\x31\x0c\x84\x05\x45\xaa\x3f\xd4\x4e\x40\xb4\xe2\x8a\x17\xed\x08\x20\xcd\xdd\x9e\xb7\xfd\x22\x72\xa9\x02\x4b\x16\x8e\xdb\x7b\x3b\x84\x7b\x5c\xaa\xf4\x4e\xe8\x46\xd9\x36\xe2\xed\x55\x50\x93\x09\x24\x46\x6b\x17\x64\xcd\x43\x95\xbe\x7a\xcc\x64\x8e\xf7\xef\x11\x29\x3c\x3b\x14\x3a\xbb\x27\x83\xda\x22\xe2\xf8\x13\x85\xa1\xba\x57\x7c\x84\x0f\x1f\xce\x5a\x95\x0c\xd8\x9f\x33\x2b\x44\x79\x7f\x80\xe5\x92\x05\x57\x32\x70\xf5\xec\xd0\xd2\x27\x9c\x1c\x1f\x9d\x41\xe8\x47\x01\x5e\x21\x12\x88\x22\xc5\x57\xf4\xf5\x2e\xfe\x60\x00\x10\x11\x0e\xc6\x93\xf9\x22\x9d\x9c\x8f\x5e\x6d\xb7\xf1\x58\x59\xc7\x55\x46\x13\xbe\xa2\xdd\xee\xa0\xdd\xbf\x99\x8f\x66\x93\xf4\x6a\xf4\xca\xb4\x3d\x39\xe8\x43\xd7\x48\xd6\xdc\x24\x95\x5c\x26\x5d\xa5\xd3\x6f\xfe\xf1\xf1\x7e\xff\x48\xec\x17\xa2\x42\xeb\xa2\xa2\xa8\x17\x0f\xd8\x8a\xa8\xc6\x8b\x63\xcb\x80\xff\x71\x25\xc0\xd2\x10\xbf\x67\x40\x2e\x99\xd0\x8a\xd8\x43\x42\x36\xc0\xd4\x50\x1d\x66\x7c\x3f\x89\xbf\xb7\x6f\xdc\x55\xdf\x61\x43\x5c\x68\x55\x6d\x70\x31\xbe\x1c\xb5\x06\x0f\x3a\x87\xd1\xdf\x50\xb8\xdb\x6e\xe3\xb7\xdd\x5c\xef\x76\x77\x95\x54\xfe\xf3\x1d\x5f\x89\x97\xdf\x1f\xb0\xa6\x20\x87\xc0\xa4\x3d\x4d\x92\x42\xba\xd2\x2f\xe3\x4c\xaf\x92\x07\xdf\x4f\x25\x4c\x0c\x55\xc4\x03\xb2\x81\x97\x4a\x73\x91\xac\x1f\xd7\x48\x9e\x6d\x7b\x45\xbb\xd8\x71\x13\x17\x5f\x98\xe3\x06\xd1\x97\xcf\xeb\x1c\x4f\x6c\x66\xe2\xf1\x6a\x30\x3e\xf3\xdd\xdb\xd0\xb1\xc9\xe2\x27\x75\x60\xbb\x8d\xa7\x46\x7f\xa4\xcc\x8d\x7f\xd9\xed\xc2\x6f\xd7\xf6\x16\xd7\x3d\xce\xec\x31\x44\x12\xff\x70\x56\x64\xf5\x57\xf4\xd9\x5f\x01\x00\x00\xff\xff\x98\x12\x29\x9c\x68\x06\x00\x00")

func assetsWorkerShBytes() ([]byte, error) {
	return bindataRead(
		_assetsWorkerSh,
		"assets/worker.sh",
	)
}

func assetsWorkerSh() (*asset, error) {
	bytes, err := assetsWorkerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/worker.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/fluentd.service": assetsFluentdService,
	"assets/logcast.service": assetsLogcastService,
	"assets/queue.service": assetsQueueService,
	"assets/roadie.service": assetsRoadieService,
	"assets/worker.sh": assetsWorkerSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"fluentd.service": &bintree{assetsFluentdService, map[string]*bintree{}},
		"logcast.service": &bintree{assetsLogcastService, map[string]*bintree{}},
		"queue.service": &bintree{assetsQueueService, map[string]*bintree{}},
		"roadie.service": &bintree{assetsRoadieService, map[string]*bintree{}},
		"worker.sh": &bintree{assetsWorkerSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

