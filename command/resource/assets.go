// Code generated by go-bindata.
// sources:
// assets/startup.sh
// assets/worker.sh
// DO NOT EDIT!

package resource

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x51\x6f\xdb\x36\x17\x7d\xe7\xaf\x38\x9f\xf5\xd2\x02\x91\x94\x7e\x05\xf6\x90\xa6\x05\xb4\xc0\x6e\xbd\xa5\x76\x20\xdb\x28\x82\x6d\x40\x28\xf1\x4a\xe2\x42\x91\x1a\x49\xd9\x30\x1c\xff\xf7\x81\xb2\x9c\xac\x79\xe8\xb0\xb7\xab\xcb\x73\x2f\xcf\x3d\xe7\x52\xd1\xff\xd2\x42\xea\xb4\xe0\xae\x61\x11\x8b\xe0\x3c\xb7\xbe\xef\xe0\x4a\x2b\x3b\x3f\xa4\x6e\x4c\xb7\xb7\xb2\x6e\x3c\xde\x94\x6f\xf1\xff\xcb\x77\x3f\xe1\x97\x5e\x77\x24\xf1\x2b\xdf\xf1\xd6\x78\x33\xc0\xd6\x8d\x74\xa8\xa4\x22\x48\x87\x8e\x5b\x0f\x53\x21\x37\x5c\x48\x4a\x06\xc0\x29\x0e\xa7\x95\x25\x82\x33\x95\xdf\x71\x4b\x57\xd8\x9b\x1e\x25\xd7\xb0\x24\xa4\xf3\x56\x16\xbd\x27\x48\x0f\xae\x45\x6a\x2c\x5a\x23\x64\xb5\x67\x51\x48\xf5\x5a\x90\x85\x6f\x08\x9e\x6c\xeb\xc2\x15\xe1\xe3\xf3\x62\x83\xcf\xa4\xc9\x72\x85\xbb\xbe\x50\xb2\xc4\xad\x2c\x49\x3b\x02\x77\xe8\x42\xc6\x35\x24\x50\x84\x36\xa1\x60\x16\x18\xac\x46\x06\x98\x99\x5e\x0b\xee\xa5\xd1\x17\x20\xe9\x1b\xb2\xd8\x92\x75\xd2\x68\xbc\x3f\x5f\x31\xf6\xbb\x80\xb1\x2c\xc2\x1b\xee\x03\x6d\x0b\xd3\x85\xb2\xb7\xe0\x7a\x0f\xc5\xfd\x4b\xe5\xeb\x99\x5f\x46\x13\x90\x7a\x68\xd9\x98\x8e\xe0\x1b\xee\xc3\x64\x3b\xa9\x14\x0a\x42\xef\xa8\xea\xd5\x05\x8b\x50\xf4\x1e\xdf\xe6\xeb\x2f\xcb\xcd\x1a\xd9\xe2\x1e\xdf\xb2\x3c\xcf\x16\xeb\xfb\x0f\xd8\x49\xdf\x98\xde\x83\xb6\x74\xea\x24\xdb\x4e\x49\x12\xd8\x71\x6b\xb9\xf6\x7b\x98\x8a\x45\xf8\x3a\xcd\x6f\xbe\x64\x8b\x75\xf6\xf3\xfc\x76\xbe\xbe\x87\xb1\x98\xcd\xd7\x8b\xe9\x6a\x85\xd9\x32\x47\x86\xbb\x2c\x5f\xcf\x6f\x36\xb7\x59\x8e\xbb\x4d\x7e\xb7\x5c\x4d\x13\x60\x45\x81\x14\xb1\xe8\x47\xaa\x56\x83\x2f\x96\x20\xc8\x73\xa9\xdc\x69\xda\x7b\xd3\xc3\x35\xa6\x57\x02\x0d\xdf\x12\x2c\x95\x24\xb7\x24\xc0\x51\x9a\x6e\xff\xef\x6e\xb1\x08\x5c\x19\x5d\x0f\x13\x62\x66\x4c\xc1\x6d\x02\xcc\x2b\x68\xe3\x2f\xe0\x88\x70\xdd\x78\xdf\x5d\xa5\xe9\x6e\xb7\x4b\x6a\xdd\x27\xc6\xd6\xa9\x3a\x55\xbb\xf4\x53\xe0\x51\x0a\xa4\xd6\x18\xcf\x58\x84\x55\x58\x67\x28\x53\xd7\x52\xd7\x09\x93\x15\x7e\x43\xac\x31\x79\x10\xa6\x7c\x24\x8b\xce\x21\xe6\x78\x42\x6d\xa9\x43\xa5\x7a\xd2\x5e\x3c\x4c\xf0\xc7\x87\x40\x54\x33\x60\xc4\xd9\x16\x71\x75\x06\xb0\x4a\xb2\x20\x80\x0c\x46\x3e\x38\xfa\x0b\xef\x2e\x1f\x98\x30\xff\x80\xf7\x1a\xb1\x40\x1c\x6b\xde\xd2\xb9\x0c\x31\x61\x32\x5f\xac\xd6\xd9\xe2\x66\xfa\xf1\x70\x48\x16\xbc\xa5\xe3\x71\x32\xe4\x37\xab\x69\xbe\xc8\xbe\x4e\x3f\xda\x61\x63\x26\xf8\x9d\x01\x40\xbc\x45\xba\xe5\x36\x55\xb2\x48\x4f\xbd\xaf\x5e\x7d\xe3\xcf\xc7\xf1\x15\x8e\x89\xb8\x36\xa6\x56\x14\x9f\xc9\x02\x4e\x11\x75\x78\x7f\xe9\x18\xf0\xdf\x15\x00\x0a\x4b\xfc\x91\x01\x95\x64\xc2\x68\x62\x2f\xfd\xc2\x86\xf7\xa7\x15\x1c\x7f\x18\x25\xf7\xb8\xbe\x9e\x2e\x67\xf8\x14\x54\x48\xf6\xad\x62\x87\x43\xb2\x1a\x4e\x8f\x47\x36\x5d\xce\xd8\x2b\xf1\x0e\x87\x24\x27\x6f\xf7\xc7\xe3\x28\xe2\x8f\x39\x3e\x0b\xf7\x8a\xe5\x77\x4e\x3d\x83\x4e\xb4\xbf\x37\x46\x9e\x8d\x79\x46\x85\x68\xde\xf2\x7a\x0c\x97\xc3\xa3\x76\xc7\x23\xae\xcf\x43\xe0\xe9\x69\xd4\x61\x90\xe0\xef\x00\x00\x00\xff\xff\x73\x42\xce\xc1\x37\x05\x00\x00")

func assetsStartupShBytes() ([]byte, error) {
	return bindataRead(
		_assetsStartupSh,
		"assets/startup.sh",
	)
}

func assetsStartupSh() (*asset, error) {
	bytes, err := assetsStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsWorkerSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xdf\x6f\xdb\x36\x10\x7e\xe7\x5f\xf1\x2d\xda\x43\x0b\x44\x52\xba\x0e\x7d\x48\xd7\x01\x5e\x66\xb7\xde\x12\xc7\xb3\x9d\x15\xc1\x36\x24\x94\x78\x92\xd8\xd0\xa4\xca\x1f\x56\x5d\xcf\xff\xfb\x40\xd9\x46\x8c\x2e\xd8\xd0\x37\xf2\xee\xbb\xbb\xef\xe3\xdd\x31\xf9\x26\x2f\xa4\xce\x0b\xee\x1a\x96\xb0\x04\xce\x73\xeb\x43\x0b\x57\x5a\xd9\x7a\x54\xc6\xe2\x63\xa0\x40\xe8\x8c\x7d\x20\xdb\x63\x2e\x4c\xbb\xb6\xb2\x6e\x3c\x9e\x95\xcf\xf1\xdd\xd9\x8b\x57\xf8\x25\xe8\x96\x24\x7e\xe5\x1d\x5f\x1a\x6f\x7a\xd8\xa2\x91\x0e\x95\x54\x04\xe9\xd0\x72\xeb\x61\x2a\xcc\x0c\x17\x92\xb2\x1e\xb0\x3b\x47\x6f\x65\x89\xe0\x4c\xe5\x3b\x6e\xe9\x1c\x6b\x13\x50\x72\x0d\x4b\x42\x3a\x6f\x65\x11\x3c\x41\x7a\x70\x2d\x72\x63\xb1\x34\x42\x56\x6b\x96\x44\x53\xd0\x82\x2c\x7c\x43\xf0\x64\x97\x2e\x96\x88\x97\xb7\x93\x1b\xbc\x25\x4d\x96\x2b\x4c\x43\xa1\x64\x89\x4b\x59\x92\x76\x04\xee\xd0\x46\x8b\x6b\x48\xa0\x88\x69\x62\xc0\x28\x32\x98\xef\x19\x60\x64\x82\x16\xdc\x4b\xa3\x4f\x41\xd2\x37\x64\xb1\x22\xeb\xa4\xd1\x78\x79\x28\xb1\xcf\x77\x0a\x63\x59\x82\x67\xdc\x47\xda\x16\xa6\x8d\x61\xcf\xc1\xf5\x1a\x8a\xfb\xc7\xc8\x2f\x35\x3f\x4a\x13\x90\xba\x4f\xd9\x98\x96\xe0\x1b\xee\xa3\xb2\x4e\x2a\x85\x82\x10\x1c\x55\x41\x9d\xb2\x04\x45\xf0\x78\x3f\x5e\xbc\xbb\xbe\x59\x60\x30\xb9\xc5\xfb\xc1\x6c\x36\x98\x2c\x6e\x5f\xa3\x93\xbe\x31\xc1\x83\x56\xb4\xcb\x24\x97\xad\x92\x24\xd0\x71\x6b\xb9\xf6\x6b\x98\x8a\x25\xb8\x1a\xce\x2e\xde\x0d\x26\x8b\xc1\x4f\xe3\xcb\xf1\xe2\x16\xc6\x62\x34\x5e\x4c\x86\xf3\x39\x46\xd7\x33\x0c\x30\x1d\xcc\x16\xe3\x8b\x9b\xcb\xc1\x0c\xd3\x9b\xd9\xf4\x7a\x3e\xcc\x80\x39\x45\x52\xc4\x92\xff\x7a\xd5\xaa\xef\x8b\x25\x08\xf2\x5c\x2a\xb7\x53\x7b\x6b\x02\x5c\x63\x82\x12\x68\xf8\x8a\x60\xa9\x24\xb9\x22\x01\x8e\xd2\xb4\xeb\xff\xef\x16\x4b\xc0\x95\xd1\x75\xaf\x10\x23\x63\x0a\x6e\x33\x60\x5c\x41\x1b\x7f\x0a\x47\x84\x1f\x1a\xef\xdb\xf3\x3c\xef\xba\x2e\xab\x75\xc8\x8c\xad\x73\xb5\x8b\x76\xf9\x8f\x91\x47\x29\x90\x5b\x63\x3c\x63\x09\xe6\x71\xbe\xa1\x4c\x5d\x4b\x5d\x67\x4c\x56\xf8\x03\xa9\xc6\xc9\xbd\x30\xe5\x03\x59\xb4\x0e\x29\xc7\xdf\xa8\x2d\xb5\xa8\x54\x20\xed\xc5\xfd\x09\xfe\x7a\x1d\x89\x6a\x06\xec\x71\x76\x89\xb4\x3a\x00\x58\x25\x59\x7c\x00\x19\x1b\x79\xef\xe8\x23\x5e\x9c\xdd\x33\x61\x8e\xe0\x41\x23\x15\x48\x53\xcd\x97\x74\x08\x43\x4a\x38\x19\x4f\xe6\x8b\xc1\xe4\x62\xf8\x66\xb3\xc9\xc6\xda\x79\xae\x4b\x9a\xf0\x25\x6d\xb7\x27\xbd\xff\x66\x3e\x9c\x4d\x06\x57\xc3\x37\xb6\x9f\x9c\x13\xfc\xc9\x00\x20\x5d\x21\x5f\x71\x9b\x2b\x59\xe4\xbb\x1a\xe7\x5f\xdc\xf1\xe1\x61\xbf\x8d\x7b\x43\x5a\x1b\x53\x2b\x4a\x0f\xa4\x01\xa7\x88\x5a\xbc\x3c\x73\x0c\xf8\xfa\x97\x00\x0a\x4b\xfc\x81\x01\x95\x64\xc2\x68\x62\x8f\xf9\x58\x82\xa9\xa5\x36\xee\xd2\x7e\xe2\x7f\xeb\x7f\x91\x2b\xae\x79\x4d\x36\x63\xa3\xf1\xe5\xf0\x48\x56\xda\x7f\x32\xe9\x72\xe7\xbe\xdb\x6c\xb2\xdf\x77\x5b\xb3\xdd\xde\x29\xa9\xc3\xa7\x3b\xbe\x14\xaf\xbe\x67\x5d\x4d\x1e\xb1\xe1\xee\x3c\xcf\x6b\xe9\x9b\x50\x64\xa5\x59\xe6\x8f\x5a\x9f\xca\x97\x5b\x52\xc4\xe3\x3c\x08\xd3\x69\x65\xb8\xc8\x57\xc7\x25\xf2\x6f\x37\x07\x3e\xdb\xcc\x73\x9b\xd5\x9f\x99\xe7\x16\xe9\xe7\x4f\xab\x0a\x4f\x38\x4b\x71\x6c\x8d\x6a\x67\x61\xb7\x78\xbb\x7f\x93\x65\x4f\xf2\xc0\x66\x93\x4d\xad\xf9\x40\xa5\x1f\xff\xbc\xdd\xc6\xeb\xae\xd5\xfd\x64\x36\xc1\x47\x7a\xec\x78\x64\x24\xfe\xa5\xac\x2e\x5b\xb8\x03\xf6\x9f\x00\x00\x00\xff\xff\xb5\xe3\xc7\x06\xbf\x05\x00\x00")

func assetsWorkerShBytes() ([]byte, error) {
	return bindataRead(
		_assetsWorkerSh,
		"assets/worker.sh",
	)
}

func assetsWorkerSh() (*asset, error) {
	bytes, err := assetsWorkerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/worker.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/startup.sh": assetsStartupSh,
	"assets/worker.sh": assetsWorkerSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"startup.sh": &bintree{assetsStartupSh, map[string]*bintree{}},
		"worker.sh": &bintree{assetsWorkerSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

